/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function() {
var exports = {};
exports.id = "pages/api/create-verification-session";
exports.ids = ["pages/api/create-verification-session"];
exports.modules = {

/***/ "./pages/api/create-verification-session.js":
/*!**************************************************!*\
  !*** ./pages/api/create-verification-session.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ handler; }\n/* harmony export */ });\n// const stripe = require('stripe')('sk_test_51J305OC6YuwVjGqqdtMScisG2JWYy339dNtTGf7QE44BdrPbWPqeMKd5WF1nfpnKYhAmbh8GGQbiaolofct52IgZ003WkhWzMr');\nconst stripe = __webpack_require__(/*! stripe */ \"stripe\")(\"sk_test_51J305OC6YuwVjGqqdtMScisG2JWYy339dNtTGf7QE44BdrPbWPqeMKd5WF1nfpnKYhAmbh8GGQbiaolofct52IgZ003WkhWzMr\");\n\nasync function handler(req, res) {\n  let clientSecret = null;\n  let id = null;\n  let addressVal = null; // this stays as null for anonymous verification but is actual address for open one\n\n  const adr = req.body.address;\n  const verificationType = req.body.verificationType;\n  console.log(\"\\u001b[1;32m [CVS] \\u001b[0m \", req.body);\n  console.log(\"\\u001b[1;32m [CVS] \\u001b[0m \", adr);\n  const depositCheck = await ethereumStuff(adr);\n  console.log(`\\u001b[1;32m [CVS] \\u001b[0m address ${adr} deposit ${depositCheck}`); // passes actual address to metadata if open verification process\n\n  if (verificationType == \"open\") {\n    addressVal = adr;\n  }\n\n  if (depositCheck) {\n    // if paid deposit create new verification session\n    const verificationSession = await stripe.identity.verificationSessions.create({\n      type: 'document',\n      metadata: {\n        passedDatabaseCheck: null,\n        verificationType: verificationType,\n        address: addressVal\n      }\n    }); // lock deposit\n\n    await lockDeposit(adr); // Return only the client secret and id to the frontend.\n\n    clientSecret = verificationSession.client_secret;\n    id = verificationSession.id;\n  }\n\n  res.status(200).json({\n    clientSecret,\n    id\n  });\n}\n\nconst Web3 = __webpack_require__(/*! web3 */ \"web3\");\n\nconst Provider = __webpack_require__(/*! truffle-hdwallet-provider */ \"truffle-hdwallet-provider\");\n\nconst MyContract = __webpack_require__(/*! ../../ethereum/build/IdVerification.json */ \"./ethereum/build/IdVerification.json\");\n\nconst address = \"0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A\";\nconst privateKey = \"7a5e5b16d286a451082ee017f08410fae2c0062e4c7faa45f5beafc64df90664\"; // this is my private key\n\nconst infuraUrl = \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\";\nconst contractAddress = \"0x8e057beF1c3193a3A00686fA20001B7Dda980123\"; // change after deploying new contract version\n\nconst web3 = new Web3(infuraUrl);\nconst myContract = new web3.eth.Contract(JSON.parse(MyContract.interface), contractAddress);\nweb3.eth.accounts.wallet.add(privateKey);\n\nasync function ethereumStuff(adr) {\n  // set up contract and signing key\n  console.log(\"\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m checking if deposit paid\");\n  console.log(\"\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m Setting up data for transaction...\"); // set up transaction\n\n  const tx = myContract.methods.checkIfDepositPaid(adr);\n  const gas = await tx.estimateGas({\n    from: address\n  });\n  const gasPrice = await web3.eth.getGasPrice();\n  console.log(\"\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m estimated gas \", gas);\n  console.log(\"\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m gas price \", gasPrice);\n  const data = tx.encodeABI();\n  const nonce = await web3.eth.getTransactionCount(address);\n  const txData = {\n    from: address,\n    to: myContract.options.address,\n    data: data,\n    gas: gas,\n    gasPrice: gasPrice,\n    nonce: nonce,\n    chain: 'rinkeby',\n    hardfork: 'istanbul'\n  }; // send transaction\n\n  console.log(`\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m Waiting for call...`);\n  const depositCheckAnswerHex = await web3.eth.call(txData);\n  let depositCheckAnswerBool; // might want to make the second check else if in case error is returned and this \n  // accidently interprets that as true\n\n  console.log(\"deposit check: \", depositCheckAnswerHex);\n\n  if (depositCheckAnswerHex == \"0x0000000000000000000000000000000000000000000000000000000000000000\") {\n    depositCheckAnswerBool = false;\n  } else {\n    depositCheckAnswerBool = true;\n  }\n\n  console.log(`\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m Call successful, deposit check ${depositCheckAnswerBool}`);\n  return depositCheckAnswerBool;\n}\n\nasync function lockDeposit(adr) {\n  console.log(\"\\u001b[1;32m [CVS]->[Lock deposit] \\u001b[0m Setting up data for transaction...\"); // set up transaction\n\n  const tx = myContract.methods.lockDeposity(adr);\n  const gas = await tx.estimateGas({\n    from: address\n  });\n  const gasPrice = await web3.eth.getGasPrice();\n  const data = tx.encodeABI();\n  const nonce = await web3.eth.getTransactionCount(address);\n  const txData = {\n    from: address,\n    to: myContract.options.address,\n    data: data,\n    gas: gas,\n    gasPrice: gasPrice,\n    nonce: nonce,\n    chain: 'rinkeby',\n    hardfork: 'istanbul'\n  }; // send transaction\n\n  console.log(`\\u001b[1;32m [CVS]->[Lock deposit] \\u001b[0m Waiting for transaction...`);\n  const receipt = await web3.eth.sendTransaction(txData);\n  console.log(\"\\u001b[1;32m [CVS]->[Lock deposit] \\u001b[0m Transaction receipt \", receipt);\n  console.log(`\\u001b[1;32m [CVS]->[Lock deposit] \\u001b[0m Transaction successful`);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vc3Ryb21faWQvLi9wYWdlcy9hcGkvY3JlYXRlLXZlcmlmaWNhdGlvbi1zZXNzaW9uLmpzPzVkZDQiXSwibmFtZXMiOlsic3RyaXBlIiwicmVxdWlyZSIsInByb2Nlc3MiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwiY2xpZW50U2VjcmV0IiwiaWQiLCJhZGRyZXNzVmFsIiwiYWRyIiwiYm9keSIsImFkZHJlc3MiLCJ2ZXJpZmljYXRpb25UeXBlIiwiY29uc29sZSIsImxvZyIsImRlcG9zaXRDaGVjayIsImV0aGVyZXVtU3R1ZmYiLCJ2ZXJpZmljYXRpb25TZXNzaW9uIiwiaWRlbnRpdHkiLCJ2ZXJpZmljYXRpb25TZXNzaW9ucyIsImNyZWF0ZSIsInR5cGUiLCJtZXRhZGF0YSIsInBhc3NlZERhdGFiYXNlQ2hlY2siLCJsb2NrRGVwb3NpdCIsImNsaWVudF9zZWNyZXQiLCJzdGF0dXMiLCJqc29uIiwiV2ViMyIsIlByb3ZpZGVyIiwiTXlDb250cmFjdCIsInByaXZhdGVLZXkiLCJpbmZ1cmFVcmwiLCJjb250cmFjdEFkZHJlc3MiLCJ3ZWIzIiwibXlDb250cmFjdCIsImV0aCIsIkNvbnRyYWN0IiwiSlNPTiIsInBhcnNlIiwiaW50ZXJmYWNlIiwiYWNjb3VudHMiLCJ3YWxsZXQiLCJhZGQiLCJ0eCIsIm1ldGhvZHMiLCJjaGVja0lmRGVwb3NpdFBhaWQiLCJnYXMiLCJlc3RpbWF0ZUdhcyIsImZyb20iLCJnYXNQcmljZSIsImdldEdhc1ByaWNlIiwiZGF0YSIsImVuY29kZUFCSSIsIm5vbmNlIiwiZ2V0VHJhbnNhY3Rpb25Db3VudCIsInR4RGF0YSIsInRvIiwib3B0aW9ucyIsImNoYWluIiwiaGFyZGZvcmsiLCJkZXBvc2l0Q2hlY2tBbnN3ZXJIZXgiLCJjYWxsIiwiZGVwb3NpdENoZWNrQW5zd2VyQm9vbCIsImxvY2tEZXBvc2l0eSIsInJlY2VpcHQiLCJzZW5kVHJhbnNhY3Rpb24iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLE1B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QyxHQUFSLENBQWEscUVBQWI7QUFFRCIsImZpbGUiOiIuL3BhZ2VzL2FwaS9jcmVhdGUtdmVyaWZpY2F0aW9uLXNlc3Npb24uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjb25zdCBzdHJpcGUgPSByZXF1aXJlKCdzdHJpcGUnKSgnc2tfdGVzdF81MUozMDVPQzZZdXdWakdxcWR0TVNjaXNHMkpXWXkzMzlkTnRUR2Y3UUU0NEJkclBiV1BxZU1LZDVXRjFuZnBuS1loQW1iaDhHR1FiaWFvbG9mY3Q1MklnWjAwM1draFd6TXInKTtcbmNvbnN0IHN0cmlwZSA9IHJlcXVpcmUoJ3N0cmlwZScpKHByb2Nlc3MuZW52LlNUUklQRV9TRUNSRVRfS0VZKTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihyZXEsIHJlcykge1xuICAgIGxldCBjbGllbnRTZWNyZXQgPSBudWxsO1xuICAgIGxldCBpZCA9IG51bGw7XG4gICAgbGV0IGFkZHJlc3NWYWwgPSBudWxsOyAvLyB0aGlzIHN0YXlzIGFzIG51bGwgZm9yIGFub255bW91cyB2ZXJpZmljYXRpb24gYnV0IGlzIGFjdHVhbCBhZGRyZXNzIGZvciBvcGVuIG9uZVxuXG4gICAgY29uc3QgYWRyID0gcmVxLmJvZHkuYWRkcmVzcztcbiAgICBjb25zdCB2ZXJpZmljYXRpb25UeXBlID0gcmVxLmJvZHkudmVyaWZpY2F0aW9uVHlwZTtcblxuICAgIGNvbnNvbGUubG9nKFwiXFx1MDAxYlsxOzMybSBbQ1ZTXSBcXHUwMDFiWzBtIFwiLCByZXEuYm9keSlcbiAgICBjb25zb2xlLmxvZyhcIlxcdTAwMWJbMTszMm0gW0NWU10gXFx1MDAxYlswbSBcIiwgYWRyKVxuXG4gICAgY29uc3QgZGVwb3NpdENoZWNrID0gYXdhaXQgZXRoZXJldW1TdHVmZihhZHIpO1xuXG4gICAgY29uc29sZS5sb2coYFxcdTAwMWJbMTszMm0gW0NWU10gXFx1MDAxYlswbSBhZGRyZXNzICR7YWRyfSBkZXBvc2l0ICR7ZGVwb3NpdENoZWNrfWApXG5cbiAgICAvLyBwYXNzZXMgYWN0dWFsIGFkZHJlc3MgdG8gbWV0YWRhdGEgaWYgb3BlbiB2ZXJpZmljYXRpb24gcHJvY2Vzc1xuICAgIGlmICh2ZXJpZmljYXRpb25UeXBlID09IFwib3BlblwiKSB7XG4gICAgICBhZGRyZXNzVmFsID0gYWRyO1xuICAgIH1cblxuICAgIGlmIChkZXBvc2l0Q2hlY2spIHtcbiAgICAgIC8vIGlmIHBhaWQgZGVwb3NpdCBjcmVhdGUgbmV3IHZlcmlmaWNhdGlvbiBzZXNzaW9uXG4gICAgICBjb25zdCB2ZXJpZmljYXRpb25TZXNzaW9uID0gYXdhaXQgc3RyaXBlLmlkZW50aXR5LnZlcmlmaWNhdGlvblNlc3Npb25zLmNyZWF0ZSh7XG4gICAgICAgIHR5cGU6ICdkb2N1bWVudCcsXG4gICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgcGFzc2VkRGF0YWJhc2VDaGVjazogbnVsbCwgXG4gICAgICAgICAgdmVyaWZpY2F0aW9uVHlwZTogdmVyaWZpY2F0aW9uVHlwZSxcbiAgICAgICAgICBhZGRyZXNzOiBhZGRyZXNzVmFsLFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgfSk7XG5cbiAgICAgIC8vIGxvY2sgZGVwb3NpdFxuICAgICAgYXdhaXQgbG9ja0RlcG9zaXQoYWRyKVxuXG4gICAgICAvLyBSZXR1cm4gb25seSB0aGUgY2xpZW50IHNlY3JldCBhbmQgaWQgdG8gdGhlIGZyb250ZW5kLlxuICAgICAgY2xpZW50U2VjcmV0ID0gdmVyaWZpY2F0aW9uU2Vzc2lvbi5jbGllbnRfc2VjcmV0O1xuICAgICAgaWQgID0gdmVyaWZpY2F0aW9uU2Vzc2lvbi5pZDtcblxuXG4gICAgfVxuXG4gICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IGNsaWVudFNlY3JldCwgaWQgfSlcbn1cblxuY29uc3QgV2ViMyA9IHJlcXVpcmUoJ3dlYjMnKTtcbmNvbnN0IFByb3ZpZGVyID0gcmVxdWlyZSgndHJ1ZmZsZS1oZHdhbGxldC1wcm92aWRlcicpO1xuY29uc3QgTXlDb250cmFjdCA9IHJlcXVpcmUoJy4uLy4uL2V0aGVyZXVtL2J1aWxkL0lkVmVyaWZpY2F0aW9uLmpzb24nKTtcblxuY29uc3QgYWRkcmVzcyA9IHByb2Nlc3MuZW52LkVUSF9BRERSRVNTO1xuY29uc3QgcHJpdmF0ZUtleSA9IHByb2Nlc3MuZW52LkVUSF9QUklWQVRFX0tFWTsgLy8gdGhpcyBpcyBteSBwcml2YXRlIGtleVxuY29uc3QgaW5mdXJhVXJsID0gcHJvY2Vzcy5lbnYuSU5GVVJOQV9VUkw7XG5cbmNvbnN0IGNvbnRyYWN0QWRkcmVzcyA9IHByb2Nlc3MuZW52LlNPTF9DT05UUkFOQ1RfQUREUkVTUzsgLy8gY2hhbmdlIGFmdGVyIGRlcGxveWluZyBuZXcgY29udHJhY3QgdmVyc2lvblxuXG5jb25zdCB3ZWIzID0gbmV3IFdlYjMoaW5mdXJhVXJsKTtcbmNvbnN0IG15Q29udHJhY3QgPSBuZXcgd2ViMy5ldGguQ29udHJhY3QoXG4gIEpTT04ucGFyc2UoTXlDb250cmFjdC5pbnRlcmZhY2UpLFxuICBjb250cmFjdEFkZHJlc3Ncbik7XG53ZWIzLmV0aC5hY2NvdW50cy53YWxsZXQuYWRkKHByaXZhdGVLZXkpO1xuXG5hc3luYyBmdW5jdGlvbiBldGhlcmV1bVN0dWZmKGFkcikge1xuICAgIFxuICAvLyBzZXQgdXAgY29udHJhY3QgYW5kIHNpZ25pbmcga2V5XG4gIGNvbnNvbGUubG9nKFwiXFx1MDAxYlsxOzMybSBbQ1ZTXS0+W0RlcG9pdCBjaGVja10gXFx1MDAxYlswbSBjaGVja2luZyBpZiBkZXBvc2l0IHBhaWRcIilcblxuXG4gIGNvbnNvbGUubG9nKCBcIlxcdTAwMWJbMTszMm0gW0NWU10tPltEZXBvaXQgY2hlY2tdIFxcdTAwMWJbMG0gU2V0dGluZyB1cCBkYXRhIGZvciB0cmFuc2FjdGlvbi4uLlwiICk7XG5cbiAgLy8gc2V0IHVwIHRyYW5zYWN0aW9uXG4gIGNvbnN0IHR4ID0gbXlDb250cmFjdC5tZXRob2RzLmNoZWNrSWZEZXBvc2l0UGFpZChhZHIpO1xuICBjb25zdCBnYXMgPSBhd2FpdCB0eC5lc3RpbWF0ZUdhcyh7ZnJvbTogYWRkcmVzc30pO1xuICBjb25zdCBnYXNQcmljZSA9IGF3YWl0IHdlYjMuZXRoLmdldEdhc1ByaWNlKCk7XG4gIGNvbnNvbGUubG9nKFwiXFx1MDAxYlsxOzMybSBbQ1ZTXS0+W0RlcG9pdCBjaGVja10gXFx1MDAxYlswbSBlc3RpbWF0ZWQgZ2FzIFwiLCBnYXMpXG4gIGNvbnNvbGUubG9nKFwiXFx1MDAxYlsxOzMybSBbQ1ZTXS0+W0RlcG9pdCBjaGVja10gXFx1MDAxYlswbSBnYXMgcHJpY2UgXCIsIGdhc1ByaWNlKVxuXG4gIGNvbnN0IGRhdGEgPSB0eC5lbmNvZGVBQkkoKTtcbiAgY29uc3Qgbm9uY2UgPSBhd2FpdCB3ZWIzLmV0aC5nZXRUcmFuc2FjdGlvbkNvdW50KGFkZHJlc3MpO1xuICBjb25zdCB0eERhdGEgPSB7XG4gICAgZnJvbTogYWRkcmVzcyxcbiAgICB0bzogbXlDb250cmFjdC5vcHRpb25zLmFkZHJlc3MsXG4gICAgZGF0YTogZGF0YSxcbiAgICBnYXM6IGdhcyxcbiAgICBnYXNQcmljZTogZ2FzUHJpY2UsXG4gICAgbm9uY2U6IG5vbmNlLCBcbiAgICBjaGFpbjogJ3JpbmtlYnknLCBcbiAgICBoYXJkZm9yazogJ2lzdGFuYnVsJ1xuICB9O1xuICBcbiAgLy8gc2VuZCB0cmFuc2FjdGlvblxuICBjb25zb2xlLmxvZyhgXFx1MDAxYlsxOzMybSBbQ1ZTXS0+W0RlcG9pdCBjaGVja10gXFx1MDAxYlswbSBXYWl0aW5nIGZvciBjYWxsLi4uYCk7XG4gIGNvbnN0IGRlcG9zaXRDaGVja0Fuc3dlckhleCA9IGF3YWl0IHdlYjMuZXRoLmNhbGwodHhEYXRhKTtcbiAgbGV0IGRlcG9zaXRDaGVja0Fuc3dlckJvb2w7XG5cbiAgLy8gbWlnaHQgd2FudCB0byBtYWtlIHRoZSBzZWNvbmQgY2hlY2sgZWxzZSBpZiBpbiBjYXNlIGVycm9yIGlzIHJldHVybmVkIGFuZCB0aGlzIFxuICAvLyBhY2NpZGVudGx5IGludGVycHJldHMgdGhhdCBhcyB0cnVlXG4gIGNvbnNvbGUubG9nKFwiZGVwb3NpdCBjaGVjazogXCIsIGRlcG9zaXRDaGVja0Fuc3dlckhleClcbiAgaWYgKGRlcG9zaXRDaGVja0Fuc3dlckhleCA9PSBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiKSB7XG4gICAgZGVwb3NpdENoZWNrQW5zd2VyQm9vbCA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIGRlcG9zaXRDaGVja0Fuc3dlckJvb2wgPSB0cnVlO1xuICB9XG4gIGNvbnNvbGUubG9nKGBcXHUwMDFiWzE7MzJtIFtDVlNdLT5bRGVwb2l0IGNoZWNrXSBcXHUwMDFiWzBtIENhbGwgc3VjY2Vzc2Z1bCwgZGVwb3NpdCBjaGVjayAke2RlcG9zaXRDaGVja0Fuc3dlckJvb2x9YCk7XG5cblxuICByZXR1cm4gZGVwb3NpdENoZWNrQW5zd2VyQm9vbDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9ja0RlcG9zaXQoYWRyKSB7XG4gICAgXG4gIGNvbnNvbGUubG9nKCBcIlxcdTAwMWJbMTszMm0gW0NWU10tPltMb2NrIGRlcG9zaXRdIFxcdTAwMWJbMG0gU2V0dGluZyB1cCBkYXRhIGZvciB0cmFuc2FjdGlvbi4uLlwiICk7XG5cbiAgLy8gc2V0IHVwIHRyYW5zYWN0aW9uXG4gIGNvbnN0IHR4ID0gbXlDb250cmFjdC5tZXRob2RzLmxvY2tEZXBvc2l0eShhZHIpO1xuICBjb25zdCBnYXMgPSBhd2FpdCB0eC5lc3RpbWF0ZUdhcyh7ZnJvbTogYWRkcmVzc30pO1xuICBjb25zdCBnYXNQcmljZSA9IGF3YWl0IHdlYjMuZXRoLmdldEdhc1ByaWNlKCk7XG4gIGNvbnN0IGRhdGEgPSB0eC5lbmNvZGVBQkkoKTtcbiAgY29uc3Qgbm9uY2UgPSBhd2FpdCB3ZWIzLmV0aC5nZXRUcmFuc2FjdGlvbkNvdW50KGFkZHJlc3MpO1xuICBjb25zdCB0eERhdGEgPSB7XG4gICAgZnJvbTogYWRkcmVzcyxcbiAgICB0bzogbXlDb250cmFjdC5vcHRpb25zLmFkZHJlc3MsXG4gICAgZGF0YTogZGF0YSxcbiAgICBnYXM6IGdhcyxcbiAgICBnYXNQcmljZTogZ2FzUHJpY2UsXG4gICAgbm9uY2U6IG5vbmNlLCBcbiAgICBjaGFpbjogJ3JpbmtlYnknLCBcbiAgICBoYXJkZm9yazogJ2lzdGFuYnVsJ1xuICB9O1xuICBcbiAgLy8gc2VuZCB0cmFuc2FjdGlvblxuICBjb25zb2xlLmxvZyhgXFx1MDAxYlsxOzMybSBbQ1ZTXS0+W0xvY2sgZGVwb3NpdF0gXFx1MDAxYlswbSBXYWl0aW5nIGZvciB0cmFuc2FjdGlvbi4uLmApO1xuICBjb25zdCByZWNlaXB0ID0gYXdhaXQgd2ViMy5ldGguc2VuZFRyYW5zYWN0aW9uKHR4RGF0YSk7XG4gIGNvbnNvbGUubG9nKFwiXFx1MDAxYlsxOzMybSBbQ1ZTXS0+W0xvY2sgZGVwb3NpdF0gXFx1MDAxYlswbSBUcmFuc2FjdGlvbiByZWNlaXB0IFwiLCByZWNlaXB0KVxuXG4gIGNvbnNvbGUubG9nKGBcXHUwMDFiWzE7MzJtIFtDVlNdLT5bTG9jayBkZXBvc2l0XSBcXHUwMDFiWzBtIFRyYW5zYWN0aW9uIHN1Y2Nlc3NmdWxgKTtcblxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/api/create-verification-session.js\n");

/***/ }),

/***/ "stripe":
/*!*************************!*\
  !*** external "stripe" ***!
  \*************************/
/***/ (function(module) {

"use strict";
module.exports = require("stripe");;

/***/ }),

/***/ "truffle-hdwallet-provider":
/*!********************************************!*\
  !*** external "truffle-hdwallet-provider" ***!
  \********************************************/
/***/ (function(module) {

"use strict";
module.exports = require("truffle-hdwallet-provider");;

/***/ }),

/***/ "web3":
/*!***********************!*\
  !*** external "web3" ***!
  \***********************/
/***/ (function(module) {

"use strict";
module.exports = require("web3");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
var __webpack_exports__ = __webpack_require__.X(0, ["ethereum_build_IdVerification_json"], function() { return __webpack_exec__("./pages/api/create-verification-session.js"); });
module.exports = __webpack_exports__;

})();