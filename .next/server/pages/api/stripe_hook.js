/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function() {
var exports = {};
exports.id = "pages/api/stripe_hook";
exports.ids = ["pages/api/stripe_hook"];
exports.modules = {

/***/ "./backend/ethBackend.js":
/*!*******************************!*\
  !*** ./backend/ethBackend.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EthereumStuff\": function() { return /* binding */ EthereumStuff; }\n/* harmony export */ });\n/* harmony import */ var _public_mimc_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../public/mimc.ts */ \"./public/mimc.ts\");\n/* harmony import */ var _mongo_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mongo.js */ \"./backend/mongo.js\");\n\n\n\nconst Web3 = __webpack_require__(/*! web3 */ \"web3\");\n\nconst Provider = __webpack_require__(/*! truffle-hdwallet-provider */ \"truffle-hdwallet-provider\");\n\nconst MyContract = __webpack_require__(/*! ../ethereum/build/IdVerification.json */ \"./ethereum/build/IdVerification.json\");\n\nconst seedrandom = __webpack_require__(/*! seedrandom */ \"seedrandom\");\n\nconst address = \"0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A\";\nconst privateKey = \"7a5e5b16d286a451082ee017f08410fae2c0062e4c7faa45f5beafc64df90664\"; // this is my private key\n\nconst infuraUrl = \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\";\nconst contractAddress = \"0x8e057beF1c3193a3A00686fA20001B7Dda980123\"; // change after deploying new contract version\n\nasync function EthereumStuff(id) {\n  // set up contract and signing key\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m Setting up contract and signing key...\");\n  const web3 = new Web3(infuraUrl);\n  const myContract = new web3.eth.Contract(JSON.parse(MyContract.interface), contractAddress);\n  web3.eth.accounts.wallet.add(privateKey); // set up info for transaction\n  // take session id and seed random num generator with it so [id].js will be able to get same num\n  // get random num\n  // get Mimc hash of this num (this is the value we will claim we know the pre image of)\n  // convert Mimc hash to hex and store this val in contract\n  // this hex value will be the last input of zkp\n\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m Setting up data for transaction...\");\n  var seededHash = seedrandom(id);\n  const randSeededNum = seededHash() * 1000000000000000000;\n  const mimcVal = (0,_public_mimc_ts__WEBPACK_IMPORTED_MODULE_0__.default)(randSeededNum);\n  var hexVal = mimcVal.toString(16);\n  hexVal = `0x${hexVal}`; // turn it into right format for contract\n\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m randSeededNum\", randSeededNum);\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m mimc val\", mimcVal.toString());\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m hexVal \", hexVal); // set up transaction\n\n  const tx = myContract.methods.addNewHash(hexVal);\n  const gas = await tx.estimateGas({\n    from: address\n  });\n  const gasPrice = await web3.eth.getGasPrice();\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m estimated gas \", gas);\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m gas price \", gasPrice);\n  const data = tx.encodeABI();\n  const nonce = await web3.eth.getTransactionCount(address);\n  const txData = {\n    from: address,\n    to: myContract.options.address,\n    data: data,\n    gas: gas,\n    gasPrice: gasPrice,\n    nonce: nonce,\n    chain: 'rinkeby',\n    hardfork: 'istanbul'\n  }; // send transaction\n\n  console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Waiting for transaction...`);\n  const receipt = await web3.eth.sendTransaction(txData);\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m Transaction receipt \", receipt); // console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Transaction hash: ${receipt.transactionHash}`);\n\n  console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Transaction successful`);\n  return true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vc3Ryb21faWQvLi9iYWNrZW5kL2V0aEJhY2tlbmQuanM/MTViOSJdLCJuYW1lcyI6WyJXZWIzIiwicmVxdWlyZSIsIlByb3ZpZGVyIiwiTXlDb250cmFjdCIsInNlZWRyYW5kb20iLCJhZGRyZXNzIiwicHJvY2VzcyIsInByaXZhdGVLZXkiLCJpbmZ1cmFVcmwiLCJjb250cmFjdEFkZHJlc3MiLCJFdGhlcmV1bVN0dWZmIiwiaWQiLCJjb25zb2xlIiwibG9nIiwid2ViMyIsIm15Q29udHJhY3QiLCJldGgiLCJDb250cmFjdCIsIkpTT04iLCJwYXJzZSIsImludGVyZmFjZSIsImFjY291bnRzIiwid2FsbGV0IiwiYWRkIiwic2VlZGVkSGFzaCIsInJhbmRTZWVkZWROdW0iLCJtaW1jVmFsIiwibWltYyIsImhleFZhbCIsInRvU3RyaW5nIiwidHgiLCJtZXRob2RzIiwiYWRkTmV3SGFzaCIsImdhcyIsImVzdGltYXRlR2FzIiwiZnJvbSIsImdhc1ByaWNlIiwiZ2V0R2FzUHJpY2UiLCJkYXRhIiwiZW5jb2RlQUJJIiwibm9uY2UiLCJnZXRUcmFuc2FjdGlvbkNvdW50IiwidHhEYXRhIiwidG8iLCJvcHRpb25zIiwiY2hhaW4iLCJoYXJkZm9yayIsInJlY2VpcHQiLCJzZW5kVHJhbnNhY3Rpb24iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLGtCQUFELENBQXBCOztBQUNBLE1BQU1DLFFBQVEsR0FBR0QsbUJBQU8sQ0FBQyw0REFBRCxDQUF4Qjs7QUFDQSxNQUFNRSxVQUFVLEdBQUdGLG1CQUFPLENBQUMsbUZBQUQsQ0FBMUI7O0FBQ0EsTUFBTUcsVUFBVSxHQUFHSCxtQkFBTyxDQUFDLDhCQUFELENBQTFCOztBQUVBLE1BQU1JLE9BQU8sR0FBR0MsNENBQWhCO0FBQ0EsTUFBTUMsVUFBVSxHQUFHRCxrRUFBbkIsQyxDQUFnRDs7QUFDaEQsTUFBTUUsU0FBUyxHQUFHRiwr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aW1wb3J0IG1pbWMgZnJvbSAnLi4vcHVibGljL21pbWMudHMnO1xuaW1wb3J0IHNlYXJjaERhdGFiYXNlIGZyb20gJy4vbW9uZ28uanMnXG5cbmNvbnN0IFdlYjMgPSByZXF1aXJlKCd3ZWIzJyk7XG5jb25zdCBQcm92aWRlciA9IHJlcXVpcmUoJ3RydWZmbGUtaGR3YWxsZXQtcHJvdmlkZXInKTtcbmNvbnN0IE15Q29udHJhY3QgPSByZXF1aXJlKCcuLi9ldGhlcmV1bS9idWlsZC9JZFZlcmlmaWNhdGlvbi5qc29uJyk7XG5jb25zdCBzZWVkcmFuZG9tID0gcmVxdWlyZSgnc2VlZHJhbmRvbScpO1xuXG5jb25zdCBhZGRyZXNzID0gcHJvY2Vzcy5lbnYuRVRIX0FERFJFU1M7XG5jb25zdCBwcml2YXRlS2V5ID0gcHJvY2Vzcy5lbnYuRVRIX1BSSVZBVEVfS0VZOyAvLyB0aGlzIGlzIG15IHByaXZhdGUga2V5XG5jb25zdCBpbmZ1cmFVcmwgPSBwcm9jZXNzLmVudi5JTkZVUk5BX1VSTDtcblxuY29uc3QgY29udHJhY3RBZGRyZXNzID0gcHJvY2Vzcy5lbnYuU09MX0NPTlRSQU5DVF9BRERSRVNTOyAvLyBjaGFuZ2UgYWZ0ZXIgZGVwbG95aW5nIG5ldyBjb250cmFjdCB2ZXJzaW9uXG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEV0aGVyZXVtU3R1ZmYoaWQpIHtcblxuICAgIC8vIHNldCB1cCBjb250cmFjdCBhbmQgc2lnbmluZyBrZXlcbiAgICBjb25zb2xlLmxvZyggXCJcXHUwMDFiWzE7MzJtIFtFdGhlcmV1bV0gXFx1MDAxYlswbSBTZXR0aW5nIHVwIGNvbnRyYWN0IGFuZCBzaWduaW5nIGtleS4uLlwiICk7XG5cbiAgICBjb25zdCB3ZWIzID0gbmV3IFdlYjMoaW5mdXJhVXJsKTtcbiAgICBjb25zdCBteUNvbnRyYWN0ID0gbmV3IHdlYjMuZXRoLkNvbnRyYWN0KFxuICAgICAgSlNPTi5wYXJzZShNeUNvbnRyYWN0LmludGVyZmFjZSksXG4gICAgICBjb250cmFjdEFkZHJlc3NcbiAgICApO1xuICAgIHdlYjMuZXRoLmFjY291bnRzLndhbGxldC5hZGQocHJpdmF0ZUtleSk7XG4gIFxuICAgIC8vIHNldCB1cCBpbmZvIGZvciB0cmFuc2FjdGlvblxuICAgIC8vIHRha2Ugc2Vzc2lvbiBpZCBhbmQgc2VlZCByYW5kb20gbnVtIGdlbmVyYXRvciB3aXRoIGl0IHNvIFtpZF0uanMgd2lsbCBiZSBhYmxlIHRvIGdldCBzYW1lIG51bVxuICAgIC8vIGdldCByYW5kb20gbnVtXG4gICAgLy8gZ2V0IE1pbWMgaGFzaCBvZiB0aGlzIG51bSAodGhpcyBpcyB0aGUgdmFsdWUgd2Ugd2lsbCBjbGFpbSB3ZSBrbm93IHRoZSBwcmUgaW1hZ2Ugb2YpXG4gICAgLy8gY29udmVydCBNaW1jIGhhc2ggdG8gaGV4IGFuZCBzdG9yZSB0aGlzIHZhbCBpbiBjb250cmFjdFxuICAgIC8vIHRoaXMgaGV4IHZhbHVlIHdpbGwgYmUgdGhlIGxhc3QgaW5wdXQgb2YgemtwXG4gIFxuICAgIGNvbnNvbGUubG9nKCBcIlxcdTAwMWJbMTszMm0gW0V0aGVyZXVtXSBcXHUwMDFiWzBtIFNldHRpbmcgdXAgZGF0YSBmb3IgdHJhbnNhY3Rpb24uLi5cIiApO1xuXG4gICAgdmFyIHNlZWRlZEhhc2ggPSBzZWVkcmFuZG9tKGlkKTtcbiAgICBjb25zdCByYW5kU2VlZGVkTnVtID0gc2VlZGVkSGFzaCgpICogMTAwMDAwMDAwMDAwMDAwMDAwMDtcbiAgICBjb25zdCBtaW1jVmFsID0gbWltYyhyYW5kU2VlZGVkTnVtKVxuICAgIHZhciBoZXhWYWwgPSBtaW1jVmFsLnRvU3RyaW5nKDE2KTtcbiAgICBoZXhWYWwgPSBgMHgke2hleFZhbH1gIC8vIHR1cm4gaXQgaW50byByaWdodCBmb3JtYXQgZm9yIGNvbnRyYWN0XG5cbiAgICBjb25zb2xlLmxvZyhcIlxcdTAwMWJbMTszMm0gW0V0aGVyZXVtXSBcXHUwMDFiWzBtIHJhbmRTZWVkZWROdW1cIiwgcmFuZFNlZWRlZE51bSlcbiAgICBjb25zb2xlLmxvZyhcIlxcdTAwMWJbMTszMm0gW0V0aGVyZXVtXSBcXHUwMDFiWzBtIG1pbWMgdmFsXCIsIG1pbWNWYWwudG9TdHJpbmcoKSlcbiAgICBjb25zb2xlLmxvZyhcIlxcdTAwMWJbMTszMm0gW0V0aGVyZXVtXSBcXHUwMDFiWzBtIGhleFZhbCBcIiwgaGV4VmFsKVxuICBcbiAgICAvLyBzZXQgdXAgdHJhbnNhY3Rpb25cbiAgICBjb25zdCB0eCA9IG15Q29udHJhY3QubWV0aG9kcy5hZGROZXdIYXNoKGhleFZhbCk7XG4gICAgY29uc3QgZ2FzID0gYXdhaXQgdHguZXN0aW1hdGVHYXMoe2Zyb206IGFkZHJlc3N9KTtcbiAgICBjb25zdCBnYXNQcmljZSA9IGF3YWl0IHdlYjMuZXRoLmdldEdhc1ByaWNlKCk7XG4gICAgY29uc29sZS5sb2coXCJcXHUwMDFiWzE7MzJtIFtFdGhlcmV1bV0gXFx1MDAxYlswbSBlc3RpbWF0ZWQgZ2FzIFwiLCBnYXMpXG4gICAgY29uc29sZS5sb2coXCJcXHUwMDFiWzE7MzJtIFtFdGhlcmV1bV0gXFx1MDAxYlswbSBnYXMgcHJpY2UgXCIsIGdhc1ByaWNlKVxuXG4gICAgY29uc3QgZGF0YSA9IHR4LmVuY29kZUFCSSgpO1xuICAgIGNvbnN0IG5vbmNlID0gYXdhaXQgd2ViMy5ldGguZ2V0VHJhbnNhY3Rpb25Db3VudChhZGRyZXNzKTtcbiAgICBjb25zdCB0eERhdGEgPSB7XG4gICAgICBmcm9tOiBhZGRyZXNzLFxuICAgICAgdG86IG15Q29udHJhY3Qub3B0aW9ucy5hZGRyZXNzLFxuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIGdhczogZ2FzLFxuICAgICAgZ2FzUHJpY2U6IGdhc1ByaWNlLFxuICAgICAgbm9uY2U6IG5vbmNlLCBcbiAgICAgIGNoYWluOiAncmlua2VieScsIFxuICAgICAgaGFyZGZvcms6ICdpc3RhbmJ1bCdcbiAgICB9O1xuICAgIFxuICAgIC8vIHNlbmQgdHJhbnNhY3Rpb25cbiAgICBjb25zb2xlLmxvZyhgXFx1MDAxYlsxOzMybSBbRXRoZXJldW1dIFxcdTAwMWJbMG0gV2FpdGluZyBmb3IgdHJhbnNhY3Rpb24uLi5gKTtcbiAgICBjb25zdCByZWNlaXB0ID0gYXdhaXQgd2ViMy5ldGguc2VuZFRyYW5zYWN0aW9uKHR4RGF0YSk7XG4gICAgY29uc29sZS5sb2coXCJcXHUwMDFiWzE7MzJtIFtFdGhlcmV1bV0gXFx1MDAxYlswbSBUcmFuc2FjdGlvbiByZWNlaXB0IFwiLCByZWNlaXB0KVxuICAgIC8vIGNvbnNvbGUubG9nKGBcXHUwMDFiWzE7MzJtIFtFdGhlcmV1bV0gXFx1MDAxYlswbSBUcmFuc2FjdGlvbiBoYXNoOiAke3JlY2VpcHQudHJhbnNhY3Rpb25IYXNofWApO1xuICAgIGNvbnNvbGUubG9nKGBcXHUwMDFiWzE7MzJtIFtFdGhlcmV1bV0gXFx1MDAxYlswbSBUcmFuc2FjdGlvbiBzdWNjZXNzZnVsYCk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./backend/ethBackend.js\n");

/***/ }),

/***/ "./backend/ethOpenVerification.js":
/*!****************************************!*\
  !*** ./backend/ethOpenVerification.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"openVerificationEthFunction\": function() { return /* binding */ openVerificationEthFunction; }\n/* harmony export */ });\nconst Web3 = __webpack_require__(/*! web3 */ \"web3\");\n\nconst Provider = __webpack_require__(/*! truffle-hdwallet-provider */ \"truffle-hdwallet-provider\");\n\nconst MyContract = __webpack_require__(/*! ../ethereum/build/IdVerification.json */ \"./ethereum/build/IdVerification.json\");\n\nconst seedrandom = __webpack_require__(/*! seedrandom */ \"seedrandom\");\n\nconst address = \"0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A\";\nconst privateKey = \"7a5e5b16d286a451082ee017f08410fae2c0062e4c7faa45f5beafc64df90664\"; // this is my private key\n\nconst infuraUrl = \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\";\nconst contractAddress = \"0x8e057beF1c3193a3A00686fA20001B7Dda980123\"; // change after deploying new contract version\n\nasync function openVerificationEthFunction(adr, name) {\n  // set up contract and signing key\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m Setting up contract and signing key...\");\n  const web3 = new Web3(infuraUrl);\n  const myContract = new web3.eth.Contract(JSON.parse(MyContract.interface), contractAddress);\n  web3.eth.accounts.wallet.add(privateKey); // set up info for transaction\n  // take session id and seed random num generator with it so [id].js will be able to get same num\n  // get random num\n  // get Mimc hash of this num (this is the value we will claim we know the pre image of)\n  // convert Mimc hash to hex and store this val in contract\n  // this hex value will be the last input of zkp\n\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m Setting up data for transaction...\"); // set up transaction\n\n  const tx = myContract.methods.addOpenVerification(adr, name);\n  const gas = await tx.estimateGas({\n    from: address\n  });\n  const gasPrice = await web3.eth.getGasPrice();\n  const data = tx.encodeABI();\n  const nonce = await web3.eth.getTransactionCount(address);\n  const txData = {\n    from: address,\n    to: myContract.options.address,\n    data: data,\n    gas: gas,\n    gasPrice: gasPrice,\n    nonce: nonce,\n    chain: 'rinkeby',\n    hardfork: 'istanbul'\n  }; // send transaction\n\n  console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Waiting for transaction...`);\n  const receipt = await web3.eth.sendTransaction(txData); // console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Transaction hash: ${receipt.transactionHash}`);\n\n  console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Transaction successful`);\n  return true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vc3Ryb21faWQvLi9iYWNrZW5kL2V0aE9wZW5WZXJpZmljYXRpb24uanM/NDEyMCJdLCJuYW1lcyI6WyJXZWIzIiwicmVxdWlyZSIsIlByb3ZpZGVyIiwiTXlDb250cmFjdCIsInNlZWRyYW5kb20iLCJhZGRyZXNzIiwicHJvY2VzcyIsInByaXZhdGVLZXkiLCJpbmZ1cmFVcmwiLCJjb250cmFjdEFkZHJlc3MiLCJvcGVuVmVyaWZpY2F0aW9uRXRoRnVuY3Rpb24iLCJhZHIiLCJuYW1lIiwiY29uc29sZSIsImxvZyIsIndlYjMiLCJteUNvbnRyYWN0IiwiZXRoIiwiQ29udHJhY3QiLCJKU09OIiwicGFyc2UiLCJpbnRlcmZhY2UiLCJhY2NvdW50cyIsIndhbGxldCIsImFkZCIsInR4IiwibWV0aG9kcyIsImFkZE9wZW5WZXJpZmljYXRpb24iLCJnYXMiLCJlc3RpbWF0ZUdhcyIsImZyb20iLCJnYXNQcmljZSIsImdldEdhc1ByaWNlIiwiZGF0YSIsImVuY29kZUFCSSIsIm5vbmNlIiwiZ2V0VHJhbnNhY3Rpb25Db3VudCIsInR4RGF0YSIsInRvIiwib3B0aW9ucyIsImNoYWluIiwiaGFyZGZvcmsiLCJyZWNlaXB0Iiwic2VuZFRyYW5zYWN0aW9uIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLGtCQUFELENBQXBCOztBQUNBLE1BQU1DLFFBQVEsR0FBR0QsbUJBQU8sQ0FBQyw0REFBRCxDQUF4Qjs7QUFDQSxNQUFNRSxVQUFVLEdBQUdGLG1CQUFPLENBQUMsbUZBQUQsQ0FBMUI7O0FBQ0EsTUFBTUcsVUFBVSxHQUFHSCxtQkFBTyxDQUFDLDhCQUFELENBQTFCOztBQUVBLE1BQU1JLE9BQU8sR0FBR0MsNENBQWhCO0FBQ0EsTUFBTUMsVUFBVSxHQUFHRCxrRUFBbkIsQyxDQUFnRDs7QUFDaEQsTUFBTUUsU0FBUyxHQUFHRiwrREFBbEI7QUFFQSxNQUFNRyxlQUFlLEdBQUdILDRDQUF4QixDLENBQTJEOztBQUdwRCxlQUFlSSwyQkFBZixDQUEyQ0MsR0FBM0MsRUFBZ0RDLElBQWhELEVBQXNEO0FBRXpEO0FBQ0FDLFNBQU8sQ0FBQ0MsR0FBUixDQUFhLDBFQUFiO0FBRUEsUUFBTUMsSUFBSSxHQUFHLElBQUlmLElBQUosQ0FBU1EsU0FBVCxDQUFiO0FBQ0EsUUFBTVEsVUFBVSxHQUFHLElBQUlELElBQUksQ0FBQ0UsR0FBTCxDQUFTQyxRQUFiLENBQ2pCQyxJQUFJLENBQUNDLEtBQUwsQ0FBV2pCLFVBQVUsQ0FBQ2tCLFNBQXRCLENBRGlCLEVBRWpCWixlQUZpQixDQUFuQjtBQUlBTSxNQUFJLENBQUNFLEdBQUwsQ0FBU0ssUUFBVCxDQUFrQkMsTUFBbEIsQ0FBeUJDLEdBQXpCLENBQTZCakIsVUFBN0IsRUFWeUQsQ0FZekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBTSxTQUFPLENBQUNDLEdBQVIsQ0FBYSxzRUFBYixFQW5CeUQsQ0FzQnpEOztBQUNBLFFBQU1XLEVBQUUsR0FBR1QsVUFBVSxDQUFDVSxPQUFYLENBQW1CQyxtQkFBbkIsQ0FBdUNoQixHQUF2QyxFQUE0Q0MsSUFBNUMsQ0FBWDtBQUNBLFFBQU1nQixHQUFHLEdBQUcsTUFBTUgsRUFBRSxDQUFDSSxXQUFILENBQWU7QUFBQ0MsUUFBSSxFQUFFekI7QUFBUCxHQUFmLENBQWxCO0FBQ0EsUUFBTTBCLFFBQVEsR0FBRyxNQUFNaEIsSUFBSSxDQUFDRSxHQUFMLENBQVNlLFdBQVQsRUFBdkI7QUFDQSxRQUFNQyxJQUFJLEdBQUdSLEVBQUUsQ0FBQ1MsU0FBSCxFQUFiO0FBQ0EsUUFBTUMsS0FBSyxHQUFHLE1BQU1wQixJQUFJLENBQUNFLEdBQUwsQ0FBU21CLG1CQUFULENBQTZCL0IsT0FBN0IsQ0FBcEI7QUFDQSxRQUFNZ0MsTUFBTSxHQUFHO0FBQ2JQLFFBQUksRUFBRXpCLE9BRE87QUFFYmlDLE1BQUUsRUFBRXRCLFVBQVUsQ0FBQ3VCLE9BQVgsQ0FBbUJsQyxPQUZWO0FBR2I0QixRQUFJLEVBQUVBLElBSE87QUFJYkwsT0FBRyxFQUFFQSxHQUpRO0FBS2JHLFlBQVEsRUFBRUEsUUFMRztBQU1iSSxTQUFLLEVBQUVBLEtBTk07QUFPYkssU0FBSyxFQUFFLFNBUE07QUFRYkMsWUFBUSxFQUFFO0FBUkcsR0FBZixDQTVCeUQsQ0F1Q3pEOztBQUNBNUIsU0FBTyxDQUFDQyxHQUFSLENBQWEsOERBQWI7QUFDQSxRQUFNNEIsT0FBTyxHQUFHLE1BQU0zQixJQUFJLENBQUNFLEdBQUwsQ0FBUzBCLGVBQVQsQ0FBeUJOLE1BQXpCLENBQXRCLENBekN5RCxDQTJDekQ7O0FBQ0F4QixTQUFPLENBQUNDLEdBQVIsQ0FBYSwwREFBYjtBQUVBLFNBQU8sSUFBUDtBQUNEIiwiZmlsZSI6Ii4vYmFja2VuZC9ldGhPcGVuVmVyaWZpY2F0aW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgV2ViMyA9IHJlcXVpcmUoJ3dlYjMnKTtcbmNvbnN0IFByb3ZpZGVyID0gcmVxdWlyZSgndHJ1ZmZsZS1oZHdhbGxldC1wcm92aWRlcicpO1xuY29uc3QgTXlDb250cmFjdCA9IHJlcXVpcmUoJy4uL2V0aGVyZXVtL2J1aWxkL0lkVmVyaWZpY2F0aW9uLmpzb24nKTtcbmNvbnN0IHNlZWRyYW5kb20gPSByZXF1aXJlKCdzZWVkcmFuZG9tJyk7XG5cbmNvbnN0IGFkZHJlc3MgPSBwcm9jZXNzLmVudi5FVEhfQUREUkVTUztcbmNvbnN0IHByaXZhdGVLZXkgPSBwcm9jZXNzLmVudi5FVEhfUFJJVkFURV9LRVk7IC8vIHRoaXMgaXMgbXkgcHJpdmF0ZSBrZXlcbmNvbnN0IGluZnVyYVVybCA9IHByb2Nlc3MuZW52LklORlVSTkFfVVJMO1xuXG5jb25zdCBjb250cmFjdEFkZHJlc3MgPSBwcm9jZXNzLmVudi5TT0xfQ09OVFJBTkNUX0FERFJFU1M7IC8vIGNoYW5nZSBhZnRlciBkZXBsb3lpbmcgbmV3IGNvbnRyYWN0IHZlcnNpb25cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gb3BlblZlcmlmaWNhdGlvbkV0aEZ1bmN0aW9uKGFkciwgbmFtZSkge1xuXG4gICAgLy8gc2V0IHVwIGNvbnRyYWN0IGFuZCBzaWduaW5nIGtleVxuICAgIGNvbnNvbGUubG9nKCBcIlxcdTAwMWJbMTszMm0gW0V0aGVyZXVtXSBcXHUwMDFiWzBtIFNldHRpbmcgdXAgY29udHJhY3QgYW5kIHNpZ25pbmcga2V5Li4uXCIgKTtcblxuICAgIGNvbnN0IHdlYjMgPSBuZXcgV2ViMyhpbmZ1cmFVcmwpO1xuICAgIGNvbnN0IG15Q29udHJhY3QgPSBuZXcgd2ViMy5ldGguQ29udHJhY3QoXG4gICAgICBKU09OLnBhcnNlKE15Q29udHJhY3QuaW50ZXJmYWNlKSxcbiAgICAgIGNvbnRyYWN0QWRkcmVzc1xuICAgICk7XG4gICAgd2ViMy5ldGguYWNjb3VudHMud2FsbGV0LmFkZChwcml2YXRlS2V5KTtcbiAgXG4gICAgLy8gc2V0IHVwIGluZm8gZm9yIHRyYW5zYWN0aW9uXG4gICAgLy8gdGFrZSBzZXNzaW9uIGlkIGFuZCBzZWVkIHJhbmRvbSBudW0gZ2VuZXJhdG9yIHdpdGggaXQgc28gW2lkXS5qcyB3aWxsIGJlIGFibGUgdG8gZ2V0IHNhbWUgbnVtXG4gICAgLy8gZ2V0IHJhbmRvbSBudW1cbiAgICAvLyBnZXQgTWltYyBoYXNoIG9mIHRoaXMgbnVtICh0aGlzIGlzIHRoZSB2YWx1ZSB3ZSB3aWxsIGNsYWltIHdlIGtub3cgdGhlIHByZSBpbWFnZSBvZilcbiAgICAvLyBjb252ZXJ0IE1pbWMgaGFzaCB0byBoZXggYW5kIHN0b3JlIHRoaXMgdmFsIGluIGNvbnRyYWN0XG4gICAgLy8gdGhpcyBoZXggdmFsdWUgd2lsbCBiZSB0aGUgbGFzdCBpbnB1dCBvZiB6a3BcbiAgXG4gICAgY29uc29sZS5sb2coIFwiXFx1MDAxYlsxOzMybSBbRXRoZXJldW1dIFxcdTAwMWJbMG0gU2V0dGluZyB1cCBkYXRhIGZvciB0cmFuc2FjdGlvbi4uLlwiICk7XG5cbiAgXG4gICAgLy8gc2V0IHVwIHRyYW5zYWN0aW9uXG4gICAgY29uc3QgdHggPSBteUNvbnRyYWN0Lm1ldGhvZHMuYWRkT3BlblZlcmlmaWNhdGlvbihhZHIsIG5hbWUpO1xuICAgIGNvbnN0IGdhcyA9IGF3YWl0IHR4LmVzdGltYXRlR2FzKHtmcm9tOiBhZGRyZXNzfSk7XG4gICAgY29uc3QgZ2FzUHJpY2UgPSBhd2FpdCB3ZWIzLmV0aC5nZXRHYXNQcmljZSgpO1xuICAgIGNvbnN0IGRhdGEgPSB0eC5lbmNvZGVBQkkoKTtcbiAgICBjb25zdCBub25jZSA9IGF3YWl0IHdlYjMuZXRoLmdldFRyYW5zYWN0aW9uQ291bnQoYWRkcmVzcyk7XG4gICAgY29uc3QgdHhEYXRhID0ge1xuICAgICAgZnJvbTogYWRkcmVzcyxcbiAgICAgIHRvOiBteUNvbnRyYWN0Lm9wdGlvbnMuYWRkcmVzcyxcbiAgICAgIGRhdGE6IGRhdGEsXG4gICAgICBnYXM6IGdhcyxcbiAgICAgIGdhc1ByaWNlOiBnYXNQcmljZSxcbiAgICAgIG5vbmNlOiBub25jZSwgXG4gICAgICBjaGFpbjogJ3JpbmtlYnknLCBcbiAgICAgIGhhcmRmb3JrOiAnaXN0YW5idWwnXG4gICAgfTtcbiAgICBcbiAgICAvLyBzZW5kIHRyYW5zYWN0aW9uXG4gICAgY29uc29sZS5sb2coYFxcdTAwMWJbMTszMm0gW0V0aGVyZXVtXSBcXHUwMDFiWzBtIFdhaXRpbmcgZm9yIHRyYW5zYWN0aW9uLi4uYCk7XG4gICAgY29uc3QgcmVjZWlwdCA9IGF3YWl0IHdlYjMuZXRoLnNlbmRUcmFuc2FjdGlvbih0eERhdGEpO1xuICBcbiAgICAvLyBjb25zb2xlLmxvZyhgXFx1MDAxYlsxOzMybSBbRXRoZXJldW1dIFxcdTAwMWJbMG0gVHJhbnNhY3Rpb24gaGFzaDogJHtyZWNlaXB0LnRyYW5zYWN0aW9uSGFzaH1gKTtcbiAgICBjb25zb2xlLmxvZyhgXFx1MDAxYlsxOzMybSBbRXRoZXJldW1dIFxcdTAwMWJbMG0gVHJhbnNhY3Rpb24gc3VjY2Vzc2Z1bGApO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./backend/ethOpenVerification.js\n");

/***/ }),

/***/ "./backend/mongo.js":
/*!**************************!*\
  !*** ./backend/mongo.js ***!
  \**************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ searchDatabase; }\n/* harmony export */ });\nconst {\n  MongoClient\n} = __webpack_require__(/*! mongodb */ \"mongodb\");\n\nconst consoleString = \"\\u001b[1;32m [Database] \\u001b[0m \";\nasync function searchDatabase(hashVal) {\n  const uri = \"mongodb+srv://nhacker:nhacker12.@cluster0.eubpg.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n  const client = new MongoClient(uri);\n\n  try {\n    await client.connect();\n    const res = await verifyUser(client, {\n      name: hashVal\n    });\n    return res;\n  } catch (e) {\n    console.error(e);\n  } finally {\n    await client.close();\n  }\n}\n\nasync function verifyUser(client, potentialUser) {\n  const alreadyExists = await findOneListingByName(client, potentialUser.name);\n\n  if (alreadyExists) {\n    console.log(`${consoleString} User already exists`);\n    return false;\n  } else {\n    console.log(`${consoleString} User not in system, adding them now...`);\n    await createListing(client, potentialUser);\n    console.log(`${consoleString} Added user`);\n    return true;\n  }\n}\n\nasync function findOneListingByName(client, nameOfUser) {\n  const result = await client.db(\"id_verification\").collection(\"verified_users\").findOne({\n    name: nameOfUser\n  });\n  console.log(`${consoleString} Checking if user is already in system...`);\n\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nasync function createListing(client, new_user) {\n  const result = await client.db(\"id_verification\").collection(\"verified_users\").insertOne(new_user);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vc3Ryb21faWQvLi9iYWNrZW5kL21vbmdvLmpzP2JkZGMiXSwibmFtZXMiOlsiTW9uZ29DbGllbnQiLCJyZXF1aXJlIiwiY29uc29sZVN0cmluZyIsInNlYXJjaERhdGFiYXNlIiwiaGFzaFZhbCIsInVyaSIsInByb2Nlc3MiLCJjbGllbnQiLCJjb25uZWN0IiwicmVzIiwidmVyaWZ5VXNlciIsIm5hbWUiLCJlIiwiY29uc29sZSIsImVycm9yIiwiY2xvc2UiLCJwb3RlbnRpYWxVc2VyIiwiYWxyZWFkeUV4aXN0cyIsImZpbmRPbmVMaXN0aW5nQnlOYW1lIiwibG9nIiwiY3JlYXRlTGlzdGluZyIsIm5hbWVPZlVzZXIiLCJyZXN1bHQiLCJkYiIsImNvbGxlY3Rpb24iLCJmaW5kT25lIiwibmV3X3VzZXIiLCJpbnNlcnRPbmUiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNO0FBQUNBO0FBQUQsSUFBaUJDLG1CQUFPLENBQUMsd0JBQUQsQ0FBOUI7O0FBQ0EsTUFBTUMsYUFBYSxHQUFHLG9DQUF0QjtBQUVlLGVBQWVDLGNBQWYsQ0FBOEJDLE9BQTlCLEVBQXVDO0FBRWxELFFBQU1DLEdBQUcsR0FBR0MseUdBQVo7QUFFQSxRQUFNQyxNQUFNLEdBQUcsSUFBSVAsV0FBSixDQUFnQkssR0FBaEIsQ0FBZjs7QUFFQSxNQUFJO0FBQ0EsVUFBTUUsTUFBTSxDQUFDQyxPQUFQLEVBQU47QUFFQSxVQUFNQyxHQUFHLEdBQUcsTUFBTUMsVUFBVSxDQUFDSCxNQUFELEVBQVE7QUFDaENJLFVBQUksRUFBRVA7QUFEMEIsS0FBUixDQUE1QjtBQUlBLFdBQU9LLEdBQVA7QUFFSCxHQVRELENBU0UsT0FBT0csQ0FBUCxFQUFVO0FBQ1JDLFdBQU8sQ0FBQ0MsS0FBUixDQUFjRixDQUFkO0FBQ0gsR0FYRCxTQVdVO0FBQ04sVUFBTUwsTUFBTSxDQUFDUSxLQUFQLEVBQU47QUFDSDtBQUVKOztBQUlELGVBQWVMLFVBQWYsQ0FBMEJILE1BQTFCLEVBQWtDUyxhQUFsQyxFQUFpRDtBQUM3QyxRQUFNQyxhQUFhLEdBQUcsTUFBTUMsb0JBQW9CLENBQUNYLE1BQUQsRUFBU1MsYUFBYSxDQUFDTCxJQUF2QixDQUFoRDs7QUFDQSxNQUFJTSxhQUFKLEVBQW1CO0FBQ2ZKLFdBQU8sQ0FBQ00sR0FBUixDQUFhLEdBQUVqQixhQUFjLHNCQUE3QjtBQUNBLFdBQU8sS0FBUDtBQUNILEdBSEQsTUFHTztBQUNIVyxXQUFPLENBQUNNLEdBQVIsQ0FBYSxHQUFFakIsYUFBYyx5Q0FBN0I7QUFDQSxVQUFNa0IsYUFBYSxDQUFDYixNQUFELEVBQVNTLGFBQVQsQ0FBbkI7QUFDQUgsV0FBTyxDQUFDTSxHQUFSLENBQWEsR0FBRWpCLGFBQWMsYUFBN0I7QUFDQSxXQUFPLElBQVA7QUFDSDtBQUVKOztBQUVELGVBQWVnQixvQkFBZixDQUFvQ1gsTUFBcEMsRUFBNENjLFVBQTVDLEVBQXdEO0FBQ3BELFFBQU1DLE1BQU0sR0FBRyxNQUFNZixNQUFNLENBQUNnQixFQUFQLENBQVUsaUJBQVYsRUFBNkJDLFVBQTdCLENBQXdDLGdCQUF4QyxFQUEwREMsT0FBMUQsQ0FBa0U7QUFBQ2QsUUFBSSxFQUFFVTtBQUFQLEdBQWxFLENBQXJCO0FBQ0FSLFNBQU8sQ0FBQ00sR0FBUixDQUFhLEdBQUVqQixhQUFjLDJDQUE3Qjs7QUFDQSxNQUFHb0IsTUFBSCxFQUFXO0FBQ1AsV0FBTyxJQUFQO0FBQ0gsR0FGRCxNQUVPO0FBQ0gsV0FBTyxLQUFQO0FBQ0g7QUFDSjs7QUFFRCxlQUFlRixhQUFmLENBQTZCYixNQUE3QixFQUFxQ21CLFFBQXJDLEVBQStDO0FBQzVDLFFBQU1KLE1BQU0sR0FBRyxNQUFNZixNQUFNLENBQUNnQixFQUFQLENBQVUsaUJBQVYsRUFBNkJDLFVBQTdCLENBQXdDLGdCQUF4QyxFQUEwREcsU0FBMUQsQ0FBb0VELFFBQXBFLENBQXJCO0FBQ0YiLCJmaWxlIjoiLi9iYWNrZW5kL21vbmdvLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge01vbmdvQ2xpZW50IH0gPSByZXF1aXJlKCdtb25nb2RiJyk7XG5jb25zdCBjb25zb2xlU3RyaW5nID0gXCJcXHUwMDFiWzE7MzJtIFtEYXRhYmFzZV0gXFx1MDAxYlswbSBcIjtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gc2VhcmNoRGF0YWJhc2UoaGFzaFZhbCkge1xuXG4gICAgY29uc3QgdXJpID0gcHJvY2Vzcy5lbnYuTU9OR09EQl9VUkk7XG5cbiAgICBjb25zdCBjbGllbnQgPSBuZXcgTW9uZ29DbGllbnQodXJpKTtcblxuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGNsaWVudC5jb25uZWN0KCk7XG5cbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdmVyaWZ5VXNlcihjbGllbnQse1xuICAgICAgICAgICAgbmFtZTogaGFzaFZhbCxcbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gcmVzXG5cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgYXdhaXQgY2xpZW50LmNsb3NlKClcbiAgICB9XG5cbn1cblxuXG5cbmFzeW5jIGZ1bmN0aW9uIHZlcmlmeVVzZXIoY2xpZW50LCBwb3RlbnRpYWxVc2VyKSB7XG4gICAgY29uc3QgYWxyZWFkeUV4aXN0cyA9IGF3YWl0IGZpbmRPbmVMaXN0aW5nQnlOYW1lKGNsaWVudCwgcG90ZW50aWFsVXNlci5uYW1lICk7XG4gICAgaWYgKGFscmVhZHlFeGlzdHMpIHtcbiAgICAgICAgY29uc29sZS5sb2coYCR7Y29uc29sZVN0cmluZ30gVXNlciBhbHJlYWR5IGV4aXN0c2ApXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGAke2NvbnNvbGVTdHJpbmd9IFVzZXIgbm90IGluIHN5c3RlbSwgYWRkaW5nIHRoZW0gbm93Li4uYClcbiAgICAgICAgYXdhaXQgY3JlYXRlTGlzdGluZyhjbGllbnQsIHBvdGVudGlhbFVzZXIpXG4gICAgICAgIGNvbnNvbGUubG9nKGAke2NvbnNvbGVTdHJpbmd9IEFkZGVkIHVzZXJgKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxufVxuXG5hc3luYyBmdW5jdGlvbiBmaW5kT25lTGlzdGluZ0J5TmFtZShjbGllbnQsIG5hbWVPZlVzZXIpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjbGllbnQuZGIoXCJpZF92ZXJpZmljYXRpb25cIikuY29sbGVjdGlvbihcInZlcmlmaWVkX3VzZXJzXCIpLmZpbmRPbmUoe25hbWU6IG5hbWVPZlVzZXJ9KTtcbiAgICBjb25zb2xlLmxvZyhgJHtjb25zb2xlU3RyaW5nfSBDaGVja2luZyBpZiB1c2VyIGlzIGFscmVhZHkgaW4gc3lzdGVtLi4uYClcbiAgICBpZihyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlTGlzdGluZyhjbGllbnQsIG5ld191c2VyKSB7XG4gICBjb25zdCByZXN1bHQgPSBhd2FpdCBjbGllbnQuZGIoXCJpZF92ZXJpZmljYXRpb25cIikuY29sbGVjdGlvbihcInZlcmlmaWVkX3VzZXJzXCIpLmluc2VydE9uZShuZXdfdXNlcik7XG59XG5cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./backend/mongo.js\n");

/***/ }),

/***/ "./pages/api/stripe_hook.js":
/*!**********************************!*\
  !*** ./pages/api/stripe_hook.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-sha256 */ \"js-sha256\");\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_sha256__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _backend_ethBackend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../backend/ethBackend */ \"./backend/ethBackend.js\");\n/* harmony import */ var _backend_ethOpenVerification__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../backend/ethOpenVerification */ \"./backend/ethOpenVerification.js\");\n/* harmony import */ var _backend_mongo_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../backend/mongo.js */ \"./backend/mongo.js\");\n\n\n\n\n\nconst stripe = __webpack_require__(/*! stripe */ \"stripe\")(\"rk_test_51J305OC6YuwVjGqqJ6Sj41vN15r5vfTbCiHd1slfDzXLSgdyjLxofs7oqGCBrWRlVXxpfbpIxHd3hmhmTlbWwGNx00UU16Rwo4\");\n\nconst stripeSecret = __webpack_require__(/*! stripe */ \"stripe\")(\"sk_test_51J305OC6YuwVjGqqdtMScisG2JWYy339dNtTGf7QE44BdrPbWPqeMKd5WF1nfpnKYhAmbh8GGQbiaolofct52IgZ003WkhWzMr\");\n\nconst handler = async (req, res) => {\n  //todo: check stripe signing key\n  if (req.method === \"POST\") {\n    const event = req.body; // need to verifiy that event came from stripe \n    // https://stripe.com/docs/identity/handle-verification-outcomes\n    // Handle the event\n\n    switch (event.type) {\n      case 'identity.verification_session.verified':\n        {\n          // All the verification checks passed\n          const verificationSession = event.data.object;\n          await handleSuccessfulVerification(verificationSession);\n          break;\n        }\n\n      default:\n        // Unexpected event type\n        console.log(`❌ Unhandled event type ${event.type}.`);\n    } // Return a 200 response to acknowledge receipt of the event\n\n\n    res.send(); // res.status(200).json({ })\n  } else {\n    res.setHeader(\"Allow\", \"POST\");\n    res.status(405).end(\"Method Not Allowed\");\n  }\n};\n\nconst handleSuccessfulVerification = async verificationSession => {\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m Identity verification session verified\");\n  const verificationType = verificationSession.metadata.verificationType;\n  const adr = verificationSession.metadata.address;\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m MetaData-verificationType: \", verificationType);\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m MetaData-address: \", adr); // get verified outputs to check database\n\n  const verifiedOutputs = await stripe.identity.verificationSessions.retrieve(verificationSession.id, {\n    expand: ['verified_outputs', 'verified_outputs.dob']\n  });\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m Hashing user details...\");\n  const hash = makeHashOfDetails(verifiedOutputs);\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m Hash made: \", hash); // ----------------------------------------------------------------------------            \n  // ------------------------------search database-------------------------------\n  // ----------------------------------------------------------------------------            \n\n  const res = await (0,_backend_mongo_js__WEBPACK_IMPORTED_MODULE_3__.default)(hash).catch(console.error);\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m result of database check: \", res); // if user exists already don't send transaction\n\n  if (res == false) {\n    await stripeSecret.identity.verificationSessions.update(verificationSession.id, {\n      metadata: {\n        passedDatabaseCheck: false\n      }\n    });\n    return false;\n  } // ----------------------------------------------------------------------------            \n  // ------------------------------anonymous flow-------------------------------\n  // ----------------------------------------------------------------------------            \n\n\n  if (verificationType == \"anonymous\") {\n    console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m In ANONYMOUS flow: \");\n    const anonymousRes = await (0,_backend_ethBackend__WEBPACK_IMPORTED_MODULE_1__.EthereumStuff)(verificationSession.id);\n    await stripeSecret.identity.verificationSessions.update(verificationSession.id, {\n      metadata: {\n        passedDatabaseCheck: true\n      }\n    });\n  } // ----------------------------------------------------------------------------            \n  // ---------------------------------open flow----------------------------------\n  // ----------------------------------------------------------------------------      \n\n\n  if (verificationType == \"open\") {\n    console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m In OPEN flow: \");\n    const firstName = verifiedOutputs.verified_outputs.first_name.toString().toLowerCase();\n    const lastName = verifiedOutputs.verified_outputs.last_name.toString().toLowerCase();\n    const name = firstName + \" \" + lastName;\n    const openRes = await (0,_backend_ethOpenVerification__WEBPACK_IMPORTED_MODULE_2__.openVerificationEthFunction)(adr, name);\n    await stripeSecret.identity.verificationSessions.update(verificationSession.id, {\n      metadata: {\n        passedDatabaseCheck: true\n      }\n    });\n  }\n};\n\nconst makeHashOfDetails = verifiedOutputs => {\n  const firstName = verifiedOutputs.verified_outputs.first_name.toString().toLowerCase();\n  const lastName = verifiedOutputs.verified_outputs.last_name.toString().toLowerCase();\n  const dayStr = verifiedOutputs.verified_outputs.dob.day.toString();\n  const monthStr = verifiedOutputs.verified_outputs.dob.month.toString();\n  const yearStr = verifiedOutputs.verified_outputs.dob.year.toString();\n  const combination = firstName + lastName + dayStr + monthStr + yearStr;\n  const hashCombination = (0,js_sha256__WEBPACK_IMPORTED_MODULE_0__.sha256)(combination);\n  return hashCombination;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (handler);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/api/stripe_hook.js\n");

/***/ }),

/***/ "big-integer":
/*!******************************!*\
  !*** external "big-integer" ***!
  \******************************/
/***/ (function(module) {

"use strict";
module.exports = require("big-integer");;

/***/ }),

/***/ "js-sha256":
/*!****************************!*\
  !*** external "js-sha256" ***!
  \****************************/
/***/ (function(module) {

"use strict";
module.exports = require("js-sha256");;

/***/ }),

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ (function(module) {

"use strict";
module.exports = require("mongodb");;

/***/ }),

/***/ "seedrandom":
/*!*****************************!*\
  !*** external "seedrandom" ***!
  \*****************************/
/***/ (function(module) {

"use strict";
module.exports = require("seedrandom");;

/***/ }),

/***/ "stripe":
/*!*************************!*\
  !*** external "stripe" ***!
  \*************************/
/***/ (function(module) {

"use strict";
module.exports = require("stripe");;

/***/ }),

/***/ "truffle-hdwallet-provider":
/*!********************************************!*\
  !*** external "truffle-hdwallet-provider" ***!
  \********************************************/
/***/ (function(module) {

"use strict";
module.exports = require("truffle-hdwallet-provider");;

/***/ }),

/***/ "web3":
/*!***********************!*\
  !*** external "web3" ***!
  \***********************/
/***/ (function(module) {

"use strict";
module.exports = require("web3");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
var __webpack_exports__ = __webpack_require__.X(0, ["ethereum_build_IdVerification_json","public_mimc_ts"], function() { return __webpack_exec__("./pages/api/stripe_hook.js"); });
module.exports = __webpack_exports__;

})();