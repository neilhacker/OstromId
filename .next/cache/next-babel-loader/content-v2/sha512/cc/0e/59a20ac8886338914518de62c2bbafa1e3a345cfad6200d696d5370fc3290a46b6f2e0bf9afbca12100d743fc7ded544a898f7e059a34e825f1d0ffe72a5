{"ast":null,"code":"import mimc from '../public/mimc.ts';\nimport searchDatabase from './mongo.js';\n\nconst Web3 = require('web3');\n\nconst Provider = require('truffle-hdwallet-provider');\n\nconst MyContract = require('../ethereum/build/IdVerification.json');\n\nconst seedrandom = require('seedrandom');\n\nconst address = \"0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A\";\nconst privateKey = \"7a5e5b16d286a451082ee017f08410fae2c0062e4c7faa45f5beafc64df90664\"; // this is my private key\n\nconst infuraUrl = \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\";\nconst contractAddress = \"0x7FDf252f67613bBDd449476E2E4E31FB1be9023c\"; // change after deploying new contract version\n\nexport async function EthereumStuff(id) {\n  // set up contract and signing key\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m Setting up contract and signing key...\");\n  const web3 = new Web3(infuraUrl);\n  const myContract = new web3.eth.Contract(JSON.parse(MyContract.interface), contractAddress);\n  web3.eth.accounts.wallet.add(privateKey); // set up info for transaction\n  // take session id and seed random num generator with it so [id].js will be able to get same num\n  // get random num\n  // get Mimc hash of this num (this is the value we will claim we know the pre image of)\n  // convert Mimc hash to hex and store this val in contract\n  // this hex value will be the last input of zkp\n\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m Setting up data for transaction...\");\n  var seededHash = seedrandom(id);\n  const randSeededNum = seededHash() * 1000000000000000000;\n  const mimcVal = mimc(randSeededNum);\n  var hexVal = mimcVal.toString(16);\n  hexVal = `0x${hexVal}`; // turn it into right format for contract\n\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m randSeededNum\", randSeededNum);\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m mimc val\", mimcVal.toString());\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m hexVal \", hexVal); // set up transaction\n\n  const tx = myContract.methods.addNewHash(hexVal);\n  const gas = await tx.estimateGas({\n    from: address\n  });\n  const gasPrice = await web3.eth.getGasPrice();\n  const data = tx.encodeABI();\n  const nonce = await web3.eth.getTransactionCount(address);\n  const txData = {\n    from: address,\n    to: myContract.options.address,\n    data: data,\n    gas: gas,\n    gasPrice: gasPrice,\n    nonce: nonce,\n    chain: 'rinkeby',\n    hardfork: 'istanbul'\n  }; // send transaction\n\n  console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Waiting for transaction...`);\n  const receipt = await web3.eth.sendTransaction(txData); // console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Transaction hash: ${receipt.transactionHash}`);\n\n  console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Transaction successful`);\n  return true;\n}","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/backend/ethBackend.js"],"names":["mimc","searchDatabase","Web3","require","Provider","MyContract","seedrandom","address","privateKey","infuraUrl","contractAddress","EthereumStuff","id","console","log","web3","myContract","eth","Contract","JSON","parse","interface","accounts","wallet","add","seededHash","randSeededNum","mimcVal","hexVal","toString","tx","methods","addNewHash","gas","estimateGas","from","gasPrice","getGasPrice","data","encodeABI","nonce","getTransactionCount","txData","to","options","chain","hardfork","receipt","sendTransaction"],"mappings":"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","sourcesContent":["import mimc from '../public/mimc.ts';\nimport searchDatabase from './mongo.js'\n\nconst Web3 = require('web3');\nconst Provider = require('truffle-hdwallet-provider');\nconst MyContract = require('../ethereum/build/IdVerification.json');\nconst seedrandom = require('seedrandom');\n\nconst address = \"0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A\";\nconst privateKey = \"7a5e5b16d286a451082ee017f08410fae2c0062e4c7faa45f5beafc64df90664\"; // this is my private key\nconst infuraUrl = \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\";\n\nconst contractAddress = \"0x7FDf252f67613bBDd449476E2E4E31FB1be9023c\"; // change after deploying new contract version\n\n\nexport async function EthereumStuff(id) {\n\n    // set up contract and signing key\n    console.log( \"\\u001b[1;32m [Ethereum] \\u001b[0m Setting up contract and signing key...\" );\n\n    const web3 = new Web3(infuraUrl);\n    const myContract = new web3.eth.Contract(\n      JSON.parse(MyContract.interface),\n      contractAddress\n    );\n    web3.eth.accounts.wallet.add(privateKey);\n  \n    // set up info for transaction\n    // take session id and seed random num generator with it so [id].js will be able to get same num\n    // get random num\n    // get Mimc hash of this num (this is the value we will claim we know the pre image of)\n    // convert Mimc hash to hex and store this val in contract\n    // this hex value will be the last input of zkp\n  \n    console.log( \"\\u001b[1;32m [Ethereum] \\u001b[0m Setting up data for transaction...\" );\n\n    var seededHash = seedrandom(id);\n    const randSeededNum = seededHash() * 1000000000000000000;\n    const mimcVal = mimc(randSeededNum)\n    var hexVal = mimcVal.toString(16);\n    hexVal = `0x${hexVal}` // turn it into right format for contract\n\n    console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m randSeededNum\", randSeededNum)\n    console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m mimc val\", mimcVal.toString())\n    console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m hexVal \", hexVal)\n  \n    // set up transaction\n    const tx = myContract.methods.addNewHash(hexVal);\n    const gas = await tx.estimateGas({from: address});\n    const gasPrice = await web3.eth.getGasPrice();\n    const data = tx.encodeABI();\n    const nonce = await web3.eth.getTransactionCount(address);\n    const txData = {\n      from: address,\n      to: myContract.options.address,\n      data: data,\n      gas: gas,\n      gasPrice: gasPrice,\n      nonce: nonce, \n      chain: 'rinkeby', \n      hardfork: 'istanbul'\n    };\n    \n    // send transaction\n    console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Waiting for transaction...`);\n    const receipt = await web3.eth.sendTransaction(txData);\n  \n    // console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Transaction hash: ${receipt.transactionHash}`);\n    console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Transaction successful`);\n\n    return true;\n  }\n\n"]},"metadata":{},"sourceType":"module"}