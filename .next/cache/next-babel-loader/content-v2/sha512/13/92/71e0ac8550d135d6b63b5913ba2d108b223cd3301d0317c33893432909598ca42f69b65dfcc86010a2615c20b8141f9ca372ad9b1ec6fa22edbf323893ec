{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/pages/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Message, Button, Input, Loader, Grid } from \"semantic-ui-react\";\nimport { Router } from '../routes';\nimport Layout from \"../components/Layout\";\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nimport AccountMessage from \"../components/Accounts\";\nimport factory from \"../ethereum/verification\";\nimport Web3 from \"web3\"; // use this to have connect account button\n\nvar web3;\nimport mimc from '../public/mimc.ts';\nimport { calculateProof } from '../public/prover.js';\nimport { loadStripe } from '@stripe/stripe-js';\nvar stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n\nvar CampaignIndex = /*#__PURE__*/function (_Component) {\n  _inherits(CampaignIndex, _Component);\n\n  var _super = _createSuper(CampaignIndex);\n\n  function CampaignIndex() {\n    var _this;\n\n    _classCallCheck(this, CampaignIndex);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      errorMessage: '',\n      errorTrue: false,\n      verification_status: \"Not started\",\n      loaderActive: false,\n      // eth\n      accountAlreadyVerified: false,\n      account: \"No account\",\n      network: \"No network\",\n      accountDetailsRetrieved: false,\n      // stripe\n      clientSecret: null,\n      stripe: null,\n      verification_session_id: null,\n      sessionIdRandNum: null,\n      sessionIdMimcNum: null,\n      //deposit\n      depositAlreadyPaid: false,\n      depositStatus: null,\n      //login\n      loginDetailsRecieved: false,\n      //zkp\n      mimcHashNumState: null,\n      solidityVerifierProof: null,\n      zkResult: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var metaMaskPresent, alreadyVerified, paidDeposit;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.connectMetaMaskAccountInitialCheck();\n\n            case 2:\n              metaMaskPresent = _context.sent;\n\n              if (metaMaskPresent) {\n                _context.next = 5;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 5:\n              _context.next = 7;\n              return _this.checkIfAccountVerified();\n\n            case 7:\n              alreadyVerified = _context.sent;\n              _context.next = 10;\n              return _this.checkDepositPaid();\n\n            case 10:\n              paidDeposit = _context.sent;\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"resetError\", function () {\n      _this.setState({\n        errorTrue: false,\n        errorMessage: \"\"\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"connectMetaMaskAccountInitialCheck\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var address, network, net, provider;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(true && typeof window.ethereum !== \"undefined\")) {\n                _context2.next = 17;\n                break;\n              }\n\n              // We are in the browser and metamask is running.\n              web3 = new Web3(window.ethereum);\n              _context2.next = 4;\n              return ethereum.selectedAddress;\n\n            case 4:\n              address = _context2.sent;\n              network = ethereum.networkVersion;\n              console.log(\"account\", address);\n              console.log(\"network\", network);\n              net = _this.networkIntToName(network);\n\n              _this.setState({\n                network: net,\n                account: address\n              });\n\n              if (!(address != null)) {\n                _context2.next = 14;\n                break;\n              }\n\n              console.log(\"setting retireved\");\n\n              _this.setState({\n                accountDetailsRetrieved: true\n              });\n\n              return _context2.abrupt(\"return\", true);\n\n            case 14:\n              return _context2.abrupt(\"return\", false);\n\n            case 17:\n              // We are on the server *OR* the user is not running metamask\n              provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\");\n              return _context2.abrupt(\"return\", false);\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"connectMetaMaskAccount\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var address, network, net, provider;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(true && typeof window.ethereum !== \"undefined\")) {\n                _context3.next = 20;\n                break;\n              }\n\n              _context3.next = 3;\n              return window.ethereum.request({\n                method: \"eth_requestAccounts\"\n              });\n\n            case 3:\n              web3 = new Web3(window.ethereum);\n              _context3.next = 6;\n              return ethereum.selectedAddress;\n\n            case 6:\n              address = _context3.sent;\n              network = ethereum.networkVersion;\n              console.log(\"account\", address);\n              console.log(\"network\", network);\n              net = _this.networkIntToName(network);\n\n              _this.setState({\n                network: net,\n                account: address\n              });\n\n              if (!(address != null)) {\n                _context3.next = 18;\n                break;\n              }\n\n              _this.setState({\n                accountDetailsRetrieved: true\n              });\n\n              _context3.next = 16;\n              return _this.checkIfAccountVerified();\n\n            case 16:\n              _context3.next = 18;\n              return _this.checkDepositPaid();\n\n            case 18:\n              _context3.next = 21;\n              break;\n\n            case 20:\n              // We are on the server *OR* the user is not running metamask\n              provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\");\n\n            case 21:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"networkIntToName\", function (networkId) {\n      switch (networkId) {\n        case \"1\":\n          return \"Main\";\n\n        case \"3\":\n          return \"Ropsten\";\n\n        case \"4\":\n          return \"Rinkeby\";\n\n        case \"42\":\n          return \"Kovan\";\n\n        case \"5\":\n          return \"Goerli\";\n\n        default:\n          return \"Custom\";\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkIfAccountVerified\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var accounts, res;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context4.sent;\n              _context4.next = 6;\n              return factory.methods.checkIfAddressVerified().call({\n                from: accounts[0]\n              });\n\n            case 6:\n              res = _context4.sent;\n\n              _this.setState({\n                accountAlreadyVerified: res\n              });\n\n              return _context4.abrupt(\"return\", true);\n\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.log(\"MetMask aerror\");\n\n              _this.setState({\n                errorMessage: \"It looks like you may be on the wrong MetaMask network\",\n                errorTrue: true\n              });\n\n              return _context4.abrupt(\"return\", false);\n\n            case 16:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 11]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"checkDepositPaid\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var accounts, res;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context5.sent;\n              _context5.next = 6;\n              return factory.methods.checkIfDepositPaid().call({\n                from: accounts[0]\n              });\n\n            case 6:\n              res = _context5.sent;\n\n              // this should be uncommented eventually as it will block the verifcation button if no deposit is paid\n              _this.setState({\n                depositAlreadyPaid: res\n              });\n\n              if (res) {\n                _this.setState({\n                  depositStatus: \"Paid\"\n                });\n              } else {\n                _this.setState({\n                  depositStatus: \"Not paid\"\n                });\n              }\n\n              return _context5.abrupt(\"return\", res);\n\n            case 12:\n              _context5.prev = 12;\n              _context5.t0 = _context5[\"catch\"](0);\n              console.log(\"error when initially checking account\");\n\n              _this.setState({\n                errorMessage: \"It looks like there was an error checking if you had paid the deposit\",\n                errorTrue: true\n              });\n\n              return _context5.abrupt(\"return\", false);\n\n            case 17:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[0, 12]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"sendDeposit\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var accounts, res;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _this.setState({\n                loaderActive: true\n              });\n\n              _context6.prev = 1;\n\n              _this.setState({\n                depositStatus: \"Sending deposit...\"\n              });\n\n              _context6.next = 5;\n              return web3.eth.getAccounts();\n\n            case 5:\n              accounts = _context6.sent;\n              _context6.next = 8;\n              return factory.methods.payDeposit().send({\n                from: accounts[0],\n                value: 20 // 20 wei deposit\n\n              });\n\n            case 8:\n              _context6.next = 10;\n              return factory.methods.checkIfDepositPaid().call({\n                from: accounts[0]\n              });\n\n            case 10:\n              res = _context6.sent;\n\n              if (res) {\n                _this.setState({\n                  depositAlreadyPaid: res,\n                  depositStatus: \"Paid\"\n                });\n              }\n\n              _context6.next = 18;\n              break;\n\n            case 14:\n              _context6.prev = 14;\n              _context6.t0 = _context6[\"catch\"](1);\n              console.log(\"error in submit sol proof\");\n\n              _this.setState({\n                errorMessage: _context6.t0.message,\n                errorTrue: true\n              });\n\n            case 18:\n              _this.setState({\n                loaderActive: false\n              });\n\n            case 19:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[1, 14]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"createNewStripeSession\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var accounts, requestOptions, response, data;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context7.sent;\n\n              _this.setState({\n                verification_status: \"server checking deposit payment\"\n              });\n\n              requestOptions = {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  title: 'POST of metamask address',\n                  address: accounts[0]\n                })\n              };\n              _context7.next = 8;\n              return fetch('/api/create-verification-session', requestOptions);\n\n            case 8:\n              response = _context7.sent;\n              _context7.next = 11;\n              return response.json();\n\n            case 11:\n              data = _context7.sent;\n\n              _this.setState({\n                clientSecret: data.clientSecret,\n                verification_session_id: data.id\n              }); // fetch('/api/create-verification-session')\n              // .then(res => res.json())\n              // .then(data => this.setState({clientSecret: data.clientSecret, verification_session_id: data.id}))\n\n\n              _context7.t0 = _this;\n              _context7.next = 16;\n              return stripePromise;\n\n            case 16:\n              _context7.t1 = _context7.sent;\n              _context7.t2 = {\n                stripe: _context7.t1\n              };\n\n              _context7.t0.setState.call(_context7.t0, _context7.t2);\n\n              _context7.next = 26;\n              break;\n\n            case 21:\n              _context7.prev = 21;\n              _context7.t3 = _context7[\"catch\"](0);\n              console.log(\"error when trying to create new verification session\");\n\n              _this.setState({\n                errorMessage: \"It looks like there was an issue creating a new verification session\",\n                errorTrue: true\n              });\n\n              return _context7.abrupt(\"return\", false);\n\n            case 26:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, null, [[0, 21]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"verifyIdentity\", /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(event) {\n        var _this$state, stripe, clientSecret, _yield$stripe$verifyI, error;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                event.preventDefault();\n\n                _this.resetError();\n\n                _this.setState({\n                  loaderActive: true\n                }); // creating new stripe session on button click\n\n\n                _context8.next = 5;\n                return _this.createNewStripeSession();\n\n              case 5:\n                _this$state = _this.state, stripe = _this$state.stripe, clientSecret = _this$state.clientSecret;\n\n                if (!(!stripe || !clientSecret)) {\n                  _context8.next = 9;\n                  break;\n                }\n\n                _this.setState({\n                  loaderActive: false,\n                  errorTrue: true,\n                  errorMessage: \"Stripe not connecting\"\n                });\n\n                return _context8.abrupt(\"return\");\n\n              case 9:\n                _context8.next = 11;\n                return stripe.verifyIdentity(clientSecret);\n\n              case 11:\n                _yield$stripe$verifyI = _context8.sent;\n                error = _yield$stripe$verifyI.error;\n\n                if (error) {\n                  console.log('[error]', error);\n                } else {\n                  console.log('Verification submitted!');\n\n                  _this.pollForStatus();\n                }\n\n              case 14:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      return function (_x) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"pollForStatus\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (_this.state.verification_status !== \"passed_database_check\" && _this.state.verification_status !== \"failed_database_check\") {\n                setTimeout(_this.pollForStatus, 5000);\n\n                _this.fetchStatus();\n              }\n\n              if (_this.state.verification_status !== \"processing\" && _this.state.verification_status !== \"not_submitted\" && _this.state.verification_status !== \"verified_waiting_for_database_check\" && _this.state.verification_status !== \"server checking deposit payment\") {\n                _this.setState({\n                  loaderActive: false\n                });\n\n                if (_this.state.verification_status == \"passed_database_check\") {\n                  _this.setState({\n                    loginDetailsRecieved: true\n                  });\n                }\n              }\n\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchStatus\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              //handle error if session id isn't set\n              fetch('/api/get-verification-session/' + _this.state.verification_session_id).then(function (res) {\n                return res.json();\n              }).then(function (data) {\n                return _this.setState({\n                  verification_status: data.status,\n                  sessionIdRandNum: data.randSeededNum,\n                  sessionIdMimcNum: data.mimcVal\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"mimcHashNum\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n      var preImage1, out;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              preImage1 = document.getElementById('mimc_num').value;\n              console.log(preImage1);\n              out = mimc(preImage1);\n              console.log(out.toString());\n\n              _this.setState({\n                mimcHashNumState: out.toString()\n              });\n\n            case 5:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"verifyPreimage\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n      var preImage, hash, solidityProof;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              preImage = parseInt(document.getElementById('preImageCredential').value);\n              console.log(preImage);\n              hash = document.getElementById('mimcHashCredential').value;\n              console.log(hash);\n              _context12.next = 6;\n              return calculateProof(preImage, hash);\n\n            case 6:\n              solidityProof = _context12.sent;\n\n              _this.setState({\n                solidityVerifierProof: solidityProof\n              });\n\n              console.log(solidityProof);\n\n            case 9:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"submitSolProof\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n      var preImage, hash, solidityProof, fullProof, pi_a, pi_b, pi_c, inputs, accounts, res;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              // event.preventDefault();\n              _this.resetError();\n\n              _this.setState({\n                loaderActive: true\n              }); // CREATING ZKP FROM HASH AND PRE-IMAGE \n\n\n              _this.setState({\n                verification_status: \"Creating ZKP\"\n              });\n\n              preImage = parseInt(document.getElementById('preImageCredential').value);\n              console.log(preImage);\n              hash = document.getElementById('mimcHashCredential').value;\n              console.log(hash);\n              _context13.next = 9;\n              return calculateProof(preImage, hash);\n\n            case 9:\n              solidityProof = _context13.sent;\n              // this.setState({solidityVerifierProof: solidityProof});\n              console.log(solidityProof); // SUBMIT ZKP TO CONTRACT  \n\n              _this.setState({\n                verification_status: \"Starting ETH transaction\"\n              });\n\n              fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n              pi_a = fullProof[0];\n              pi_b = fullProof[1];\n              pi_c = fullProof[2];\n              inputs = fullProof[3]; // send zk proof to verifyHash function\n\n              _context13.prev = 17;\n\n              _this.setState({\n                verification_status: \"Submitting ZKP...\"\n              });\n\n              _context13.next = 21;\n              return web3.eth.getAccounts();\n\n            case 21:\n              accounts = _context13.sent;\n              _context13.next = 24;\n              return factory.methods.verifyHash(pi_a, pi_b, pi_c, inputs).send({\n                from: accounts[0]\n              });\n\n            case 24:\n              console.log(\"submitted zkp successfully\"); // Router.reload(window.location.pathname)\n\n              _context13.next = 27;\n              return factory.methods.checkIfAddressVerified().call({\n                from: accounts[0]\n              });\n\n            case 27:\n              res = _context13.sent;\n\n              _this.setState({\n                zkResult: res.toString()\n              });\n\n              setTimeout(2000); // set state of session status depending on res\n\n              if (res) {\n                _this.setState({\n                  verification_status: \"Address is verified\"\n                });\n              } else {\n                _this.setState({\n                  verification_status: \"Address verification failed\"\n                });\n              }\n\n              _context13.next = 37;\n              break;\n\n            case 33:\n              _context13.prev = 33;\n              _context13.t0 = _context13[\"catch\"](17);\n              console.log(\"error in submit sol proof\");\n\n              _this.setState({\n                errorMessage: _context13.t0.message,\n                errorTrue: true\n              });\n\n            case 37:\n              _this.setState({\n                loaderActive: false\n              });\n\n            case 38:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, null, [[17, 33]]);\n    })));\n\n    return _this;\n  }\n\n  _createClass(CampaignIndex, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(Layout, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: 50\n            },\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n                children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n                  width: 10,\n                  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: \"Verify your identity\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 429,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    primary: true,\n                    disabled: !this.state.depositAlreadyPaid,\n                    onClick: this.verifyIdentity,\n                    children: \"Verify\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 430,\n                    columnNumber: 23\n                  }, this), !this.state.depositAlreadyPaid ? /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"You can't verify your idenity until you have connected an account and paid a deposit (see status section)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 433,\n                    columnNumber: 25\n                  }, this) : null, /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 438,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: \"Login credentials\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 441,\n                    columnNumber: 23\n                  }, this), this.state.loginDetailsRecieved ? /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                      children: [\"Pre-image: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 445,\n                        columnNumber: 49\n                      }, this), \" \"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 445,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(PreImageButton, {\n                      children: this.state.sessionIdRandNum\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 446,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                      children: [\"Hash: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 448,\n                        columnNumber: 44\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 448,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(HashButton, {\n                      children: this.state.sessionIdMimcNum\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 449,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 444,\n                    columnNumber: 25\n                  }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n                    children: \"No login details yet...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 451,\n                    columnNumber: 32\n                  }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 454,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: \"Create and submit proof\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 456,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: /*#__PURE__*/_jsxDEV(Input, {\n                      id: \"preImageCredential\",\n                      placeholder: \"Pre-image\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 457,\n                      columnNumber: 26\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 457,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: /*#__PURE__*/_jsxDEV(Input, {\n                      id: \"mimcHashCredential\",\n                      placeholder: \"Hash\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 458,\n                      columnNumber: 26\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 458,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    primary: true,\n                    onClick: this.submitSolProof,\n                    disabled: !this.state.accountDetailsRetrieved,\n                    children: \"Send proof\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 459,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 427,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n                  width: 6,\n                  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: \"Status \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 466,\n                    columnNumber: 25\n                  }, this), !this.state.accountDetailsRetrieved ? /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: this.connectMetaMaskAccount,\n                    style: {\n                      color: \"#D04C88\",\n                      backgroundColor: \"#FCDCE7\",\n                      width: \"fit-content\",\n                      padding: \"3%\",\n                      borderRadius: \"12px\",\n                      border: \"none\",\n                      fontWeight: \"bold\",\n                      cursor: \"pointer\"\n                    },\n                    children: \"Connect Wallet\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 469,\n                    columnNumber: 27\n                  }, this) : null, this.state.accountDetailsRetrieved ? /*#__PURE__*/_jsxDEV(AccountMessage, {\n                    network: this.state.network,\n                    account: this.state.account,\n                    verified: this.state.accountAlreadyVerified\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 483,\n                    columnNumber: 27\n                  }, this) : null, /*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: [\"Deposit: \", this.state.depositStatus]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 492,\n                    columnNumber: 27\n                  }, this), !this.state.depositAlreadyPaid && this.state.accountDetailsRetrieved ? /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: this.sendDeposit,\n                    disabled: !this.state.accountDetailsRetrieved,\n                    style: {\n                      color: \"#D04C88\",\n                      backgroundColor: \"#FCDCE7\",\n                      width: \"fit-content\",\n                      padding: \"3%\",\n                      borderRadius: \"12px\",\n                      border: \"none\",\n                      fontWeight: \"bold\",\n                      cursor: \"pointer\"\n                    },\n                    children: \"Send deposit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 495,\n                    columnNumber: 29\n                  }, this) : null, /*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: [\"Verification Session: \", this.state.verification_status, \" \\xA0 \\xA0\", this.state.loaderActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                      active: true,\n                      inline: true,\n                      size: \"small\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 513,\n                      columnNumber: 29\n                    }, this) : null]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 510,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: [\"Proof: \", this.state.verification_status, \" \\xA0 \\xA0\", this.state.loaderActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                      active: true,\n                      inline: true,\n                      size: \"small\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 520,\n                      columnNumber: 29\n                    }, this) : null]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 517,\n                    columnNumber: 27\n                  }, this), this.state.errorTrue ? /*#__PURE__*/_jsxDEV(Message, {\n                    negative: true,\n                    children: [/*#__PURE__*/_jsxDEV(Message.Header, {\n                      children: \"Error\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 527,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: this.state.errorMessage\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 528,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 526,\n                    columnNumber: 27\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 464,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this);\n    }\n  }]);\n\n  return CampaignIndex;\n}(Component);\n\nexport default CampaignIndex;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/pages/index.js"],"names":["React","Component","Message","Button","Input","Loader","Grid","Router","Layout","PreImageButton","HashButton","AccountMessage","factory","Web3","web3","mimc","calculateProof","loadStripe","stripePromise","CampaignIndex","errorMessage","errorTrue","verification_status","loaderActive","accountAlreadyVerified","account","network","accountDetailsRetrieved","clientSecret","stripe","verification_session_id","sessionIdRandNum","sessionIdMimcNum","depositAlreadyPaid","depositStatus","loginDetailsRecieved","mimcHashNumState","solidityVerifierProof","zkResult","connectMetaMaskAccountInitialCheck","metaMaskPresent","checkIfAccountVerified","alreadyVerified","checkDepositPaid","paidDeposit","setState","window","ethereum","selectedAddress","address","networkVersion","console","log","net","networkIntToName","provider","providers","HttpProvider","request","method","networkId","eth","getAccounts","accounts","methods","checkIfAddressVerified","call","from","res","checkIfDepositPaid","payDeposit","send","value","message","requestOptions","headers","body","JSON","stringify","title","fetch","response","json","data","id","event","preventDefault","resetError","createNewStripeSession","state","verifyIdentity","error","pollForStatus","setTimeout","fetchStatus","then","status","randSeededNum","mimcVal","preImage1","document","getElementById","out","toString","preImage","parseInt","hash","solidityProof","fullProof","parse","pi_a","pi_b","pi_c","inputs","verifyHash","marginTop","submitSolProof","connectMetaMaskAccount","color","backgroundColor","width","padding","borderRadius","border","fontWeight","cursor","sendDeposit"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Message, Button, Input, Loader, Grid } from \"semantic-ui-react\";\nimport { Router } from '../routes';\n\nimport Layout from \"../components/Layout\";\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nimport AccountMessage from \"../components/Accounts\";\n\nimport factory from \"../ethereum/verification\";\nimport Web3 from \"web3\"; // use this to have connect account button\nlet web3; \n\nimport mimc from '../public/mimc.ts';\nimport { calculateProof } from '../public/prover.js'\n\nimport {loadStripe} from '@stripe/stripe-js';\n\nconst stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n\nclass CampaignIndex extends Component {\n \n   state = {\n    errorMessage: '',\n    errorTrue: false,\n    verification_status: \"Not started\",\n    loaderActive: false,\n    // eth\n    accountAlreadyVerified: false,\n    account: \"No account\",\n    network: \"No network\",\n    accountDetailsRetrieved: false,\n    // stripe\n    clientSecret: null,\n    stripe: null,\n    verification_session_id: null,\n    sessionIdRandNum: null,\n    sessionIdMimcNum: null,\n    //deposit\n    depositAlreadyPaid: false,\n    depositStatus: null,\n    //login\n    loginDetailsRecieved: false,\n    //zkp\n    mimcHashNumState:null,\n    solidityVerifierProof:null,\n    zkResult: null,\n  };  \n\n  componentDidMount = async () => {\n    // check if metamask installed and account connected\n    const metaMaskPresent = await this.connectMetaMaskAccountInitialCheck();\n    if(!metaMaskPresent) {return;}\n\n    // checking if account is already verified\n    // at the moment I haven't disabled rest of flow if already verified to make testing easier\n    const alreadyVerified = await this.checkIfAccountVerified();\n\n    // check if deposit is paid\n    const paidDeposit = await this.checkDepositPaid();\n    // if(!paidDeposit) {return;} // this should be live for actual flow\n    \n  }\n\n  resetError = () => {\n    this.setState({errorTrue: false, errorMessage: \"\"});\n  }  \n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------METAMASK STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n  connectMetaMaskAccountInitialCheck = async () => {\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // We are in the browser and metamask is running.\n      \n      web3 = new Web3(window.ethereum);\n\n      var address = await ethereum.selectedAddress;\n      var network = ethereum.networkVersion;\n\n      console.log(\"account\", address)\n      console.log(\"network\", network)\n\n      const net = this.networkIntToName(network)\n\n      this.setState({network: net, account: address})\n\n      if (address != null) {\n        console.log(\"setting retireved\")\n        this.setState({accountDetailsRetrieved: true})\n        return true\n      }\n      return false\n\n    } else {\n      // We are on the server *OR* the user is not running metamask\n      const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\"\n      );\n      return false\n    }\n  }\n  \n  connectMetaMaskAccount = async () => {\n    // let web3;\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // We are in the browser and metamask is running.\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      \n      web3 = new Web3(window.ethereum);\n\n      var address = await ethereum.selectedAddress;\n      var network = ethereum.networkVersion;\n\n      console.log(\"account\", address)\n      console.log(\"network\", network)\n\n      const net = this.networkIntToName(network)\n\n      this.setState({network: net, account: address})\n\n      if (address != null) {\n        this.setState({accountDetailsRetrieved: true})\n        await this.checkIfAccountVerified()\n        await this.checkDepositPaid()\n      }\n\n    } else {\n      // We are on the server *OR* the user is not running metamask\n      const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\"\n      );\n    }\n  }\n\n  networkIntToName = (networkId) => {\n    switch(networkId) {\n      case \"1\":\n          return \"Main\"\n      case \"3\":\n        return \"Ropsten\"\n      case \"4\":\n        return \"Rinkeby\"\n      case \"42\":\n        return \"Kovan\";\n      case \"5\":\n        return \"Goerli\";\n      default: \n        return \"Custom\";\n    }\n}\n\n\n  checkIfAccountVerified = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n      let res = await factory.methods\n        .checkIfAddressVerified()\n        .call({\n            from: accounts[0]\n      });\n      this.setState({accountAlreadyVerified: res});\n      return true;\n\n    } catch (err) {\n        console.log(\"MetMask aerror\")\n        this.setState({ \n          errorMessage: \"It looks like you may be on the wrong MetaMask network\", \n          errorTrue: true });\n        return false;\n    }\n  }\n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------DEPOSIT STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  checkDepositPaid = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n      let res = await factory.methods\n        .checkIfDepositPaid()\n        .call({\n            from: accounts[0]\n      });\n      // this should be uncommented eventually as it will block the verifcation button if no deposit is paid\n      this.setState({depositAlreadyPaid: res});\n\n      if(res) {\n        this.setState({depositStatus: \"Paid\"})\n      } else {\n        this.setState({depositStatus: \"Not paid\"})\n      }\n      return res;\n\n    } catch (err) {\n        console.log(\"error when initially checking account\")\n        this.setState({ \n          errorMessage: \"It looks like there was an error checking if you had paid the deposit\", \n          errorTrue: true });\n        return false;\n    } \n  }\n\n  sendDeposit = async () => {\n    this.setState({ loaderActive: true});\n  \n    try {\n      this.setState({depositStatus: \"Sending deposit...\"})\n      const accounts = await web3.eth.getAccounts();\n      await factory.methods\n          .payDeposit()\n          .send({\n              from: accounts[0],\n              value: 20 // 20 wei deposit\n      });\n  \n      let res = await factory.methods\n          .checkIfDepositPaid()\n          .call({\n              from: accounts[0]\n      });\n      \n      if (res) {\n          this.setState({depositAlreadyPaid: res, depositStatus: \"Paid\"})\n      }\n  \n    } catch (err) {\n        console.log(\"error in submit sol proof\")\n        this.setState({ errorMessage: err.message, errorTrue: true });\n    }\n  this.setState({ loaderActive: false});\n  \n  }\n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------STRIPE STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  createNewStripeSession = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n\n      this.setState({ verification_status: \"server checking deposit payment\" })\n\n      const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ title: 'POST of metamask address',address: accounts[0] })\n      };\n      const response = await fetch('/api/create-verification-session', requestOptions);\n      const data = await response.json();\n      this.setState({clientSecret: data.clientSecret, verification_session_id: data.id})\n\n      // fetch('/api/create-verification-session')\n      // .then(res => res.json())\n      // .then(data => this.setState({clientSecret: data.clientSecret, verification_session_id: data.id}))\n\n      this.setState({ stripe: await stripePromise })\n    } catch (err) {\n      console.log(\"error when trying to create new verification session\")\n      this.setState({ \n        errorMessage: \"It looks like there was an issue creating a new verification session\", \n        errorTrue: true });\n      return false;\n    }\n\n  }\n\n\n  verifyIdentity = async (event) => {\n    event.preventDefault();\n\n    this.resetError()\n    this.setState({ loaderActive: true});\n\n    // creating new stripe session on button click\n    await this.createNewStripeSession();\n\n    let { stripe, clientSecret } = this.state;\n    \n    if (!stripe || !clientSecret) {\n      this.setState({ loaderActive: false, errorTrue: true, errorMessage: \"Stripe not connecting\"});\n      return;\n    }\n\n    // Show the verification modal.\n    const { error } = await stripe.verifyIdentity(clientSecret);\n    \n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('Verification submitted!');\n      this.pollForStatus();\n    }\n\n  }\n\n  pollForStatus = async() => {\n\n    if(this.state.verification_status !== \"passed_database_check\" && this.state.verification_status !== \"failed_database_check\") {\n      setTimeout(this.pollForStatus, 5000)\n      this.fetchStatus()\n    }\n    if(this.state.verification_status !== \"processing\" && \n        this.state.verification_status !== \"not_submitted\" && \n        this.state.verification_status !== \"verified_waiting_for_database_check\" &&\n        this.state.verification_status !== \"server checking deposit payment\") \n        {\n          this.setState({ loaderActive: false});\n          \n          if(this.state.verification_status == \"passed_database_check\") {\n            this.setState({loginDetailsRecieved: true});\n        }\n    }\n\n  }\n\nfetchStatus = async () => {\n    //handle error if session id isn't set\n    fetch('/api/get-verification-session/' + this.state.verification_session_id)\n      .then(res => res.json())\n      .then(data => this.setState({\n        verification_status: data.status, \n        sessionIdRandNum: data.randSeededNum,\n        sessionIdMimcNum: data.mimcVal,\n      }))\n  }\n\n\n  //-------------------------------------------------------------------------------------------\n  // ------------------------------------LOGIN DETAILS STUFF------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  mimcHashNum = async () => {\n  const preImage1 = document.getElementById('mimc_num').value\n  console.log(preImage1)\n  const out = mimc(preImage1);\n  console.log(out.toString())\n  this.setState({mimcHashNumState: out.toString()});\n\n  }\n\nverifyPreimage = async() => {\n  const preImage = parseInt(document.getElementById('preImageCredential').value);\n  console.log(preImage)\n  const hash = document.getElementById('mimcHashCredential').value;\n  console.log(hash)\n  const solidityProof = await calculateProof(preImage, hash);\n  this.setState({solidityVerifierProof: solidityProof});\n  console.log(solidityProof)\n}\n\nsubmitSolProof = async () => {\n  // event.preventDefault();\n  this.resetError()\n  this.setState({ loaderActive: true});\n\n  // CREATING ZKP FROM HASH AND PRE-IMAGE \n  this.setState({verification_status: \"Creating ZKP\"})\n  const preImage = parseInt(document.getElementById('preImageCredential').value);\n  console.log(preImage)\n  const hash = document.getElementById('mimcHashCredential').value;\n  console.log(hash)\n  const solidityProof = await calculateProof(preImage, hash);\n  // this.setState({solidityVerifierProof: solidityProof});\n  console.log(solidityProof)\n\n  // SUBMIT ZKP TO CONTRACT  \n  this.setState({verification_status: \"Starting ETH transaction\"})\n\n  const fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n\n  const pi_a = fullProof[0]\n  const pi_b = fullProof[1]\n  const pi_c = fullProof[2]\n  const inputs = fullProof[3]\n  \n\n  // send zk proof to verifyHash function\n  try {\n      this.setState({verification_status: \"Submitting ZKP...\"})\n      const accounts = await web3.eth.getAccounts();\n      await factory.methods\n          .verifyHash(pi_a,pi_b,pi_c,inputs)\n          .send({\n              from: accounts[0]\n      });\n      \n      console.log(\"submitted zkp successfully\")\n      // Router.reload(window.location.pathname)\n\n      let res = await factory.methods\n          .checkIfAddressVerified()\n          .call({\n              from: accounts[0]\n      });\n      this.setState({zkResult: res.toString()});\n\n      setTimeout(2000);\n\n      // set state of session status depending on res\n      if(res) {\n        this.setState({verification_status: \"Address is verified\"})\n      } else {\n        this.setState({verification_status: \"Address verification failed\"})\n      }\n\n    } catch (err) {\n        console.log(\"error in submit sol proof\")\n        this.setState({ errorMessage: err.message, errorTrue: true });\n    }\n\n    this.setState({loaderActive: false});\n  }\n\n\n\n  render() {\n    return (\n        <Layout >\n            <div>\n              <div style={{marginTop: 50}}>\n\n              <Grid>\n                <Grid.Row>\n                    <Grid.Column width={10}>\n                      {/* --------------------VERIFY IDENTITY--------------------- */}\n                      <h2>Verify your identity</h2>\n                      <Button primary disabled={!this.state.depositAlreadyPaid} onClick={this.verifyIdentity}>Verify</Button>\n                      {\n                        !this.state.depositAlreadyPaid ?\n                        <p>\n                          You can't verify your idenity until you have connected an account and paid a deposit (see status section)\n                        </p>\n                        : null\n                      }\n                      <hr/>\n                      \n                      {/* --------------------LOGIN CREDENTIALS--------------------- */}\n                      <h2>Login credentials</h2>\n                      {\n                      this.state.loginDetailsRecieved ?\n                        <p>\n                          <h3>Pre-image: &nbsp; <br></br> </h3> \n                          <PreImageButton>{this.state.sessionIdRandNum}</PreImageButton>\n                      \n                          <h3>Hash: &nbsp; <br></br></h3>\n                          <HashButton>{this.state.sessionIdMimcNum}</HashButton>\n\n                        </p> : <h4>No login details yet...</h4>\n                      }\n                                      \n                      <hr/>\n                      {/* ---------------------SUBMIT PROOF---------------------- */}\n                      <h2>Create and submit proof</h2>\n                      <p><Input id=\"preImageCredential\" placeholder=\"Pre-image\"></Input></p>\n                      <p><Input id=\"mimcHashCredential\" placeholder=\"Hash\"></Input></p>\n                      <Button primary onClick={this.submitSolProof} \n                      disabled={!this.state.accountDetailsRetrieved}>Send proof</Button> \n                        \n                    \n                    </Grid.Column>\n                    <Grid.Column width={6}>\n                        {/* --------------------SESSION STATUS--------------------- */}\n                        <h2>Status </h2>\n                        {/* --------------------address status--------------------- */}\n                          { !this.state.accountDetailsRetrieved ? \n                          <button onClick={this.connectMetaMaskAccount} \n                          style={{color: \"#D04C88\",\n                                    backgroundColor: \"#FCDCE7\",\n                                    width: \"fit-content\",\n                                    padding: \"3%\",\n                                    borderRadius: \"12px\",\n                                    border: \"none\",\n                                    fontWeight: \"bold\",\n                                    cursor: \"pointer\"\n                                    }}\n                                    >Connect Wallet</button> : null\n                          }\n\n                          { this.state.accountDetailsRetrieved ? \n                          <AccountMessage \n                            network={this.state.network} \n                            account={this.state.account}\n                            verified={this.state.accountAlreadyVerified}\n                          />\n                          : null\n                          }\n\n                         {/* --------------------deposit status--------------------- */}\n                          <h3>Deposit: {this.state.depositStatus}</h3>\n                          {\n                            (!this.state.depositAlreadyPaid && this.state.accountDetailsRetrieved) ?\n                            <button onClick={this.sendDeposit} \n                            disabled={!this.state.accountDetailsRetrieved}\n                            style={{color: \"#D04C88\",\n                                      backgroundColor: \"#FCDCE7\",\n                                      width: \"fit-content\",\n                                      padding: \"3%\",\n                                      borderRadius: \"12px\",\n                                      border: \"none\",\n                                      fontWeight: \"bold\",\n                                      cursor: \"pointer\"\n                                      }}\n                                      >Send deposit</button>\n                            : null\n                          }\n                          {/* --------------------verification status--------------------- */}\n                          <h3>Verification Session: {this.state.verification_status} &nbsp; &nbsp;\n                          {\n                            this.state.loaderActive ?\n                            <Loader active inline size=\"small\" />: null\n                          }\n                          </h3>\n                          {/* --------------------proof message--------------------- */}\n                          <h3>Proof: {this.state.verification_status} &nbsp; &nbsp;\n                          {\n                            this.state.loaderActive ?\n                            <Loader active inline size=\"small\" />: null\n                          }\n                          </h3>\n                          {/* --------------------error message--------------------- */}\n                          {\n                          this.state.errorTrue ?\n                          <Message negative>\n                            <Message.Header>Error</Message.Header>\n                            <p>{this.state.errorMessage}</p>\n                          </Message> : null\n                          }\n                          {/* {\n                            this.state.accountAlreadyVerified ?\n                            <h3 style={{color:\"rgb(83, 193, 77)\"}}>***Looks like your account is already verified***</h3> : null\n                          } */}\n                          \n                    </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n                \n            </div>\n            </div>\n        </Layout>\n    );\n  }\n}\n\nexport default CampaignIndex;\n"]},"metadata":{},"sourceType":"module"}