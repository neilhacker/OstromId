{"ast":null,"code":"const stripe = require('stripe')('sk_test_51J305OC6YuwVjGqqdtMScisG2JWYy339dNtTGf7QE44BdrPbWPqeMKd5WF1nfpnKYhAmbh8GGQbiaolofct52IgZ003WkhWzMr');\n\nimport mimc from '../../../public/mimc.ts';\n\nconst seedrandom = require('seedrandom');\n\nlet seededHash, randSeededNum, mimcVal;\nexport default async function handler(req, res) {\n  const {\n    id\n  } = req.query;\n  const verificationSession = await stripe.identity.verificationSessions.retrieve(id);\n  let {\n    status\n  } = verificationSession;\n  console.log(verificationSession.metadata.passedDatabaseCheck); // create random num and mimc hash of that num if session is verified\n\n  if (verificationSession.status == \"verified\") {\n    console.log(\"\\u001b[1;32m [id].js \\u001b[0m User id verified \");\n    status = \"verified_waiting_for_database_check\";\n\n    if (verificationSession.metadata.passedDatabaseCheck == \"true\") {\n      console.log(\"\\u001b[1;32m [id].js \\u001b[0m User passed database check \");\n      seededHash = seedrandom(id);\n      randSeededNum = seededHash() * 1000000000000000000;\n      console.log(\"\\u001b[1;32m [id].js \\u001b[0m randSeededNum in [id].js \", randSeededNum);\n      mimcVal = mimc(randSeededNum);\n      console.log(\"\\u001b[1;32m [id].js \\u001b[0m mimc val in [id].js \", mimcVal.toString());\n      status = \"passed_database_check\";\n    }\n\n    if (verificationSession.metadata.passedDatabaseCheck == \"false\") {\n      console.log(\"\\u001b[1;32m [id].js \\u001b[0m User failed database check \");\n      status = \"failed_database_check\";\n    }\n  }\n\n  res.status(200).json({\n    status,\n    randSeededNum,\n    mimcVal\n  });\n}","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/pages/api/get-verification-session/[id].js"],"names":["stripe","require","mimc","seedrandom","seededHash","randSeededNum","mimcVal","handler","req","res","id","query","verificationSession","identity","verificationSessions","retrieve","status","console","log","metadata","passedDatabaseCheck","toString","json"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkB,6GAAlB,CAAf;;AACA,OAAOC,IAAP,MAAiB,yBAAjB;;AACA,MAAMC,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AAEA,IAAIG,UAAJ,EAAeC,aAAf,EAA8BC,OAA9B;AAEA,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC9C,QAAM;AAACC,IAAAA;AAAD,MAAOF,GAAG,CAACG,KAAjB;AACA,QAAMC,mBAAmB,GAAG,MAAMZ,MAAM,CAACa,QAAP,CAAgBC,oBAAhB,CAAqCC,QAArC,CAA8CL,EAA9C,CAAlC;AACA,MAAI;AAACM,IAAAA;AAAD,MAAWJ,mBAAf;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYN,mBAAmB,CAACO,QAApB,CAA6BC,mBAAzC,EAJ8C,CAM9C;;AACA,MAAIR,mBAAmB,CAACI,MAApB,IAA8B,UAAlC,EAA8C;AAC5CC,IAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ;AACAF,IAAAA,MAAM,GAAG,qCAAT;;AAEA,QAAIJ,mBAAmB,CAACO,QAApB,CAA6BC,mBAA7B,IAAoD,MAAxD,EAAgE;AAC9DH,MAAAA,OAAO,CAACC,GAAR,CAAY,4DAAZ;AAEAd,MAAAA,UAAU,GAAGD,UAAU,CAACO,EAAD,CAAvB;AACAL,MAAAA,aAAa,GAAGD,UAAU,KAAK,mBAA/B;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAY,0DAAZ,EAAwEb,aAAxE;AAEAC,MAAAA,OAAO,GAAGJ,IAAI,CAACG,aAAD,CAAd;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAY,qDAAZ,EAAmEZ,OAAO,CAACe,QAAR,EAAnE;AACAL,MAAAA,MAAM,GAAG,uBAAT;AACD;;AACD,QAAIJ,mBAAmB,CAACO,QAApB,CAA6BC,mBAA7B,IAAoD,OAAxD,EAAiE;AAC/DH,MAAAA,OAAO,CAACC,GAAR,CAAY,4DAAZ;AACAF,MAAAA,MAAM,GAAG,uBAAT;AACD;AACF;;AAGDP,EAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB;AAAEN,IAAAA,MAAF;AAAUX,IAAAA,aAAV;AAAyBC,IAAAA;AAAzB,GAArB;AACD","sourcesContent":["const stripe = require('stripe')('sk_test_51J305OC6YuwVjGqqdtMScisG2JWYy339dNtTGf7QE44BdrPbWPqeMKd5WF1nfpnKYhAmbh8GGQbiaolofct52IgZ003WkhWzMr');\nimport mimc from '../../../public/mimc.ts';\nconst seedrandom = require('seedrandom');\n\nlet seededHash,randSeededNum, mimcVal; \n\nexport default async function handler(req, res) {\n  const {id} = req.query;\n  const verificationSession = await stripe.identity.verificationSessions.retrieve(id);\n  let {status} = verificationSession;\n  console.log(verificationSession.metadata.passedDatabaseCheck)\n\n  // create random num and mimc hash of that num if session is verified\n  if (verificationSession.status == \"verified\") {\n    console.log(\"\\u001b[1;32m [id].js \\u001b[0m User id verified \")\n    status = \"verified_waiting_for_database_check\"\n\n    if (verificationSession.metadata.passedDatabaseCheck == \"true\") {\n      console.log(\"\\u001b[1;32m [id].js \\u001b[0m User passed database check \")\n    \n      seededHash = seedrandom(id);\n      randSeededNum = seededHash() * 1000000000000000000;\n      console.log(\"\\u001b[1;32m [id].js \\u001b[0m randSeededNum in [id].js \", randSeededNum)\n\n      mimcVal = mimc(randSeededNum)\n      console.log(\"\\u001b[1;32m [id].js \\u001b[0m mimc val in [id].js \", mimcVal.toString())\n      status = \"passed_database_check\"\n    }\n    if (verificationSession.metadata.passedDatabaseCheck == \"false\") {\n      console.log(\"\\u001b[1;32m [id].js \\u001b[0m User failed database check \")\n      status = \"failed_database_check\";\n    }\n  }\n  \n\n  res.status(200).json({ status, randSeededNum, mimcVal })\n}"]},"metadata":{},"sourceType":"module"}