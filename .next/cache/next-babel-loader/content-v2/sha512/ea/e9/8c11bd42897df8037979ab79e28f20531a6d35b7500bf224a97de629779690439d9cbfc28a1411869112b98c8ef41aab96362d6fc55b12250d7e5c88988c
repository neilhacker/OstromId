{"ast":null,"code":"import { sha256 } from 'js-sha256';\nimport { EthereumStuff } from '../../backend/ethBackend';\nimport searchDatabase from '../../backend/mongo.js';\n\nconst stripe = require('stripe')('rk_test_51J305OC6YuwVjGqqJ6Sj41vN15r5vfTbCiHd1slfDzXLSgdyjLxofs7oqGCBrWRlVXxpfbpIxHd3hmhmTlbWwGNx00UU16Rwo4');\n\nconst stripeSecret = require('stripe')('sk_test_51J305OC6YuwVjGqqdtMScisG2JWYy339dNtTGf7QE44BdrPbWPqeMKd5WF1nfpnKYhAmbh8GGQbiaolofct52IgZ003WkhWzMr');\n\nconst handler = async (req, res) => {\n  //todo: check stripe signing key\n  if (req.method === \"POST\") {\n    const event = req.body; // need to verifiy that event came from stripe \n    // https://stripe.com/docs/identity/handle-verification-outcomes\n    // Handle the event\n\n    switch (event.type) {\n      case 'identity.verification_session.verified':\n        {\n          // All the verification checks passed\n          const verificationSession = event.data.object;\n          await handleSuccessfulVerification(verificationSession); // console.log( \"\\u001b[1;32m [Stripe] \\u001b[0m Identity verification session verified\" );\n          // const verifiedOutputs = await stripe.identity.verificationSessions.retrieve(\n          //   verificationSession.id,\n          //   {\n          //     expand: [\n          //       'verified_outputs',\n          //       'verified_outputs.dob',\n          //     ],\n          //   }\n          // );\n          // console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m MetaData: \", verificationSession.metadata)\n          // console.log( \"\\u001b[1;32m [Stripe] \\u001b[0m Hashing user details...\" );\n          // const hash = makeHashOfDetails(verifiedOutputs);\n          // console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m Hash made: \", hash)\n          // const res = await EthereumStuff(verificationSession.id, hash);\n          // console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m result of database check: \", res)\n          // if (res == false) {\n          //   const thing = await stripeSecret.identity.verificationSessions.update(\n          //     verificationSession.id,\n          //     {metadata: {passedDatabaseCheck: false}}\n          //   );\n          // } else {\n          //   const thing = await stripeSecret.identity.verificationSessions.update(\n          //     verificationSession.id,\n          //     {metadata: {passedDatabaseCheck: true}}\n          //   );\n          // }\n\n          break;\n        }\n\n      default:\n        // Unexpected event type\n        console.log(`❌ Unhandled event type ${event.type}.`);\n    } // Return a 200 response to acknowledge receipt of the event\n\n\n    res.send(); // res.status(200).json({ })\n  } else {\n    res.setHeader(\"Allow\", \"POST\");\n    res.status(405).end(\"Method Not Allowed\");\n  }\n};\n\nconst handleSuccessfulVerification = async verificationSession => {\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m Identity verification session verified\");\n  const verificationType = verificationSession.metadata.verificationType;\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m MetaData-verificationType: \", verificationType); // get verified outputs to check database\n\n  const verifiedOutputs = await stripe.identity.verificationSessions.retrieve(verificationSession.id, {\n    expand: ['verified_outputs', 'verified_outputs.dob']\n  });\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m Hashing user details...\");\n  const hash = makeHashOfDetails(verifiedOutputs);\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m Hash made: \", hash); // ----------------------------------------------------------------------------            \n  // ------------------------------search database-------------------------------\n  // ----------------------------------------------------------------------------            \n\n  const res = await searchDatabase(hash).catch(console.error);\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m result of database check: \", res); // if user exists already don't send transaction\n\n  if (res == false) {\n    return false;\n  } // ----------------------------------------------------------------------------            \n  // ------------------------------anonymous flow-------------------------------\n  // ----------------------------------------------------------------------------            \n\n\n  if (verificationType = \"anonymous\") {\n    const anonymousRes = await EthereumStuff(verificationSession.id, hash);\n    console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m In ANONYMOUS flow: \");\n\n    if (anonymousRes == false) {\n      await stripeSecret.identity.verificationSessions.update(verificationSession.id, {\n        metadata: {\n          passedDatabaseCheck: false\n        }\n      });\n    } else {\n      await stripeSecret.identity.verificationSessions.update(verificationSession.id, {\n        metadata: {\n          passedDatabaseCheck: true\n        }\n      });\n    }\n  } // ----------------------------------------------------------------------------            \n  // ---------------------------------open flow----------------------------------\n  // ----------------------------------------------------------------------------      \n\n\n  if (verificationType = \"open\") {\n    const openRes = await EthereumStuff(verificationSession.id, hash);\n    console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m In OPEN flow: \");\n\n    if (openRes == false) {\n      stripeSecret.identity.verificationSessions.update(verificationSession.id, {\n        metadata: {\n          passedDatabaseCheck: false\n        }\n      });\n    } else {\n      await stripeSecret.identity.verificationSessions.update(verificationSession.id, {\n        metadata: {\n          passedDatabaseCheck: true\n        }\n      });\n    }\n  }\n};\n\nconst makeHashOfDetails = verifiedOutputs => {\n  const firstName = verifiedOutputs.verified_outputs.first_name.toString().toLowerCase();\n  const lastName = verifiedOutputs.verified_outputs.last_name.toString().toLowerCase();\n  const dayStr = verifiedOutputs.verified_outputs.dob.day.toString();\n  const monthStr = verifiedOutputs.verified_outputs.dob.month.toString();\n  const yearStr = verifiedOutputs.verified_outputs.dob.year.toString();\n  const combination = firstName + lastName + dayStr + monthStr + yearStr;\n  const hashCombination = sha256(combination);\n  return hashCombination;\n};\n\nexport default handler;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/pages/api/stripe_hook.js"],"names":["sha256","EthereumStuff","searchDatabase","stripe","require","stripeSecret","handler","req","res","method","event","body","type","verificationSession","data","object","handleSuccessfulVerification","console","log","send","setHeader","status","end","verificationType","metadata","verifiedOutputs","identity","verificationSessions","retrieve","id","expand","hash","makeHashOfDetails","catch","error","anonymousRes","update","passedDatabaseCheck","openRes","firstName","verified_outputs","first_name","toString","toLowerCase","lastName","last_name","dayStr","dob","day","monthStr","month","yearStr","year","combination","hashCombination"],"mappings":"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","sourcesContent":["import { sha256 } from 'js-sha256';\nimport { EthereumStuff } from '../../backend/ethBackend';\nimport searchDatabase from '../../backend/mongo.js'\n\nconst stripe = require('stripe')('rk_test_51J305OC6YuwVjGqqJ6Sj41vN15r5vfTbCiHd1slfDzXLSgdyjLxofs7oqGCBrWRlVXxpfbpIxHd3hmhmTlbWwGNx00UU16Rwo4');\nconst stripeSecret = require('stripe')('sk_test_51J305OC6YuwVjGqqdtMScisG2JWYy339dNtTGf7QE44BdrPbWPqeMKd5WF1nfpnKYhAmbh8GGQbiaolofct52IgZ003WkhWzMr');\n\nconst handler = async (req, res) => {\n    //todo: check stripe signing key\n    if (req.method === \"POST\") {\n        const event = req.body;\n\n        // need to verifiy that event came from stripe \n        // https://stripe.com/docs/identity/handle-verification-outcomes\n      \n        // Handle the event\n        switch (event.type) {\n          case 'identity.verification_session.verified': {\n              // All the verification checks passed\n              const verificationSession = event.data.object;\n              await handleSuccessfulVerification(verificationSession);\n              // console.log( \"\\u001b[1;32m [Stripe] \\u001b[0m Identity verification session verified\" );\n\n              // const verifiedOutputs = await stripe.identity.verificationSessions.retrieve(\n              //   verificationSession.id,\n              //   {\n              //     expand: [\n              //       'verified_outputs',\n              //       'verified_outputs.dob',\n              //     ],\n              //   }\n              // );\n              // console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m MetaData: \", verificationSession.metadata)\n\n              // console.log( \"\\u001b[1;32m [Stripe] \\u001b[0m Hashing user details...\" );\n              // const hash = makeHashOfDetails(verifiedOutputs);\n              // console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m Hash made: \", hash)\n                            \n              // const res = await EthereumStuff(verificationSession.id, hash);\n              // console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m result of database check: \", res)\n\n              // if (res == false) {\n              //   const thing = await stripeSecret.identity.verificationSessions.update(\n              //     verificationSession.id,\n              //     {metadata: {passedDatabaseCheck: false}}\n              //   );\n              // } else {\n              //   const thing = await stripeSecret.identity.verificationSessions.update(\n              //     verificationSession.id,\n              //     {metadata: {passedDatabaseCheck: true}}\n              //   );\n              // }\n              \n              break;\n            }\n        \n          default:\n            // Unexpected event type\n            console.log(`❌ Unhandled event type ${event.type}.`);\n        }\n        // Return a 200 response to acknowledge receipt of the event\n        res.send();\n        // res.status(200).json({ })\n    } else {\n      res.setHeader(\"Allow\", \"POST\");\n      res.status(405).end(\"Method Not Allowed\");\n    }\n}\n\nconst handleSuccessfulVerification = async (verificationSession) => {\n  console.log( \"\\u001b[1;32m [Stripe] \\u001b[0m Identity verification session verified\" );\n\n  const verificationType = verificationSession.metadata.verificationType;\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m MetaData-verificationType: \", verificationType)\n\n  // get verified outputs to check database\n  const verifiedOutputs = await stripe.identity.verificationSessions.retrieve(\n    verificationSession.id,\n    {\n      expand: [\n        'verified_outputs',\n        'verified_outputs.dob',\n      ],\n    }\n  );\n\n  console.log( \"\\u001b[1;32m [Stripe] \\u001b[0m Hashing user details...\" );\n  const hash = makeHashOfDetails(verifiedOutputs);\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m Hash made: \", hash)\n\n  // ----------------------------------------------------------------------------            \n  // ------------------------------search database-------------------------------\n  // ----------------------------------------------------------------------------            \n\n  const res = await searchDatabase(hash).catch(console.error);\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m result of database check: \", res)\n  // if user exists already don't send transaction\n  if (res == false) {\n    return false;\n  }\n\n  // ----------------------------------------------------------------------------            \n  // ------------------------------anonymous flow-------------------------------\n  // ----------------------------------------------------------------------------            \n  if (verificationType = \"anonymous\") {\n    const anonymousRes = await EthereumStuff(verificationSession.id, hash);\n    console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m In ANONYMOUS flow: \")\n\n    if (anonymousRes == false) {\n      await stripeSecret.identity.verificationSessions.update(\n        verificationSession.id,\n        {metadata: {passedDatabaseCheck: false}}\n      );\n    } else {\n      await stripeSecret.identity.verificationSessions.update(\n        verificationSession.id,\n        {metadata: {passedDatabaseCheck: true}}\n      );\n    }\n  }\n  // ----------------------------------------------------------------------------            \n  // ---------------------------------open flow----------------------------------\n  // ----------------------------------------------------------------------------      \n  if (verificationType = \"open\") {\n    const openRes = await EthereumStuff(verificationSession.id, hash);\n    console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m In OPEN flow: \")\n\n    if (openRes == false) {\n      stripeSecret.identity.verificationSessions.update(\n        verificationSession.id,\n        {metadata: {passedDatabaseCheck: false}}\n      );\n    } else {\n      await stripeSecret.identity.verificationSessions.update(\n        verificationSession.id,\n        {metadata: {passedDatabaseCheck: true}}\n      );\n    }\n  }      \n\n}\n\nconst makeHashOfDetails = (verifiedOutputs) => {\n  const firstName = verifiedOutputs.verified_outputs.first_name.toString().toLowerCase();\n  const lastName = verifiedOutputs.verified_outputs.last_name.toString().toLowerCase();\n  const dayStr = verifiedOutputs.verified_outputs.dob.day.toString();\n  const monthStr = verifiedOutputs.verified_outputs.dob.month.toString();\n  const yearStr = verifiedOutputs.verified_outputs.dob.year.toString();\n\n  const combination = firstName + lastName + dayStr + monthStr + yearStr;\n\n  const hashCombination = sha256(combination);\n  return hashCombination;\n\n} \n\nexport default handler;"]},"metadata":{},"sourceType":"module"}