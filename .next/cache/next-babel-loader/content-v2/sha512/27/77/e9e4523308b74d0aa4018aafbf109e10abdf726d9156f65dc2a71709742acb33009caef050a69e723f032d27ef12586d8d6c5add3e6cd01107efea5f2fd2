{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/components/PreImageButton.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Button, Icon, Dimmer } from 'semantic-ui-react';\nimport CopyMessage from './CopyMessage';\n\nclass PreImageButton extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      active: true,\n      copySuccess: false\n    });\n\n    _defineProperty(this, \"copyCodeToClipboard1\", () => {\n      var copyText = document.getElementById(\"copybutton1\").innerText;\n      var textarea = document.createElement('textarea');\n      textarea.id = 'temp_element';\n      textarea.style.height = 0;\n      document.body.appendChild(textarea);\n      textarea.value = copyText;\n      var selector = document.querySelector('#temp_element');\n      selector.select();\n      document.execCommand('copy');\n      document.body.removeChild(textarea);\n      this.setState({\n        copySuccess: true\n      });\n    });\n\n    _defineProperty(this, \"handleShow\", () => this.setState({\n      active: true\n    }));\n\n    _defineProperty(this, \"handleHide\", () => this.setState({\n      active: false\n    }));\n  }\n\n  componentDidUpdate() {\n    if (this.state.copySuccess) {\n      this.hideTimeout = setTimeout(() => this.setState({\n        copySuccess: false\n      }), 2500);\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.hideTimeout);\n  }\n\n  render() {\n    const {\n      active\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Dimmer.Dimmable, {\n        blurring: true,\n        dimmed: active,\n        style: {\n          width: \"25%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          icon: true,\n          labelPosition: \"right\",\n          id: \"copybutton1\",\n          onClick: this.copyCodeToClipboard1,\n          children: [this.props.children, /*#__PURE__*/_jsxDEV(Icon, {\n            name: \"copy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Dimmer, {\n          active: active,\n          inverted: true,\n          onClickOutside: this.handleHide,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: this.handleHide,\n            style: {\n              color: \"black\",\n              backgroundColor: 'rgba(255, 255, 255, 0.1)'\n            },\n            children: \"Click to reveal Pre-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), this.state.copySuccess ? /*#__PURE__*/_jsxDEV(CopyMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default PreImageButton;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/components/PreImageButton.js"],"names":["React","Component","Button","Icon","Dimmer","CopyMessage","PreImageButton","active","copySuccess","copyText","document","getElementById","innerText","textarea","createElement","id","style","height","body","appendChild","value","selector","querySelector","select","execCommand","removeChild","setState","componentDidUpdate","state","hideTimeout","setTimeout","componentWillUnmount","clearTimeout","render","width","copyCodeToClipboard1","props","children","handleHide","color","backgroundColor"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react'\nimport { Button, Icon, Dimmer } from 'semantic-ui-react';\nimport CopyMessage\n from './CopyMessage';\nclass PreImageButton extends Component {\n    state = { \n      active: true,\n      copySuccess: false,\n     }\n  \n    copyCodeToClipboard1 = () => {\n\n        var copyText = document.getElementById(\"copybutton1\").innerText;\n        var textarea = document.createElement('textarea');\n        textarea.id = 'temp_element';\n        textarea.style.height = 0;\n        document.body.appendChild(textarea);\n        textarea.value = copyText;\n        var selector = document.querySelector('#temp_element')\n        selector.select();\n        document.execCommand('copy');\n        document.body.removeChild(textarea);\n        this.setState({copySuccess: true})\n      }\n      \n    \n    handleShow = () => this.setState({ active: true })\n    handleHide = () => this.setState({ active: false })\n    \n    componentDidUpdate(){\n      if (this.state.copySuccess) {\n        this.hideTimeout = setTimeout(() => this.setState({copySuccess:false}), 2500);\n      }\n    }\n  \n    componentWillUnmount() {\n      clearTimeout(this.hideTimeout)\n    }\n  \n    render() {\n        const { active } = this.state\n        return (\n          <div>\n          <Dimmer.Dimmable blurring dimmed={active} \n          style={{width:\"25%\"}}>\n          <Button \n            icon \n            labelPosition='right'\n            id = \"copybutton1\"\n            onClick={this.copyCodeToClipboard1}\n          >\n          {this.props.children}\n          <Icon name='copy' />\n        </Button>\n  \n            <Dimmer\n              active={active}\n              inverted\n              onClickOutside={this.handleHide}\n            >\n            <Button onClick={this.handleHide}\n            style={{color:\"black\", backgroundColor: 'rgba(255, 255, 255, 0.1)'}}>Click to reveal Pre-image</Button>\n            </Dimmer>\n          </Dimmer.Dimmable>\n          {\n            this.state.copySuccess ?\n            <CopyMessage></CopyMessage>\n            : null\n          }\n          </div>\n        )\n        \n      }\n  }\n  \n  export default PreImageButton"]},"metadata":{},"sourceType":"module"}