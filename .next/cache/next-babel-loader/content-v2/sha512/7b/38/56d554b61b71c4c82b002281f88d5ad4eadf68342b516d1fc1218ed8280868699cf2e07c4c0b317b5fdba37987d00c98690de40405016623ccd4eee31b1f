{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_4/pages/index.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Card, Button } from \"semantic-ui-react\";\nimport factory from \"../ethereum/verification\";\nimport solVerifier from \"../ethereum/verifier\";\nimport Layout from \"../components/Layout\";\nimport { Link } from '../routes';\nimport web3 from '../ethereum/web3'; // import { Router } from '../routes';\n\nimport { loadStripe } from '@stripe/stripe-js';\nimport Router from 'next/router';\nimport { sha256 } from 'js-sha256';\nimport mimc from '../mimc.ts';\nimport { calculateProof } from '../prover.js';\nconst stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\nconst STATUS_PENDING = \"processing\";\nconst STATUS_SUCCESS = \"verified\";\nconst STATUS_ERROR = \"?\";\nconst STATUS_NOT_STARTED = \"not_submitted\";\n\nclass CampaignIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      errorMessage: '',\n      ethLoading: false,\n      verificationLoading: false,\n      clientSecret: null,\n      stripe: null,\n      verification_status: STATUS_NOT_STARTED,\n      verification_session_id: null,\n      sessionIdRandNum: null,\n      sessionIdMimcNum: null,\n      mimcHashNumState: null,\n      solidityVerifierProof: null,\n      zkResult: null\n    });\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      fetch('/api/create-verification-session').then(res => res.json()).then(data => this.setState({\n        clientSecret: data.clientSecret,\n        verification_session_id: data.id\n      }));\n      this.setState({\n        stripe: await stripePromise\n      });\n    });\n\n    _defineProperty(this, \"verifyIdentity\", async event => {\n      event.preventDefault();\n      this.setState({\n        verificationLoading: true\n      });\n      let {\n        stripe,\n        clientSecret\n      } = this.state;\n\n      if (!stripe || !clientSecret) {\n        return;\n      } // Show the verification modal.\n\n\n      const {\n        error\n      } = await stripe.verifyIdentity(clientSecret);\n\n      if (error) {\n        console.log('[error]', error);\n      } else {\n        console.log('Verification submitted!');\n        this.pollForStatus();\n      }\n    });\n\n    _defineProperty(this, \"pollForStatus\", async () => {\n      if (this.state.verification_status !== STATUS_SUCCESS) {\n        setTimeout(this.pollForStatus, 5000);\n        this.fetchStatus();\n      }\n\n      if (this.state.verification_status !== STATUS_PENDING && this.state.verification_status !== STATUS_NOT_STARTED) {\n        this.setState({\n          verificationLoading: false\n        }); // this.sendEthTransaction() // this calls the eth transaction on the front end\n      }\n    });\n\n    _defineProperty(this, \"fetchStatus\", async () => {\n      //handle error if session id isn't set\n      fetch('/api/get-verification-session/' + this.state.verification_session_id).then(res => res.json()).then(data => this.setState({\n        verification_status: data.status,\n        sessionIdRandNum: data.randSeededNum,\n        sessionIdMimcNum: data.mimcVal\n      }));\n    });\n\n    _defineProperty(this, \"sendEthTransaction\", async () => {\n      // event.preventDefault();\n      this.setState({\n        ethLoading: true,\n        errorMessage: ''\n      });\n      this.setState({\n        verification_status: \"starting eth transaction\"\n      });\n      const text = document.getElementById(\"id_hash_credentials\").value;\n\n      try {\n        // const accounts = await web3.eth.getAccounts();\n        // console.log(\"main account\", accounts[0])\n        await factory.methods.verifyHash(text).send({\n          from: \"0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A\"\n        }); // Router.pushRoute('/');\n\n        this.setState({\n          verification_status: \"successful transaction\"\n        });\n        Router.reload(window.location.pathname);\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        ethLoading: false\n      });\n    });\n\n    _defineProperty(this, \"mimcHashNum\", async () => {\n      const preImage1 = document.getElementById('mimc_num').value;\n      console.log(preImage1);\n      const out = mimc(preImage1);\n      console.log(out.toString());\n      this.setState({\n        mimcHashNumState: out.toString()\n      });\n    });\n\n    _defineProperty(this, \"verifyPreimage\", async () => {\n      const hash = this.state.sessionIdMimcNum;\n      const preImage = this.state.sessionIdRandNum;\n      const solidityProof = await calculateProof(preImage, hash); // console.log('calculateProof:', solidityProof)\n\n      this.setState({\n        solidityVerifierProof: solidityProof\n      });\n    });\n\n    _defineProperty(this, \"submitSolProof\", async () => {\n      // event.preventDefault();\n      this.setState({\n        ethLoading: true,\n        errorMessage: ''\n      });\n      this.setState({\n        verification_status: \"starting eth transaction\"\n      });\n      const fullProof = JSON.parse(\"[\" + this.state.solidityVerifierProof + \"]\");\n      const pi_a = fullProof[0];\n      const pi_b = fullProof[1];\n      const pi_c = fullProof[2];\n      const inputs = fullProof[3]; // console.log('fullProof:', pi_a)\n\n      try {\n        // const accounts = await web3.eth.getAccounts();\n        var res = await solVerifier.methods.verifyProof(pi_a, pi_b, pi_c, inputs).call({\n          from: \"0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A\"\n        }); // Router.pushRoute('/');\n\n        console.log(\"good transactoin\");\n        console.log(\"res\", res);\n        this.setState({\n          zkResult: res.toString()\n        }); // this.setState({verification_status: \"successful transaction\"})\n        // Router.reload(window.location.pathname)\n      } catch (err) {\n        console.log(\"error in submit sol proof\");\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        ethLoading: false\n      });\n    });\n  }\n\n  static async getInitialProps() {\n    const count = await factory.methods.getNumOfVerifiedTransactions().call();\n    return {\n      count\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Layout, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: 200,\n              marginLeft: 200\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Verify your identity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              primary: true,\n              onClick: this.verifyIdentity,\n              loading: this.state.verificationLoading,\n              children: \"Verify\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"You have signed \", this.props.count, \" transactions\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Session status: \", this.state.verification_status]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Submit ID credentials\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"your login credentials:\", this.state.sessionIdRandNum, \", \", this.state.sessionIdMimcNum]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"id_hash_credentials\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              primary: true,\n              onClick: this.sendEthTransaction,\n              loading: this.state.ethLoading,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              primary: true,\n              onClick: this.verifyPreimage,\n              children: \"Generate Proof\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Sol proof: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this), this.state.solidityVerifierProof, /*#__PURE__*/_jsxDEV(Button, {\n              primary: true,\n              onClick: this.submitSolProof,\n              loading: this.state.ethLoading,\n              children: \"Submit Proof\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"Result: \", this.state.zkResult]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default CampaignIndex;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_4/pages/index.js"],"names":["React","Component","Card","Button","factory","solVerifier","Layout","Link","web3","loadStripe","Router","sha256","mimc","calculateProof","stripePromise","STATUS_PENDING","STATUS_SUCCESS","STATUS_ERROR","STATUS_NOT_STARTED","CampaignIndex","errorMessage","ethLoading","verificationLoading","clientSecret","stripe","verification_status","verification_session_id","sessionIdRandNum","sessionIdMimcNum","mimcHashNumState","solidityVerifierProof","zkResult","fetch","then","res","json","data","setState","id","event","preventDefault","state","error","verifyIdentity","console","log","pollForStatus","setTimeout","fetchStatus","status","randSeededNum","mimcVal","text","document","getElementById","value","methods","verifyHash","send","from","reload","window","location","pathname","err","message","preImage1","out","toString","hash","preImage","solidityProof","fullProof","JSON","parse","pi_a","pi_b","pi_c","inputs","verifyProof","call","getInitialProps","count","getNumOfVerifiedTransactions","render","marginTop","marginLeft","props","sendEthTransaction","verifyPreimage","submitSolProof"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Card, Button } from \"semantic-ui-react\";\nimport factory from \"../ethereum/verification\";\nimport solVerifier from \"../ethereum/verifier\";\n\nimport Layout from \"../components/Layout\";\nimport { Link } from '../routes';\nimport web3 from '../ethereum/web3'\n// import { Router } from '../routes';\nimport {loadStripe} from '@stripe/stripe-js';\nimport Router from 'next/router'\nimport { sha256 } from 'js-sha256';\nimport mimc from '../mimc.ts';\n\nimport { calculateProof } from '../prover.js'\n\nconst stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n\nconst STATUS_PENDING = \"processing\"\nconst STATUS_SUCCESS = \"verified\";\nconst STATUS_ERROR = \"?\"\nconst STATUS_NOT_STARTED = \"not_submitted\";\n\nclass CampaignIndex extends Component {\n \n  static async getInitialProps() {\n    const count = await factory.methods.getNumOfVerifiedTransactions().call();\n\n    return { count };\n  }\n\n  state = {\n    errorMessage: '',\n    ethLoading: false,\n    verificationLoading: false,\n    clientSecret: null,\n    stripe: null,\n    verification_status: STATUS_NOT_STARTED,\n    verification_session_id: null,\n    sessionIdRandNum: null,\n    sessionIdMimcNum: null,\n    mimcHashNumState:null,\n    solidityVerifierProof:null,\n    zkResult: null,\n  };  \n\n  componentDidMount = async () => {\n    fetch('/api/create-verification-session')\n    .then(res => res.json())\n    .then(data => this.setState({clientSecret: data.clientSecret, verification_session_id: data.id}))\n\n    this.setState({ stripe: await stripePromise })\n  }\n\n  verifyIdentity = async (event) => {\n    event.preventDefault();\n    this.setState({ verificationLoading: true});\n\n    let { stripe, clientSecret } = this.state;\n    \n    if (!stripe || !clientSecret) {\n      return;\n    }\n\n    // Show the verification modal.\n    const { error } = await stripe.verifyIdentity(clientSecret);\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('Verification submitted!');\n      this.pollForStatus();\n    }\n\n  }\n\n  pollForStatus = async() => {\n    if(this.state.verification_status !== STATUS_SUCCESS) {\n      setTimeout(this.pollForStatus, 5000)\n      this.fetchStatus()\n    }\n    if(this.state.verification_status !== STATUS_PENDING && this.state.verification_status !== STATUS_NOT_STARTED) {\n        this.setState({ verificationLoading: false});\n        // this.sendEthTransaction() // this calls the eth transaction on the front end\n    }\n\n  }\n\n  fetchStatus = async () => {\n    //handle error if session id isn't set\n    fetch('/api/get-verification-session/' + this.state.verification_session_id)\n      .then(res => res.json())\n      .then(data => this.setState({\n        verification_status: data.status, \n        sessionIdRandNum: data.randSeededNum,\n        sessionIdMimcNum: data.mimcVal,\n      }))\n  }\n\n  sendEthTransaction = async () => {\n    // event.preventDefault();\n    \n    this.setState({ ethLoading: true, errorMessage: '' });\n    this.setState({verification_status: \"starting eth transaction\"})\n\n    const text = document.getElementById(\"id_hash_credentials\").value;\n\n    try {\n        // const accounts = await web3.eth.getAccounts();\n        // console.log(\"main account\", accounts[0])\n        await factory.methods\n            .verifyHash(text)\n            .send({\n                from: \"0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A\"\n        });\n        \n        // Router.pushRoute('/');\n        this.setState({verification_status: \"successful transaction\"})\n        Router.reload(window.location.pathname)\n\n\n    } catch (err) {\n        this.setState({ errorMessage: err.message });\n    }\n\n    this.setState({ethLoading: false});\n}\n\nmimcHashNum = async () => {\n const preImage1 = document.getElementById('mimc_num').value\n console.log(preImage1)\n const out = mimc(preImage1);\n console.log(out.toString())\n this.setState({mimcHashNumState: out.toString()});\n\n}\n\nverifyPreimage = async() => {\n  const hash = this.state.sessionIdMimcNum;\n  const preImage = this.state.sessionIdRandNum\n  const solidityProof = await calculateProof(preImage, hash);\n  // console.log('calculateProof:', solidityProof)\n  this.setState({solidityVerifierProof: solidityProof});\n}\n\nsubmitSolProof = async () => {\n  // event.preventDefault();\n  \n  this.setState({ ethLoading: true, errorMessage: '' });\n  this.setState({verification_status: \"starting eth transaction\"})\n\n  const fullProof = JSON.parse(\"[\" + this.state.solidityVerifierProof + \"]\");\n  const pi_a = fullProof[0]\n  const pi_b = fullProof[1]\n  const pi_c = fullProof[2]\n  const inputs = fullProof[3]\n  // console.log('fullProof:', pi_a)\n\n\n  try {\n      // const accounts = await web3.eth.getAccounts();\n      var res = await solVerifier.methods\n          .verifyProof(pi_a,pi_b,pi_c,inputs)\n          .call({\n              from: \"0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A\"\n      });\n      \n      // Router.pushRoute('/');\n      console.log(\"good transactoin\")\n      console.log(\"res\", res)\n      this.setState({zkResult: res.toString()});\n      // this.setState({verification_status: \"successful transaction\"})\n      // Router.reload(window.location.pathname)\n\n\n  } catch (err) {\n      console.log(\"error in submit sol proof\")\n      this.setState({ errorMessage: err.message });\n  }\n\n  this.setState({ethLoading: false});\n}\n\n  render() {\n    return (\n      <>\n        <Layout>\n            <div>\n              <div style={{marginTop: 200, marginLeft: 200}}>\n                <h2>Verify your identity</h2>\n                <Button primary onClick={this.verifyIdentity} loading={this.state.verificationLoading}>Verify</Button>\n                <br></br>\n                <br></br>\n                <p>You have signed {this.props.count} transactions</p>\n                <p>Session status: {this.state.verification_status}</p>\n                \n                <h2>Submit ID credentials</h2>\n                <p>your login credentials:\n                {this.state.sessionIdRandNum}, {this.state.sessionIdMimcNum}</p>\n\n                <input id=\"id_hash_credentials\"></input>\n                <Button primary onClick={this.sendEthTransaction} loading={this.state.ethLoading}>Send</Button> \n\n                {/* <h2>Compute Mimc hash</h2>\n                <input id=\"mimc_num\"></input>\n                <Button primary onClick={this.mimcHashNum}>Hash</Button>\n                <p>Hashed num:\n                {this.state.mimcHashNumState}</p> */}\n\n                {/* <h2>Prove you know pre image</h2>\n                <p>Hash: {this.state.mimcHashNumState}</p> \n                <p>pre-image: <input id=\"pre_image_num\"></input>\n                </p> */}\n                <Button primary onClick={this.verifyPreimage}>Generate Proof</Button>\n\n                <h2>Sol proof: </h2>\n                {this.state.solidityVerifierProof}\n\n                <Button primary onClick={this.submitSolProof} loading={this.state.ethLoading}>Submit Proof</Button>\n\n                <h2>Result: {this.state.zkResult}</h2>\n\n            \n            </div>\n            </div>\n        </Layout>\n      </>\n    );\n  }\n}\n\nexport default CampaignIndex;\n"]},"metadata":{},"sourceType":"module"}