{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/pages/index.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// require('dotenv').config();\nimport React, { Component } from \"react\";\nimport { Message, Button, Input, Loader, Grid } from \"semantic-ui-react\";\nimport factory from \"../ethereum/verification\";\nimport Layout from \"../components/Layout\";\nimport web3 from '../ethereum/web3'; // import { Router } from '../routes';\n\nimport { loadStripe } from '@stripe/stripe-js';\nimport mimc from '../public/mimc.ts';\nimport { calculateProof } from '../public/prover.js';\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nconst stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\nconst STATUS_PENDING = \"processing\";\nconst STATUS_SUCCESS = \"verified\";\nconst STATUS_ERROR = \"?\";\nconst STATUS_NOT_STARTED = \"not_submitted\";\n\nclass CampaignIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      errorMessage: '',\n      errorTrue: false,\n      loaderActive: false,\n      // eth\n      accountAlreadyVerified: false,\n      account: \"No account\",\n      // stripe\n      clientSecret: null,\n      stripe: null,\n      verification_status: \"Not started\",\n      verification_session_id: null,\n      sessionIdRandNum: null,\n      sessionIdMimcNum: null,\n      //deposit\n      depositAlreadyPaid: true,\n      depositStatus: null,\n      //login\n      loginDetailsRecieved: false,\n      //zkp\n      mimcHashNumState: null,\n      solidityVerifierProof: null,\n      zkResult: null\n    });\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      // check if metamask installed\n      const metaMaskPresent = await this.checkMetaMask();\n\n      if (!metaMaskPresent) {\n        return;\n      } // checking if account is already verified\n      // at the moment I haven't disabled rest of flow if already verified to make testing easier\n\n\n      const alreadyVerified = await this.checkIfAccountVerified(); // check if deposit is paid\n\n      const paidDeposit = await this.checkDepositPaid(); // if(!paidDeposit) {return;} // this should be live for actual flow\n      // fetching new stripe sesion\n      // await this.createNewStripeSession()\n    });\n\n    _defineProperty(this, \"checkMetaMask\", async () => {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        this.setState({\n          account: accounts[0]\n        });\n        return true;\n      } catch (err) {\n        console.log(\"MetaMask error\");\n        this.setState({\n          errorMessage: \"It looks like you don't have metamask up and running, which you need to use this service\",\n          errorTrue: true\n        });\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"checkIfAccountVerified\", async () => {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        let res = await factory.methods.checkIfAddressVerified().call({\n          from: accounts[0]\n        });\n        this.setState({\n          accountAlreadyVerified: res\n        });\n        return true;\n      } catch (err) {\n        console.log(\"MetMask aerror\");\n        this.setState({\n          errorMessage: \"It looks like you may be on the wrong MetaMask network\",\n          errorTrue: true\n        });\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"checkDepositPaid\", async () => {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        let res = await factory.methods.checkIfDepositPaid().call({\n          from: accounts[0]\n        }); // this should be uncommented eventually as it will block the verifcation button if no deposit is paid\n\n        this.setState({\n          depositAlreadyPaid: res\n        });\n\n        if (res) {\n          this.setState({\n            depositStatus: \"Paid\"\n          });\n        } else {\n          this.setState({\n            depositStatus: \"Not paid\"\n          });\n        }\n\n        return res;\n      } catch (err) {\n        console.log(\"error when initially checking account\");\n        this.setState({\n          errorMessage: \"It looks like there was an error checking if you had paid the deposit\",\n          errorTrue: true\n        });\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"createNewStripeSession\", async () => {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        this.setState({\n          verification_status: \"server checking deposit payment\"\n        });\n        const requestOptions = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            title: 'POST of metamask address',\n            address: accounts[0]\n          })\n        };\n        const response = await fetch('/api/create-verification-session', requestOptions);\n        const data = await response.json();\n        this.setState({\n          clientSecret: data.clientSecret,\n          verification_session_id: data.id\n        }); // fetch('/api/create-verification-session')\n        // .then(res => res.json())\n        // .then(data => this.setState({clientSecret: data.clientSecret, verification_session_id: data.id}))\n\n        this.setState({\n          stripe: await stripePromise\n        });\n      } catch (err) {\n        console.log(\"error when trying to create new verification session\");\n        this.setState({\n          errorMessage: \"It looks like there was an issue creating a new verification session\",\n          errorTrue: true\n        });\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"verifyIdentity\", async event => {\n      event.preventDefault();\n      this.resetError();\n      this.setState({\n        loaderActive: true\n      }); // creating new stripe session on button click\n\n      await this.createNewStripeSession();\n      let {\n        stripe,\n        clientSecret\n      } = this.state;\n\n      if (!stripe || !clientSecret) {\n        this.setState({\n          loaderActive: false,\n          errorTrue: true,\n          errorMessage: \"Stripe not connecting\"\n        });\n        return;\n      } // Show the verification modal.\n\n\n      const {\n        error\n      } = await stripe.verifyIdentity(clientSecret);\n\n      if (error) {\n        console.log('[error]', error);\n      } else {\n        console.log('Verification submitted!');\n        this.pollForStatus();\n      }\n    });\n\n    _defineProperty(this, \"pollForStatus\", async () => {\n      if (this.state.verification_status !== \"passed_database_check\" && this.state.verification_status !== \"failed_database_check\") {\n        setTimeout(this.pollForStatus, 5000);\n        this.fetchStatus();\n      }\n\n      if (this.state.verification_status !== STATUS_PENDING && this.state.verification_status !== STATUS_NOT_STARTED && this.state.verification_status !== \"verified_waiting_for_database_check\") {\n        this.setState({\n          loaderActive: false\n        }); //\n\n        if (this.state.verification_status == \"passed_database_check\") {\n          this.setState({\n            loginDetailsRecieved: true\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"fetchStatus\", async () => {\n      //handle error if session id isn't set\n      fetch('/api/get-verification-session/' + this.state.verification_session_id).then(res => res.json()).then(data => this.setState({\n        verification_status: data.status,\n        sessionIdRandNum: data.randSeededNum,\n        sessionIdMimcNum: data.mimcVal\n      }));\n    });\n\n    _defineProperty(this, \"mimcHashNum\", async () => {\n      const preImage1 = document.getElementById('mimc_num').value;\n      console.log(preImage1);\n      const out = mimc(preImage1);\n      console.log(out.toString());\n      this.setState({\n        mimcHashNumState: out.toString()\n      });\n    });\n\n    _defineProperty(this, \"verifyPreimage\", async () => {\n      const preImage = parseInt(document.getElementById('preImageCredential').value);\n      console.log(preImage);\n      const hash = document.getElementById('mimcHashCredential').value;\n      console.log(hash);\n      const solidityProof = await calculateProof(preImage, hash);\n      this.setState({\n        solidityVerifierProof: solidityProof\n      });\n      console.log(solidityProof);\n    });\n\n    _defineProperty(this, \"submitSolProof\", async () => {\n      // event.preventDefault();\n      this.resetError();\n      this.setState({\n        loaderActive: true\n      }); // CREATING ZKP FROM HASH AND PRE-IMAGE \n\n      this.setState({\n        verification_status: \"Creating ZKP\"\n      });\n      const preImage = parseInt(document.getElementById('preImageCredential').value);\n      console.log(preImage);\n      const hash = document.getElementById('mimcHashCredential').value;\n      console.log(hash);\n      const solidityProof = await calculateProof(preImage, hash); // this.setState({solidityVerifierProof: solidityProof});\n\n      console.log(solidityProof); // SUBMIT ZKP TO CONTRACT  \n\n      this.setState({\n        verification_status: \"Starting ETH transaction\"\n      });\n      const fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n      const pi_a = fullProof[0];\n      const pi_b = fullProof[1];\n      const pi_c = fullProof[2];\n      const inputs = fullProof[3]; // send zk proof to verifyHash function\n\n      try {\n        this.setState({\n          verification_status: \"Submitting ZKP...\"\n        });\n        const accounts = await web3.eth.getAccounts();\n        await factory.methods.verifyHash(pi_a, pi_b, pi_c, inputs).send({\n          from: accounts[0]\n        });\n        console.log(\"submitted zkp successfully\"); // Router.reload(window.location.pathname)\n\n        let res = await factory.methods.checkIfAddressVerified().call({\n          from: accounts[0]\n        });\n        this.setState({\n          zkResult: res.toString()\n        });\n        setTimeout(2000); // set state of session status depending on res\n\n        if (res) {\n          this.setState({\n            verification_status: \"Address is verified\"\n          });\n        } else {\n          this.setState({\n            verification_status: \"Address verification failed\"\n          });\n        }\n      } catch (err) {\n        console.log(\"error in submit sol proof\");\n        this.setState({\n          errorMessage: err.message,\n          errorTrue: true\n        });\n      }\n\n      this.setState({\n        loaderActive: false\n      });\n    });\n\n    _defineProperty(this, \"resetError\", () => {\n      this.setState({\n        errorTrue: false,\n        errorMessage: \"\"\n      });\n    });\n\n    _defineProperty(this, \"sendDeposit\", async () => {\n      this.setState({\n        loaderActive: true\n      });\n\n      try {\n        this.setState({\n          verification_status: \"Sending deposit...\"\n        });\n        const accounts = await web3.eth.getAccounts();\n        await factory.methods.payDeposit().send({\n          from: accounts[0],\n          value: 20 // 20 wei deposit\n\n        });\n        let res = await factory.methods.checkIfDepositPaid().call({\n          from: accounts[0]\n        });\n\n        if (res) {\n          this.setState({\n            verification_status: \"Deposit paid\",\n            depositAlreadyPaid: res\n          });\n        }\n      } catch (err) {\n        console.log(\"error in submit sol proof\");\n        this.setState({\n          errorMessage: err.message,\n          errorTrue: true\n        });\n      }\n\n      this.setState({\n        loaderActive: false\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 50,\n            marginLeft: 200\n          },\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n              children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n                width: 9,\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Verify your identity\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 351,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  primary: true,\n                  disabled: !this.state.depositAlreadyPaid,\n                  onClick: this.verifyIdentity,\n                  children: \"Verify\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 352,\n                  columnNumber: 23\n                }, this), !this.state.depositAlreadyPaid ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"You can't verify your idenity until you have paid a deposit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 356,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    primary: true,\n                    onClick: this.sendDeposit,\n                    children: \"Send deposit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 357,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 355,\n                  columnNumber: 25\n                }, this) : null, /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 361,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Login credentials\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 364,\n                  columnNumber: 23\n                }, this), this.state.loginDetailsRecieved ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: [\"Pre-image: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 368,\n                      columnNumber: 49\n                    }, this), \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 368,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(PreImageButton, {\n                    children: this.state.sessionIdRandNum\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 369,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: [\"Hash: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 371,\n                      columnNumber: 44\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 371,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(HashButton, {\n                    children: this.state.sessionIdMimcNum\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 372,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 367,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"No login details yet...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 374,\n                  columnNumber: 34\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 377,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Create and submit proof\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 379,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: /*#__PURE__*/_jsxDEV(Input, {\n                    id: \"preImageCredential\",\n                    placeholder: \"Pre-image\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 380,\n                    columnNumber: 26\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: /*#__PURE__*/_jsxDEV(Input, {\n                    id: \"mimcHashCredential\",\n                    placeholder: \"Hash\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 381,\n                    columnNumber: 26\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  primary: true,\n                  onClick: this.submitSolProof,\n                  children: \"Send proof\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n                width: 6,\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Status \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 388,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Account: \", this.state.account]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 389,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Verification Session: \", this.state.verification_status, \" \\xA0 \\xA0\", this.state.loaderActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                    active: true,\n                    inline: true,\n                    size: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 393,\n                    columnNumber: 29\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Deposit: \", this.state.depositStatus]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 396,\n                  columnNumber: 27\n                }, this), this.state.errorTrue ? /*#__PURE__*/_jsxDEV(Message, {\n                  negative: true,\n                  children: [/*#__PURE__*/_jsxDEV(Message.Header, {\n                    children: \"Error\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 400,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: this.state.errorMessage\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 401,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 399,\n                  columnNumber: 27\n                }, this) : null, this.state.accountAlreadyVerified ? /*#__PURE__*/_jsxDEV(\"h3\", {\n                  style: {\n                    color: \"rgb(83, 193, 77)\"\n                  },\n                  children: \"***Looks like your account is already verified***\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 406,\n                  columnNumber: 29\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default CampaignIndex;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/pages/index.js"],"names":["React","Component","Message","Button","Input","Loader","Grid","factory","Layout","web3","loadStripe","mimc","calculateProof","PreImageButton","HashButton","stripePromise","STATUS_PENDING","STATUS_SUCCESS","STATUS_ERROR","STATUS_NOT_STARTED","CampaignIndex","errorMessage","errorTrue","loaderActive","accountAlreadyVerified","account","clientSecret","stripe","verification_status","verification_session_id","sessionIdRandNum","sessionIdMimcNum","depositAlreadyPaid","depositStatus","loginDetailsRecieved","mimcHashNumState","solidityVerifierProof","zkResult","metaMaskPresent","checkMetaMask","alreadyVerified","checkIfAccountVerified","paidDeposit","checkDepositPaid","accounts","eth","getAccounts","setState","err","console","log","res","methods","checkIfAddressVerified","call","from","checkIfDepositPaid","requestOptions","method","headers","body","JSON","stringify","title","address","response","fetch","data","json","id","event","preventDefault","resetError","createNewStripeSession","state","error","verifyIdentity","pollForStatus","setTimeout","fetchStatus","then","status","randSeededNum","mimcVal","preImage1","document","getElementById","value","out","toString","preImage","parseInt","hash","solidityProof","fullProof","parse","pi_a","pi_b","pi_c","inputs","verifyHash","send","message","payDeposit","render","marginTop","marginLeft","sendDeposit","submitSolProof","color"],"mappings":"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","sourcesContent":["// require('dotenv').config();\n\nimport React, { Component } from \"react\";\nimport { Message, Button, Input, Loader, Grid } from \"semantic-ui-react\";\nimport factory from \"../ethereum/verification\";\n\nimport Layout from \"../components/Layout\";\nimport web3 from '../ethereum/web3'\n// import { Router } from '../routes';\nimport {loadStripe} from '@stripe/stripe-js';\nimport mimc from '../public/mimc.ts';\n\nimport { calculateProof } from '../public/prover.js'\n\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\n\nconst stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n\nconst STATUS_PENDING = \"processing\"\nconst STATUS_SUCCESS = \"verified\";\nconst STATUS_ERROR = \"?\"\nconst STATUS_NOT_STARTED = \"not_submitted\";\n\nclass CampaignIndex extends Component {\n \n   state = {\n    errorMessage: '',\n    errorTrue: false,\n    loaderActive: false,\n    // eth\n    accountAlreadyVerified: false,\n    account: \"No account\",\n    // stripe\n    clientSecret: null,\n    stripe: null,\n    verification_status: \"Not started\",\n    verification_session_id: null,\n    sessionIdRandNum: null,\n    sessionIdMimcNum: null,\n    //deposit\n    depositAlreadyPaid: true,\n    depositStatus: null,\n    //login\n    loginDetailsRecieved: false,\n    //zkp\n    mimcHashNumState:null,\n    solidityVerifierProof:null,\n    zkResult: null,\n  };  \n\n  componentDidMount = async () => {\n    // check if metamask installed\n    const metaMaskPresent = await this.checkMetaMask();\n    if(!metaMaskPresent) {return;}\n\n    // checking if account is already verified\n    // at the moment I haven't disabled rest of flow if already verified to make testing easier\n    const alreadyVerified = await this.checkIfAccountVerified();\n\n    // check if deposit is paid\n    const paidDeposit = await this.checkDepositPaid();\n    // if(!paidDeposit) {return;} // this should be live for actual flow\n    \n    // fetching new stripe sesion\n    // await this.createNewStripeSession()\n\n\n  }\n\n  checkMetaMask = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n      this.setState({account: accounts[0]})\n      return true;\n\n    } catch (err) {\n        console.log(\"MetaMask error\")\n        this.setState({ \n          errorMessage: \"It looks like you don't have metamask up and running, which you need to use this service\", \n          errorTrue: true });\n        return false;\n    }\n  }\n\n  checkIfAccountVerified = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n      let res = await factory.methods\n        .checkIfAddressVerified()\n        .call({\n            from: accounts[0]\n      });\n      this.setState({accountAlreadyVerified: res});\n      return true;\n\n    } catch (err) {\n        console.log(\"MetMask aerror\")\n        this.setState({ \n          errorMessage: \"It looks like you may be on the wrong MetaMask network\", \n          errorTrue: true });\n        return false;\n    }\n  }\n\n  checkDepositPaid = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n      let res = await factory.methods\n        .checkIfDepositPaid()\n        .call({\n            from: accounts[0]\n      });\n      // this should be uncommented eventually as it will block the verifcation button if no deposit is paid\n      this.setState({depositAlreadyPaid: res});\n\n      if(res) {\n        this.setState({depositStatus: \"Paid\"})\n      } else {\n        this.setState({depositStatus: \"Not paid\"})\n      }\n      return res;\n\n    } catch (err) {\n        console.log(\"error when initially checking account\")\n        this.setState({ \n          errorMessage: \"It looks like there was an error checking if you had paid the deposit\", \n          errorTrue: true });\n        return false;\n    } \n  }\n\n  createNewStripeSession = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n\n      this.setState({ verification_status: \"server checking deposit payment\" })\n\n      const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ title: 'POST of metamask address',address: accounts[0] })\n      };\n      const response = await fetch('/api/create-verification-session', requestOptions);\n      const data = await response.json();\n      this.setState({clientSecret: data.clientSecret, verification_session_id: data.id})\n\n      // fetch('/api/create-verification-session')\n      // .then(res => res.json())\n      // .then(data => this.setState({clientSecret: data.clientSecret, verification_session_id: data.id}))\n\n      this.setState({ stripe: await stripePromise })\n    } catch (err) {\n      console.log(\"error when trying to create new verification session\")\n      this.setState({ \n        errorMessage: \"It looks like there was an issue creating a new verification session\", \n        errorTrue: true });\n      return false;\n    }\n\n  }\n\n\n  verifyIdentity = async (event) => {\n    event.preventDefault();\n\n    this.resetError()\n    this.setState({ loaderActive: true});\n\n    // creating new stripe session on button click\n    await this.createNewStripeSession();\n\n    let { stripe, clientSecret } = this.state;\n    \n    if (!stripe || !clientSecret) {\n      this.setState({ loaderActive: false, errorTrue: true, errorMessage: \"Stripe not connecting\"});\n      return;\n    }\n\n    // Show the verification modal.\n    const { error } = await stripe.verifyIdentity(clientSecret);\n    \n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('Verification submitted!');\n      this.pollForStatus();\n    }\n\n  }\n\n  pollForStatus = async() => {\n\n    if(this.state.verification_status !== \"passed_database_check\" && this.state.verification_status !== \"failed_database_check\") {\n      setTimeout(this.pollForStatus, 5000)\n      this.fetchStatus()\n    }\n    if(this.state.verification_status !== STATUS_PENDING && \n        this.state.verification_status !== STATUS_NOT_STARTED && \n        this.state.verification_status !== \"verified_waiting_for_database_check\") \n        {\n          this.setState({ loaderActive: false});\n          //\n          if(this.state.verification_status == \"passed_database_check\") {\n            this.setState({loginDetailsRecieved: true});\n        }\n    }\n\n  }\n\nfetchStatus = async () => {\n    //handle error if session id isn't set\n    fetch('/api/get-verification-session/' + this.state.verification_session_id)\n      .then(res => res.json())\n      .then(data => this.setState({\n        verification_status: data.status, \n        sessionIdRandNum: data.randSeededNum,\n        sessionIdMimcNum: data.mimcVal,\n      }))\n  }\n\nmimcHashNum = async () => {\n const preImage1 = document.getElementById('mimc_num').value\n console.log(preImage1)\n const out = mimc(preImage1);\n console.log(out.toString())\n this.setState({mimcHashNumState: out.toString()});\n\n}\n\nverifyPreimage = async() => {\n  const preImage = parseInt(document.getElementById('preImageCredential').value);\n  console.log(preImage)\n  const hash = document.getElementById('mimcHashCredential').value;\n  console.log(hash)\n  const solidityProof = await calculateProof(preImage, hash);\n  this.setState({solidityVerifierProof: solidityProof});\n  console.log(solidityProof)\n}\n\nsubmitSolProof = async () => {\n  // event.preventDefault();\n  this.resetError()\n  this.setState({ loaderActive: true});\n\n  // CREATING ZKP FROM HASH AND PRE-IMAGE \n  this.setState({verification_status: \"Creating ZKP\"})\n  const preImage = parseInt(document.getElementById('preImageCredential').value);\n  console.log(preImage)\n  const hash = document.getElementById('mimcHashCredential').value;\n  console.log(hash)\n  const solidityProof = await calculateProof(preImage, hash);\n  // this.setState({solidityVerifierProof: solidityProof});\n  console.log(solidityProof)\n\n  // SUBMIT ZKP TO CONTRACT  \n  this.setState({verification_status: \"Starting ETH transaction\"})\n\n  const fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n\n  const pi_a = fullProof[0]\n  const pi_b = fullProof[1]\n  const pi_c = fullProof[2]\n  const inputs = fullProof[3]\n  \n\n  // send zk proof to verifyHash function\n  try {\n      this.setState({verification_status: \"Submitting ZKP...\"})\n      const accounts = await web3.eth.getAccounts();\n      await factory.methods\n          .verifyHash(pi_a,pi_b,pi_c,inputs)\n          .send({\n              from: accounts[0]\n      });\n      \n      console.log(\"submitted zkp successfully\")\n      // Router.reload(window.location.pathname)\n\n      let res = await factory.methods\n          .checkIfAddressVerified()\n          .call({\n              from: accounts[0]\n      });\n      this.setState({zkResult: res.toString()});\n\n      setTimeout(2000);\n\n      // set state of session status depending on res\n      if(res) {\n        this.setState({verification_status: \"Address is verified\"})\n      } else {\n        this.setState({verification_status: \"Address verification failed\"})\n      }\n\n\n  } catch (err) {\n      console.log(\"error in submit sol proof\")\n      this.setState({ errorMessage: err.message, errorTrue: true });\n  }\n\n  this.setState({loaderActive: false});\n}\n\n\nresetError = () => {\n  this.setState({errorTrue: false, errorMessage: \"\"});\n}\n\nsendDeposit = async () => {\n  this.setState({ loaderActive: true});\n\n  try {\n    this.setState({verification_status: \"Sending deposit...\"})\n    const accounts = await web3.eth.getAccounts();\n    await factory.methods\n        .payDeposit()\n        .send({\n            from: accounts[0],\n            value: 20 // 20 wei deposit\n    });\n\n    let res = await factory.methods\n        .checkIfDepositPaid()\n        .call({\n            from: accounts[0]\n    });\n    \n    if (res) {\n        this.setState({verification_status: \"Deposit paid\",depositAlreadyPaid: res})\n    }\n\n  } catch (err) {\n      console.log(\"error in submit sol proof\")\n      this.setState({ errorMessage: err.message, errorTrue: true });\n  }\nthis.setState({ loaderActive: false});\n\n}\n\n  render() {\n    return (\n        <Layout >\n            <div>\n              <div style={{marginTop: 50, marginLeft: 200}}>\n\n              <Grid>\n                <Grid.Row>\n                    <Grid.Column width={9}>\n                      {/* --------------------VERIFY IDENTITY--------------------- */}\n                      <h2>Verify your identity</h2>\n                      <Button primary disabled={!this.state.depositAlreadyPaid} onClick={this.verifyIdentity}>Verify</Button>\n                      {\n                        !this.state.depositAlreadyPaid ?\n                        <div>\n                          <p>You can't verify your idenity until you have paid a deposit</p>\n                          <Button primary onClick={this.sendDeposit}>Send deposit</Button> \n                        </div>\n                        : null\n                      }\n                      <hr/>\n                      \n                      {/* --------------------LOGIN CREDENTIALS--------------------- */}\n                      <h2>Login credentials</h2>\n                      {\n                      this.state.loginDetailsRecieved ?\n                        <div>\n                          <h3>Pre-image: &nbsp; <br></br> </h3> \n                          <PreImageButton>{this.state.sessionIdRandNum}</PreImageButton>\n                      \n                          <h3>Hash: &nbsp; <br></br></h3>\n                          <HashButton>{this.state.sessionIdMimcNum}</HashButton>\n\n                        </div> : <h4>No login details yet...</h4>\n                      }\n                                      \n                      <hr/>\n                      {/* ---------------------SUBMIT PROOF---------------------- */}\n                      <h2>Create and submit proof</h2>\n                      <p><Input id=\"preImageCredential\" placeholder=\"Pre-image\"></Input></p>\n                      <p><Input id=\"mimcHashCredential\" placeholder=\"Hash\"></Input></p>\n                      <Button primary onClick={this.submitSolProof} >Send proof</Button> \n                        \n                    \n                    </Grid.Column>\n                    <Grid.Column width={6}>\n                        {/* --------------------SESSION STATUS--------------------- */}\n                        <h2>Status </h2>\n                          <h3>Account: {this.state.account}</h3>\n                          <h3>Verification Session: {this.state.verification_status} &nbsp; &nbsp;\n                          {\n                            this.state.loaderActive ?\n                            <Loader active inline size=\"small\" />: null\n                          }\n                          </h3>\n                          <h3>Deposit: {this.state.depositStatus}</h3>\n                          {\n                          this.state.errorTrue ?\n                          <Message negative>\n                            <Message.Header>Error</Message.Header>\n                            <p>{this.state.errorMessage}</p>\n                          </Message> : null\n                          }\n                          {\n                            this.state.accountAlreadyVerified ?\n                            <h3 style={{color:\"rgb(83, 193, 77)\"}}>***Looks like your account is already verified***</h3> : null\n                          }\n                          \n                    </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n                \n            </div>\n            </div>\n        </Layout>\n    );\n  }\n}\n\nexport default CampaignIndex;\n"]},"metadata":{},"sourceType":"module"}