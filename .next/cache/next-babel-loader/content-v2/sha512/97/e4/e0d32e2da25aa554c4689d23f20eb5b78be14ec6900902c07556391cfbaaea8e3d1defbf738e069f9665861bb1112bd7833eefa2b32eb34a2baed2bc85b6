{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/pages/index.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Message, Button, Input, Loader, Grid } from \"semantic-ui-react\";\nimport { Router } from '../routes';\nimport Layout from \"../components/Layout\";\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nimport AccountMessage from \"../components/Accounts\";\nimport OptionButton from \"../components/OptionButton\";\nimport OpenVerificationMessage from \"../components/OpenVerificationMessage\";\nimport factory from \"../ethereum/verification\";\nimport Web3 from \"web3\"; // use this to have connect account button\n\nlet web3;\nimport mimc from '../public/mimc.ts';\nimport { calculateProof } from '../public/prover.js';\nimport { loadStripe } from '@stripe/stripe-js';\nconst stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n\nclass CampaignIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      errorMessage: '',\n      errorTrue: false,\n      verificationType: \"anonymous\",\n      // eth\n      accountAlreadyVerified: false,\n      account: \"No account\",\n      network: \"No network\",\n      accountDetailsRetrieved: false,\n      // stripe\n      clientSecret: null,\n      stripe: null,\n      verification_session_id: null,\n      sessionIdRandNum: null,\n      sessionIdMimcNum: null,\n      //deposit\n      depositAlreadyPaid: false,\n      deposit_Status: \"Not paid\",\n      loaderDepositActive: false,\n      // verification\n      verification_status: \"Not started\",\n      loaderVerificationActive: false,\n      // proof\n      proof_status: \"Not sent\",\n      loaderProofActive: false,\n      //login\n      loginDetailsRecieved: false,\n      // this is for if they get details in current session\n      hasLoginDetails: false,\n      // this is for if they already have details\n      //zkp\n      mimcHashNumState: null,\n      solidityVerifierProof: null,\n      zkResult: null,\n      // thing test\n      thingBool: true,\n      thingVal: \"hi\"\n    });\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      // check if metamask installed and account connected\n      const metaMaskPresent = await this.connectMetaMaskAccountInitialCheck();\n\n      if (!metaMaskPresent) {\n        return;\n      } // checking if account is already verified\n      // at the moment I haven't disabled rest of flow if already verified to make testing easier\n\n\n      const alreadyVerified = await this.checkIfAccountVerified(); // check if deposit is paid\n\n      const paidDeposit = await this.checkDepositPaid(); // if(!paidDeposit) {return;} // this should be live for actual flow\n    });\n\n    _defineProperty(this, \"resetError\", () => {\n      this.setState({\n        errorTrue: false,\n        errorMessage: \"\"\n      });\n    });\n\n    _defineProperty(this, \"changeVerificationType\", () => {\n      if (this.state.verificationType == \"anonymous\") {\n        console.log(\"changing verification type to open\");\n        this.setState({\n          verificationType: \"open\"\n        });\n      } else {\n        console.log(\"changing verification type to anonymous\");\n        this.setState({\n          verificationType: \"anonymous\"\n        });\n      }\n    });\n\n    _defineProperty(this, \"connectMetaMaskAccountInitialCheck\", async () => {\n      if (false && typeof window.ethereum !== \"undefined\") {\n        // We are in the browser and metamask is running.\n        web3 = new Web3(window.ethereum);\n        var address = await ethereum.selectedAddress;\n        var network = ethereum.networkVersion;\n        console.log(\"account\", address);\n        console.log(\"network\", network);\n        const net = this.networkIntToName(network);\n        this.setState({\n          network: net,\n          account: address\n        });\n\n        if (address != null) {\n          console.log(\"setting retireved\");\n          this.setState({\n            accountDetailsRetrieved: true\n          });\n          return true;\n        }\n\n        return false;\n      } else {\n        // We are on the server *OR* the user is not running metamask\n        const provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\");\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"connectMetaMaskAccount\", async () => {\n      // let web3;\n      if (false && typeof window.ethereum !== \"undefined\") {\n        // We are in the browser and metamask is running.\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        web3 = new Web3(window.ethereum);\n        var address = await ethereum.selectedAddress;\n        var network = ethereum.networkVersion;\n        console.log(\"account\", address);\n        console.log(\"network\", network);\n        const net = this.networkIntToName(network);\n        this.setState({\n          network: net,\n          account: address\n        });\n\n        if (address != null) {\n          this.setState({\n            accountDetailsRetrieved: true\n          });\n          await this.checkIfAccountVerified();\n          await this.checkDepositPaid();\n        }\n      } else {\n        // We are on the server *OR* the user is not running metamask\n        const provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\");\n      }\n    });\n\n    _defineProperty(this, \"networkIntToName\", networkId => {\n      switch (networkId) {\n        case \"1\":\n          return \"Main\";\n\n        case \"3\":\n          return \"Ropsten\";\n\n        case \"4\":\n          return \"Rinkeby\";\n\n        case \"42\":\n          return \"Kovan\";\n\n        case \"5\":\n          return \"Goerli\";\n\n        default:\n          return \"Custom\";\n      }\n    });\n\n    _defineProperty(this, \"checkIfAccountVerified\", async () => {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        let res = await factory.methods.checkIfAddressVerified().call({\n          from: accounts[0]\n        });\n        this.setState({\n          accountAlreadyVerified: res\n        });\n        return true;\n      } catch (err) {\n        console.log(\"MetMask aerror\");\n        this.setState({\n          errorMessage: \"It looks like you may be on the wrong MetaMask network\",\n          errorTrue: true\n        });\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"checkDepositPaid\", async () => {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        let res = await factory.methods.checkIfDepositPaid().call({\n          from: accounts[0]\n        }); // this should be uncommented eventually as it will block the verifcation button if no deposit is paid\n\n        this.setState({\n          depositAlreadyPaid: res\n        });\n\n        if (res) {\n          this.setState({\n            deposit_Status: \"Paid\"\n          });\n        } else {\n          this.setState({\n            deposit_Status: \"Not paid\"\n          });\n        }\n\n        return res;\n      } catch (err) {\n        console.log(\"error when initially checking account\");\n        this.setState({\n          errorMessage: \"It looks like there was an error checking if you had paid the deposit\",\n          errorTrue: true\n        });\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"sendDeposit\", async () => {\n      this.setState({\n        loaderDepositActive: true\n      });\n\n      try {\n        this.setState({\n          deposit_Status: \"Sending deposit...\"\n        });\n        const accounts = await web3.eth.getAccounts();\n        await factory.methods.payDeposit().send({\n          from: accounts[0],\n          value: 20 // 20 wei deposit\n\n        });\n        let res = await factory.methods.checkIfDepositPaid().call({\n          from: accounts[0]\n        });\n\n        if (res) {\n          this.setState({\n            depositAlreadyPaid: res,\n            deposit_Status: \"Paid\"\n          });\n        }\n      } catch (err) {\n        console.log(\"error in submit sol proof\");\n        this.setState({\n          errorMessage: err.message,\n          errorTrue: true\n        });\n      }\n\n      this.setState({\n        loaderDepositActive: false\n      });\n    });\n\n    _defineProperty(this, \"createNewStripeSession\", async () => {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        this.setState({\n          verification_status: \"server checking deposit payment\"\n        });\n        const requestOptions = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            title: 'POST of metamask address',\n            address: accounts[0],\n            verificationType: this.state.verificationType\n          })\n        };\n        const response = await fetch('/api/create-verification-session', requestOptions);\n        const data = await response.json();\n        this.setState({\n          clientSecret: data.clientSecret,\n          verification_session_id: data.id\n        }); // fetch('/api/create-verification-session')\n        // .then(res => res.json())\n        // .then(data => this.setState({clientSecret: data.clientSecret, verification_session_id: data.id}))\n\n        this.setState({\n          stripe: await stripePromise\n        });\n      } catch (err) {\n        console.log(\"error when trying to create new verification session\");\n        this.setState({\n          errorMessage: \"It looks like there was an issue creating a new verification session\",\n          errorTrue: true\n        });\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"verifyIdentity\", async event => {\n      event.preventDefault();\n      this.resetError();\n      this.setState({\n        loaderVerificationActive: true\n      }); // creating new stripe session on button click\n\n      await this.createNewStripeSession();\n      let {\n        stripe,\n        clientSecret\n      } = this.state;\n\n      if (!stripe || !clientSecret) {\n        this.setState({\n          loaderVerificationActive: false,\n          errorTrue: true,\n          errorMessage: \"Stripe not connecting\"\n        });\n        return;\n      } // Show the verification modal.\n\n\n      const {\n        error\n      } = await stripe.verifyIdentity(clientSecret);\n\n      if (error) {\n        console.log('[error]', error);\n      } else {\n        console.log('Verification submitted!');\n        this.pollForStatus();\n      }\n    });\n\n    _defineProperty(this, \"pollForStatus\", async () => {\n      if (this.state.verification_status !== \"passed_database_check\" && this.state.verification_status !== \"failed_database_check\") {\n        setTimeout(this.pollForStatus, 5000);\n        this.fetchStatus();\n      }\n\n      if (this.state.verification_status !== \"processing\" && this.state.verification_status !== \"not_submitted\" && this.state.verification_status !== \"verified_waiting_for_database_check\" && this.state.verification_status !== \"server checking deposit payment\") {\n        this.setState({\n          loaderVerificationActive: false\n        });\n\n        if (this.state.verification_status == \"passed_database_check\") {\n          this.setState({\n            loginDetailsRecieved: true,\n            hasLoginDetails: true\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"fetchStatus\", async () => {\n      //handle error if session id isn't set\n      fetch('/api/get-verification-session/' + this.state.verification_session_id).then(res => res.json()).then(data => this.setState({\n        verification_status: data.status,\n        sessionIdRandNum: data.randSeededNum,\n        sessionIdMimcNum: data.mimcVal\n      }));\n    });\n\n    _defineProperty(this, \"hasLoginCredentials\", () => {\n      this.setState({\n        hasLoginDetails: true\n      });\n    });\n\n    _defineProperty(this, \"mimcHashNum\", async () => {\n      const preImage1 = document.getElementById('mimc_num').value;\n      console.log(preImage1);\n      const out = mimc(preImage1);\n      console.log(out.toString());\n      this.setState({\n        mimcHashNumState: out.toString()\n      });\n    });\n\n    _defineProperty(this, \"verifyPreimage\", async () => {\n      const preImage = parseInt(document.getElementById('preImageCredential').value);\n      console.log(preImage);\n      const hash = document.getElementById('mimcHashCredential').value;\n      console.log(hash);\n      const solidityProof = await calculateProof(preImage, hash);\n      this.setState({\n        solidityVerifierProof: solidityProof\n      });\n      console.log(solidityProof);\n    });\n\n    _defineProperty(this, \"submitSolProof\", async () => {\n      // event.preventDefault();\n      this.resetError();\n      this.setState({\n        loaderProofActive: true\n      }); // CREATING ZKP FROM HASH AND PRE-IMAGE \n\n      this.setState({\n        proof_status: \"Creating ZKP\"\n      });\n      const preImage = parseInt(document.getElementById('preImageCredential').value);\n      console.log(preImage);\n      const hash = document.getElementById('mimcHashCredential').value;\n      console.log(hash);\n      const solidityProof = await calculateProof(preImage, hash); // this.setState({solidityVerifierProof: solidityProof});\n\n      console.log(solidityProof); // SUBMIT ZKP TO CONTRACT  \n\n      this.setState({\n        proof_status: \"Starting ETH transaction\"\n      });\n      const fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n      const pi_a = fullProof[0];\n      const pi_b = fullProof[1];\n      const pi_c = fullProof[2];\n      const inputs = fullProof[3]; // send zk proof to verifyHash function\n\n      try {\n        this.setState({\n          proof_status: \"Submitting ZKP...\"\n        });\n        const accounts = await web3.eth.getAccounts();\n        await factory.methods.verifyHash(pi_a, pi_b, pi_c, inputs).send({\n          from: accounts[0]\n        });\n        console.log(\"submitted zkp successfully\"); // Router.reload(window.location.pathname)\n\n        let res = await factory.methods.checkIfAddressVerified().call({\n          from: accounts[0]\n        });\n        this.setState({\n          zkResult: res.toString(),\n          accountAlreadyVerified: res\n        });\n      } catch (err) {\n        console.log(\"error in submit sol proof\");\n        this.setState({\n          errorMessage: err.message,\n          errorTrue: true\n        });\n      }\n\n      this.setState({\n        loaderProofActive: false\n      });\n    });\n\n    _defineProperty(this, \"changeThing\", () => {\n      if (this.state.thingBool) {\n        this.setState({\n          thingVal: \"bye\",\n          thingBool: false\n        });\n      } else {\n        this.setState({\n          thingVal: \"hi\",\n          thingBool: true\n        });\n      }\n    });\n  }\n\n  renderThing() {\n    if (this.state.thingBool == true) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.changeThing,\n        children: \"hi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.changeThing,\n        children: \"bye\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  renderOpenVerificationMessage() {\n    if (this.state.verificationType == \"open\") {\n      return /*#__PURE__*/_jsxDEV(OpenVerificationMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this);\n    } else {\n      return null;\n    }\n  }\n\n  renderAccountInfo() {\n    if (!this.state.accountDetailsRetrieved) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.connectMetaMaskAccount,\n        className: \"button\",\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(AccountMessage, {\n        network: this.state.network,\n        account: this.state.account,\n        verified: this.state.accountAlreadyVerified\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 25\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: this.changeVerificationType,\n            style: {\n              marginBottom: 25\n            },\n            children: /*#__PURE__*/_jsxDEV(OptionButton, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 15\n          }, this), this.renderOpenVerificationMessage(), /*#__PURE__*/_jsxDEV(Grid, {\n            children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n              width: 6,\n              floated: \"left\",\n              className: \"statusBox\",\n              children: [this.renderThing(), this.state.thingVal, /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Status \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Account:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 505,\n                columnNumber: 27\n              }, this), this.renderAccountInfo(), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"Deposit: \", this.state.deposit_Status, \" \\xA0 \\xA0\", this.state.loaderDepositActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                  active: true,\n                  inline: true,\n                  size: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 512,\n                  columnNumber: 29\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 27\n              }, this), !this.state.depositAlreadyPaid && this.state.accountDetailsRetrieved ? /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: this.sendDeposit,\n                disabled: !this.state.accountDetailsRetrieved,\n                className: \"button\",\n                children: \"Send deposit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 518,\n                columnNumber: 29\n              }, this) : null, /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"Verification Session: \", this.state.verification_status, \" \\xA0 \\xA0\", this.state.loaderVerificationActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                  active: true,\n                  inline: true,\n                  size: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 528,\n                  columnNumber: 29\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 525,\n                columnNumber: 27\n              }, this), this.state.depositAlreadyPaid ? /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: this.verifyIdentity,\n                disabled: !this.state.accountDetailsRetrieved,\n                disabled: !this.state.depositAlreadyPaid,\n                className: \"button\",\n                children: \"Verify\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 533,\n                columnNumber: 29\n              }, this) : null, /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"Proof: \", this.state.proof_status, \" \\xA0 \\xA0\", this.state.loaderProofActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                  active: true,\n                  inline: true,\n                  size: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 544,\n                  columnNumber: 29\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 541,\n                columnNumber: 27\n              }, this), this.state.accountDetailsRetrieved ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: !this.state.hasLoginDetails ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: this.hasLoginCredentials,\n                  disabled: !this.state.accountDetailsRetrieved,\n                  className: \"button\",\n                  children: \"If you already have login credentials click here\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 554,\n                  columnNumber: 31\n                }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: this.submitSolProof,\n                  disabled: !this.state.accountDetailsRetrieved,\n                  className: \"button\",\n                  children: \"Send proof\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 559,\n                  columnNumber: 31\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 29\n              }, this) : null, this.state.errorTrue ? /*#__PURE__*/_jsxDEV(Message, {\n                negative: true,\n                children: [/*#__PURE__*/_jsxDEV(Message.Header, {\n                  children: \"Error\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 572,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: this.state.errorMessage\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 573,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 571,\n                columnNumber: 27\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 17\n            }, this), this.state.verificationType !== \"open\" ? /*#__PURE__*/_jsxDEV(Grid.Column, {\n              width: 9,\n              floated: \"right\",\n              className: \"statusBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Login credentials\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 585,\n                columnNumber: 23\n              }, this), // !this.state.loginDetailsRecieved ?\n              this.state.loginDetailsRecieved ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Pre-image: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 590,\n                    columnNumber: 49\n                  }, this), \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 590,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(PreImageButton, {\n                  children: this.state.sessionIdRandNum\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 591,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Hash: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 593,\n                    columnNumber: 44\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 593,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(HashButton, {\n                  children: this.state.sessionIdMimcNum\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 595,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 589,\n                columnNumber: 25\n              }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"No login details yet...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 597,\n                columnNumber: 34\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 600,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Create and submit proof\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 603,\n                columnNumber: 23\n              }, this), this.state.hasLoginDetails ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: /*#__PURE__*/_jsxDEV(Input, {\n                    id: \"preImageCredential\",\n                    placeholder: \"Pre-image\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 607,\n                    columnNumber: 26\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 607,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: /*#__PURE__*/_jsxDEV(Input, {\n                    id: \"mimcHashCredential\",\n                    placeholder: \"Hash\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 608,\n                    columnNumber: 26\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 608,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 606,\n                columnNumber: 23\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 582,\n              columnNumber: 21\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default CampaignIndex;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/pages/index.js"],"names":["React","Component","Message","Button","Input","Loader","Grid","Router","Layout","PreImageButton","HashButton","AccountMessage","OptionButton","OpenVerificationMessage","factory","Web3","web3","mimc","calculateProof","loadStripe","stripePromise","CampaignIndex","errorMessage","errorTrue","verificationType","accountAlreadyVerified","account","network","accountDetailsRetrieved","clientSecret","stripe","verification_session_id","sessionIdRandNum","sessionIdMimcNum","depositAlreadyPaid","deposit_Status","loaderDepositActive","verification_status","loaderVerificationActive","proof_status","loaderProofActive","loginDetailsRecieved","hasLoginDetails","mimcHashNumState","solidityVerifierProof","zkResult","thingBool","thingVal","metaMaskPresent","connectMetaMaskAccountInitialCheck","alreadyVerified","checkIfAccountVerified","paidDeposit","checkDepositPaid","setState","state","console","log","window","ethereum","address","selectedAddress","networkVersion","net","networkIntToName","provider","providers","HttpProvider","request","method","networkId","accounts","eth","getAccounts","res","methods","checkIfAddressVerified","call","from","err","checkIfDepositPaid","payDeposit","send","value","message","requestOptions","headers","body","JSON","stringify","title","response","fetch","data","json","id","event","preventDefault","resetError","createNewStripeSession","error","verifyIdentity","pollForStatus","setTimeout","fetchStatus","then","status","randSeededNum","mimcVal","preImage1","document","getElementById","out","toString","preImage","parseInt","hash","solidityProof","fullProof","parse","pi_a","pi_b","pi_c","inputs","verifyHash","renderThing","changeThing","renderOpenVerificationMessage","renderAccountInfo","connectMetaMaskAccount","render","marginTop","changeVerificationType","marginBottom","sendDeposit","hasLoginCredentials","submitSolProof"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Message, Button, Input, Loader, Grid } from \"semantic-ui-react\";\nimport { Router } from '../routes';\n\nimport Layout from \"../components/Layout\";\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nimport AccountMessage from \"../components/Accounts\";\nimport OptionButton from \"../components/OptionButton\";\nimport OpenVerificationMessage from \"../components/OpenVerificationMessage\";\n\nimport factory from \"../ethereum/verification\";\nimport Web3 from \"web3\"; // use this to have connect account button\nlet web3; \n\nimport mimc from '../public/mimc.ts';\nimport { calculateProof } from '../public/prover.js'\n\nimport {loadStripe} from '@stripe/stripe-js';\n\nconst stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n\n\nclass CampaignIndex extends Component {\n \n   state = {\n    errorMessage: '',\n    errorTrue: false,\n    verificationType: \"anonymous\",   \n    // eth\n    accountAlreadyVerified: false,\n    account: \"No account\",\n    network: \"No network\",\n    accountDetailsRetrieved: false,\n    // stripe\n    clientSecret: null,\n    stripe: null,\n    verification_session_id: null,\n    sessionIdRandNum: null,\n    sessionIdMimcNum: null,\n    //deposit\n    depositAlreadyPaid: false,\n    deposit_Status: \"Not paid\",\n    loaderDepositActive: false,\n    // verification\n    verification_status: \"Not started\",\n    loaderVerificationActive: false,\n    // proof\n    proof_status: \"Not sent\",\n    loaderProofActive: false,\n    //login\n    loginDetailsRecieved: false, // this is for if they get details in current session\n    hasLoginDetails: false, // this is for if they already have details\n    //zkp\n    mimcHashNumState:null,\n    solidityVerifierProof:null,\n    zkResult: null,\n    // thing test\n    thingBool: true,\n    thingVal: \"hi\",\n  };  \n\n  componentDidMount = async () => {\n    // check if metamask installed and account connected\n    const metaMaskPresent = await this.connectMetaMaskAccountInitialCheck();\n    if(!metaMaskPresent) {return;}\n\n    // checking if account is already verified\n    // at the moment I haven't disabled rest of flow if already verified to make testing easier\n    const alreadyVerified = await this.checkIfAccountVerified();\n\n    // check if deposit is paid\n    const paidDeposit = await this.checkDepositPaid();\n    // if(!paidDeposit) {return;} // this should be live for actual flow\n    \n  }\n\n  resetError = () => {\n    this.setState({errorTrue: false, errorMessage: \"\"});\n  }  \n\n  changeVerificationType = () => {\n    if(this.state.verificationType == \"anonymous\") {\n      console.log(\"changing verification type to open\")\n      this.setState({verificationType: \"open\"})\n    } else {\n      console.log(\"changing verification type to anonymous\")\n      this.setState({verificationType: \"anonymous\"})\n    }\n  }\n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------METAMASK STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n  connectMetaMaskAccountInitialCheck = async () => {\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // We are in the browser and metamask is running.\n      \n      web3 = new Web3(window.ethereum);\n\n      var address = await ethereum.selectedAddress;\n      var network = ethereum.networkVersion;\n\n      console.log(\"account\", address)\n      console.log(\"network\", network)\n\n      const net = this.networkIntToName(network)\n\n      this.setState({network: net, account: address})\n\n      if (address != null) {\n        console.log(\"setting retireved\")\n        this.setState({accountDetailsRetrieved: true})\n        return true\n      }\n      return false\n\n    } else {\n      // We are on the server *OR* the user is not running metamask\n      const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\"\n      );\n      return false\n    }\n  }\n  \n  connectMetaMaskAccount = async () => {\n    // let web3;\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // We are in the browser and metamask is running.\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      \n      web3 = new Web3(window.ethereum);\n\n      var address = await ethereum.selectedAddress;\n      var network = ethereum.networkVersion;\n\n      console.log(\"account\", address)\n      console.log(\"network\", network)\n\n      const net = this.networkIntToName(network)\n\n      this.setState({network: net, account: address})\n\n      if (address != null) {\n        this.setState({accountDetailsRetrieved: true})\n        await this.checkIfAccountVerified()\n        await this.checkDepositPaid()\n      }\n\n    } else {\n      // We are on the server *OR* the user is not running metamask\n      const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\"\n      );\n    }\n  }\n\n  networkIntToName = (networkId) => {\n    switch(networkId) {\n      case \"1\":\n          return \"Main\"\n      case \"3\":\n        return \"Ropsten\"\n      case \"4\":\n        return \"Rinkeby\"\n      case \"42\":\n        return \"Kovan\";\n      case \"5\":\n        return \"Goerli\";\n      default: \n        return \"Custom\";\n    }\n}\n\n\n  checkIfAccountVerified = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n      let res = await factory.methods\n        .checkIfAddressVerified()\n        .call({\n            from: accounts[0]\n      });\n      this.setState({accountAlreadyVerified: res});\n      return true;\n\n    } catch (err) {\n        console.log(\"MetMask aerror\")\n        this.setState({ \n          errorMessage: \"It looks like you may be on the wrong MetaMask network\", \n          errorTrue: true });\n        return false;\n    }\n  }\n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------DEPOSIT STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  checkDepositPaid = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n      let res = await factory.methods\n        .checkIfDepositPaid()\n        .call({\n            from: accounts[0]\n      });\n      // this should be uncommented eventually as it will block the verifcation button if no deposit is paid\n      this.setState({depositAlreadyPaid: res});\n\n      if(res) {\n        this.setState({deposit_Status: \"Paid\"})\n      } else {\n        this.setState({deposit_Status: \"Not paid\"})\n      }\n      return res;\n\n    } catch (err) {\n        console.log(\"error when initially checking account\")\n        this.setState({ \n          errorMessage: \"It looks like there was an error checking if you had paid the deposit\", \n          errorTrue: true });\n        return false;\n    } \n  }\n\n  sendDeposit = async () => {\n    this.setState({ loaderDepositActive: true});\n  \n    try {\n      this.setState({deposit_Status: \"Sending deposit...\"})\n      const accounts = await web3.eth.getAccounts();\n      await factory.methods\n          .payDeposit()\n          .send({\n              from: accounts[0],\n              value: 20 // 20 wei deposit\n      });\n  \n      let res = await factory.methods\n          .checkIfDepositPaid()\n          .call({\n              from: accounts[0]\n      });\n      \n      if (res) {\n          this.setState({depositAlreadyPaid: res, deposit_Status: \"Paid\"})\n      }\n  \n    } catch (err) {\n        console.log(\"error in submit sol proof\")\n        this.setState({ errorMessage: err.message, errorTrue: true });\n    }\n  this.setState({ loaderDepositActive: false});\n  \n  }\n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------STRIPE STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  createNewStripeSession = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n\n      this.setState({ verification_status: \"server checking deposit payment\" })\n\n      const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          title: 'POST of metamask address',\n          address: accounts[0],\n          verificationType: this.state.verificationType })\n      };\n      const response = await fetch('/api/create-verification-session', requestOptions);\n      const data = await response.json();\n      this.setState({clientSecret: data.clientSecret, verification_session_id: data.id})\n\n      // fetch('/api/create-verification-session')\n      // .then(res => res.json())\n      // .then(data => this.setState({clientSecret: data.clientSecret, verification_session_id: data.id}))\n\n      this.setState({ stripe: await stripePromise })\n    } catch (err) {\n      console.log(\"error when trying to create new verification session\")\n      this.setState({ \n        errorMessage: \"It looks like there was an issue creating a new verification session\", \n        errorTrue: true });\n      return false;\n    }\n\n  }\n\n\n  verifyIdentity = async (event) => {\n    event.preventDefault();\n\n    this.resetError()\n    this.setState({ loaderVerificationActive: true});\n\n    // creating new stripe session on button click\n    await this.createNewStripeSession();\n\n    let { stripe, clientSecret } = this.state;\n    \n    if (!stripe || !clientSecret) {\n      this.setState({ loaderVerificationActive: false, errorTrue: true, errorMessage: \"Stripe not connecting\"});\n      return;\n    }\n\n    // Show the verification modal.\n    const { error } = await stripe.verifyIdentity(clientSecret);\n    \n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('Verification submitted!');\n      this.pollForStatus();\n    }\n\n  }\n\n  pollForStatus = async() => {\n\n    if(this.state.verification_status !== \"passed_database_check\" && this.state.verification_status !== \"failed_database_check\") {\n      setTimeout(this.pollForStatus, 5000)\n      this.fetchStatus()\n    }\n    if(this.state.verification_status !== \"processing\" && \n        this.state.verification_status !== \"not_submitted\" && \n        this.state.verification_status !== \"verified_waiting_for_database_check\" &&\n        this.state.verification_status !== \"server checking deposit payment\") \n        {\n          this.setState({ loaderVerificationActive: false});\n          \n          if(this.state.verification_status == \"passed_database_check\") {\n            this.setState({loginDetailsRecieved: true, hasLoginDetails: true});\n        }\n    }\n\n  }\n\nfetchStatus = async () => {\n    //handle error if session id isn't set\n    fetch('/api/get-verification-session/' + this.state.verification_session_id)\n      .then(res => res.json())\n      .then(data => this.setState({\n        verification_status: data.status, \n        sessionIdRandNum: data.randSeededNum,\n        sessionIdMimcNum: data.mimcVal,\n      }))\n  }\n\n\n  //-------------------------------------------------------------------------------------------\n  // ------------------------------------LOGIN DETAILS STUFF------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  hasLoginCredentials = () => {\n    this.setState({hasLoginDetails: true})\n  }\n\n  mimcHashNum = async () => {\n  const preImage1 = document.getElementById('mimc_num').value\n  console.log(preImage1)\n  const out = mimc(preImage1);\n  console.log(out.toString())\n  this.setState({mimcHashNumState: out.toString()});\n\n  }\n\nverifyPreimage = async() => {\n  const preImage = parseInt(document.getElementById('preImageCredential').value);\n  console.log(preImage)\n  const hash = document.getElementById('mimcHashCredential').value;\n  console.log(hash)\n  const solidityProof = await calculateProof(preImage, hash);\n  this.setState({solidityVerifierProof: solidityProof});\n  console.log(solidityProof)\n}\n\nsubmitSolProof = async () => {\n  // event.preventDefault();\n  this.resetError()\n  this.setState({ loaderProofActive: true});\n\n  // CREATING ZKP FROM HASH AND PRE-IMAGE \n  this.setState({proof_status: \"Creating ZKP\"})\n  const preImage = parseInt(document.getElementById('preImageCredential').value);\n  console.log(preImage)\n  const hash = document.getElementById('mimcHashCredential').value;\n  console.log(hash)\n  const solidityProof = await calculateProof(preImage, hash);\n  // this.setState({solidityVerifierProof: solidityProof});\n  console.log(solidityProof)\n\n  // SUBMIT ZKP TO CONTRACT  \n  this.setState({proof_status: \"Starting ETH transaction\"})\n\n  const fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n\n  const pi_a = fullProof[0]\n  const pi_b = fullProof[1]\n  const pi_c = fullProof[2]\n  const inputs = fullProof[3]\n  \n\n  // send zk proof to verifyHash function\n  try {\n      this.setState({proof_status: \"Submitting ZKP...\"})\n      const accounts = await web3.eth.getAccounts();\n      await factory.methods\n          .verifyHash(pi_a,pi_b,pi_c,inputs)\n          .send({\n              from: accounts[0]\n      });\n      \n      console.log(\"submitted zkp successfully\")\n      // Router.reload(window.location.pathname)\n\n      let res = await factory.methods\n          .checkIfAddressVerified()\n          .call({\n              from: accounts[0]\n      });\n      this.setState({zkResult: res.toString(), accountAlreadyVerified: res});\n\n    } catch (err) {\n        console.log(\"error in submit sol proof\")\n        this.setState({ errorMessage: err.message, errorTrue: true });\n    }\n\n    this.setState({loaderProofActive: false});\n  }\n\n  renderThing() {\n    if(this.state.thingBool==true) {\n      return (\n        <button onClick={this.changeThing}>hi</button>\n      )\n    } else {\n      return (\n        <button onClick={this.changeThing}>bye</button>\n      )\n    }\n  }\n\n  changeThing = () => {\n    if(this.state.thingBool) {\n      this.setState({thingVal: \"bye\", thingBool: false})\n    } else {\n      this.setState({thingVal: \"hi\", thingBool: true})\n    }\n  }\n  \n  renderOpenVerificationMessage() {\n    if (this.state.verificationType==\"open\") {\n      return (\n        <OpenVerificationMessage></OpenVerificationMessage>\n      )\n    } else {\n      return null\n    }\n  }\n\n  renderAccountInfo() {\n    if (!this.state.accountDetailsRetrieved) {\n      return (\n        <button onClick={this.connectMetaMaskAccount} \n        className=\"button\"                                    \n        >Connect Wallet</button>\n      )\n    } else {\n      return (\n        <AccountMessage \n        network={this.state.network} \n        account={this.state.account}\n        verified={this.state.accountAlreadyVerified}\n      />\n      )\n    }\n  }\n\n  render() {\n    return (\n        <Layout >\n            <div>\n              <div style={{marginTop: 25}}>\n\n              <div onClick={this.changeVerificationType} style={{marginBottom: 25}}>\n              <OptionButton ></OptionButton>\n              </div>\n              {this.renderOpenVerificationMessage()}\n              \n\n              <Grid >\n                <Grid.Column width={6} floated='left' className=\"statusBox\">\n                  {this.renderThing()}\n                  {this.state.thingVal}\n                        {/* --------------------SESSION STATUS--------------------- */}\n                        <h2>Status </h2>\n                        {/* --------------------address status--------------------- */}\n                          <h3>Account:</h3>\n                          {this.renderAccountInfo()}\n\n                         {/* --------------------deposit status--------------------- */}\n                          <h3>Deposit: {this.state.deposit_Status} &nbsp; &nbsp;\n                          {\n                            this.state.loaderDepositActive ?\n                            <Loader active inline size=\"small\" />: null\n                          }\n                          </h3>\n\n                          {\n                            (!this.state.depositAlreadyPaid && this.state.accountDetailsRetrieved) ?\n                            <button onClick={this.sendDeposit} \n                            disabled={!this.state.accountDetailsRetrieved}\n                            className=\"button\" \n                            >Send deposit</button>\n                            : null\n                          }\n                          {/* --------------------verification status--------------------- */}\n                          <h3>Verification Session: {this.state.verification_status} &nbsp; &nbsp;\n                          {\n                            this.state.loaderVerificationActive ?\n                            <Loader active inline size=\"small\" />: null\n                          }\n                          </h3>\n                          {\n                            this.state.depositAlreadyPaid ?\n                            <button onClick={this.verifyIdentity} \n                            disabled={!this.state.accountDetailsRetrieved}\n                            disabled={!this.state.depositAlreadyPaid}\n                            className=\"button\" \n                            >Verify</button>\n                            : null\n                          }\n                          {/* --------------------proof message--------------------- */}\n                          <h3>Proof: {this.state.proof_status} &nbsp; &nbsp;\n                          {\n                            this.state.loaderProofActive ?\n                            <Loader active inline size=\"small\" />: null\n                          }\n                          </h3>\n                          {/* this is messy but what it does is: If no wallet connected don't show anything */}\n                          {/* if wallet is connected show button asking if user has login details */}\n                          {\n                            this.state.accountDetailsRetrieved ?\n                            <div>\n                            {\n                              !this.state.hasLoginDetails ?\n                              <button onClick={this.hasLoginCredentials} \n                              disabled={!this.state.accountDetailsRetrieved}\n                              className=\"button\" \n                              >If you already have login credentials click here</button>\n                              :\n                              <button onClick={this.submitSolProof} \n                              disabled={!this.state.accountDetailsRetrieved}\n                              className=\"button\" \n                              >Send proof</button>\n                            }\n                            </div>\n                            : null\n                          }\n\n                          {/* --------------------error message--------------------- */}\n                          {\n                          this.state.errorTrue ?\n                          <Message negative>\n                            <Message.Header>Error</Message.Header>\n                            <p>{this.state.errorMessage}</p>\n                          </Message> : null\n                          }\n                          \n                    </Grid.Column>\n                    {\n                      (this.state.verificationType !== \"open\") ?\n\n                    \n                    <Grid.Column  width={9} floated='right' className=\"statusBox\" >\n                      {/* --------------------LOGIN CREDENTIALS--------------------- */}\n                      {/* only show if user has logindetails recieved in current session */}\n                      <h2>Login credentials</h2>\n                      {\n                        // !this.state.loginDetailsRecieved ?\n                        this.state.loginDetailsRecieved ?\n                        <div>\n                          <h3>Pre-image: &nbsp; <br></br> </h3> \n                          <PreImageButton>{this.state.sessionIdRandNum}</PreImageButton>\n                      \n                          <h3>Hash: &nbsp; <br></br></h3>\n                          {/* <HashButton>13430753380610635471786589099759983096423845689623637123238304661144465381689</HashButton> */}\n                          <HashButton>{this.state.sessionIdMimcNum}</HashButton>\n\n                        </div> : <h4>No login details yet...</h4>\n                      }\n                                      \n                      <hr/>\n                      {/* ---------------------SUBMIT PROOF---------------------- */}\n                      {/* only show if hasLoginDetails is true  */}\n                      <h2>Create and submit proof</h2>\n                      {\n                      this.state.hasLoginDetails ?\n                      <p>\n                      <p><Input id=\"preImageCredential\" placeholder=\"Pre-image\"></Input></p>\n                      <p><Input id=\"mimcHashCredential\" placeholder=\"Hash\"></Input></p>\n                      </p> : null\n                      }\n                      \n                    </Grid.Column>\n                    : null\n                    }\n                </Grid>\n            </div>\n            </div>\n        </Layout>\n    );\n  }\n}\n\nexport default CampaignIndex;\n"]},"metadata":{},"sourceType":"module"}