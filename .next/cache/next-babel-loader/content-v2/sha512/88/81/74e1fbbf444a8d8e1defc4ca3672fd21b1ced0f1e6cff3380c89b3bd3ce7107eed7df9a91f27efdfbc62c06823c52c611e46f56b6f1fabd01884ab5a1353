{"ast":null,"code":"const stripe = require('stripe')('sk_test_51J305OC6YuwVjGqqdtMScisG2JWYy339dNtTGf7QE44BdrPbWPqeMKd5WF1nfpnKYhAmbh8GGQbiaolofct52IgZ003WkhWzMr');\n\nexport default async function handler(req, res) {\n  let clientSecret = null;\n  let id = null;\n  let addressVal = null; // this stays as null for anonymous verification but is actual address for open one\n\n  const adr = req.body.address;\n  const verificationType = req.body.verificationType;\n  console.log(\"\\u001b[1;32m [CVS] \\u001b[0m \", req.body);\n  console.log(\"\\u001b[1;32m [CVS] \\u001b[0m \", adr);\n  const depositCheck = await ethereumStuff(adr);\n  console.log(`\\u001b[1;32m [CVS] \\u001b[0m address ${adr} deposit ${depositCheck}`); // passes actual address to metadata if open verification process\n\n  if (verificationType == \"open\") {\n    addressVal = adr;\n  }\n\n  if (depositCheck) {\n    // if paid deposit create new verification session\n    const verificationSession = await stripe.identity.verificationSessions.create({\n      type: 'document',\n      metadata: {\n        passedDatabaseCheck: null,\n        verificationType: verificationType,\n        address: addressVal\n      }\n    }); // lock deposit\n\n    await lockDeposit(adr); // Return only the client secret and id to the frontend.\n\n    clientSecret = verificationSession.client_secret;\n    id = verificationSession.id;\n  }\n\n  res.status(200).json({\n    clientSecret,\n    id\n  });\n}\n\nconst Web3 = require('web3');\n\nconst Provider = require('truffle-hdwallet-provider');\n\nconst MyContract = require('../../ethereum/build/IdVerification.json');\n\nconst address = \"0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A\";\nconst privateKey = \"7a5e5b16d286a451082ee017f08410fae2c0062e4c7faa45f5beafc64df90664\"; // this is my private key\n\nconst infuraUrl = \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\";\nconst contractAddress = \"0x8e057beF1c3193a3A00686fA20001B7Dda980123\"; // change after deploying new contract version\n\nconst web3 = new Web3(infuraUrl);\nconst myContract = new web3.eth.Contract(JSON.parse(MyContract.interface), contractAddress);\nweb3.eth.accounts.wallet.add(privateKey);\n\nasync function ethereumStuff(adr) {\n  // set up contract and signing key\n  console.log(\"\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m checking if deposit paid\");\n  console.log(\"\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m Setting up data for transaction...\"); // set up transaction\n\n  const tx = myContract.methods.checkIfDepositPaid(adr);\n  const gas = await tx.estimateGas({\n    from: address\n  });\n  const gasPrice = await web3.eth.getGasPrice();\n  const data = tx.encodeABI();\n  const nonce = await web3.eth.getTransactionCount(address);\n  const txData = {\n    from: address,\n    to: myContract.options.address,\n    data: data,\n    gas: gas,\n    gasPrice: gasPrice,\n    nonce: nonce,\n    chain: 'rinkeby',\n    hardfork: 'istanbul'\n  }; // send transaction\n\n  console.log(`\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m Waiting for call...`);\n  const depositCheckAnswerHex = await web3.eth.call(txData);\n  let depositCheckAnswerBool; // might want to make the second check else if in case error is returned and this \n  // accidently interprets that as true\n\n  console.log(\"deposit check: \", depositCheckAnswerHex);\n\n  if (depositCheckAnswerHex == \"0x0000000000000000000000000000000000000000000000000000000000000000\") {\n    depositCheckAnswerBool = false;\n  } else {\n    depositCheckAnswerBool = true;\n  }\n\n  console.log(`\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m Call successful, deposit check ${depositCheckAnswerBool}`);\n  return depositCheckAnswerBool;\n}\n\nasync function lockDeposit(adr) {\n  console.log(\"\\u001b[1;32m [CVS]->[Lock deposit] \\u001b[0m Setting up data for transaction...\"); // set up transaction\n\n  const tx = myContract.methods.lockDeposity(adr);\n  const gas = await tx.estimateGas({\n    from: address\n  });\n  const gasPrice = await web3.eth.getGasPrice();\n  const data = tx.encodeABI();\n  const nonce = await web3.eth.getTransactionCount(address);\n  const txData = {\n    from: address,\n    to: myContract.options.address,\n    data: data,\n    gas: gas,\n    gasPrice: gasPrice,\n    nonce: nonce,\n    chain: 'rinkeby',\n    hardfork: 'istanbul'\n  }; // send transaction\n\n  console.log(`\\u001b[1;32m [CVS]->[Lock deposit] \\u001b[0m Waiting for transaction...`);\n  await web3.eth.sendTransaction(txData);\n  console.log(`\\u001b[1;32m [CVS]->[Lock deposit] \\u001b[0m Transaction successful`);\n}","map":{"version":3,"sources":["/Users/neilhacker/Desktop/project/working_on/ostrom_id_copy_7/pages/api/create-verification-session.js"],"names":["stripe","require","handler","req","res","clientSecret","id","addressVal","adr","body","address","verificationType","console","log","depositCheck","ethereumStuff","verificationSession","identity","verificationSessions","create","type","metadata","passedDatabaseCheck","lockDeposit","client_secret","status","json","Web3","Provider","MyContract","privateKey","infuraUrl","contractAddress","web3","myContract","eth","Contract","JSON","parse","interface","accounts","wallet","add","tx","methods","checkIfDepositPaid","gas","estimateGas","from","gasPrice","getGasPrice","data","encodeABI","nonce","getTransactionCount","txData","to","options","chain","hardfork","depositCheckAnswerHex","call","depositCheckAnswerBool","lockDeposity","sendTransaction"],"mappings":"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","sourcesContent":["const stripe = require('stripe')('sk_test_51J305OC6YuwVjGqqdtMScisG2JWYy339dNtTGf7QE44BdrPbWPqeMKd5WF1nfpnKYhAmbh8GGQbiaolofct52IgZ003WkhWzMr');\n\nexport default async function handler(req, res) {\n    let clientSecret = null;\n    let id = null;\n    let addressVal = null; // this stays as null for anonymous verification but is actual address for open one\n\n    const adr = req.body.address;\n    const verificationType = req.body.verificationType;\n\n    console.log(\"\\u001b[1;32m [CVS] \\u001b[0m \", req.body)\n    console.log(\"\\u001b[1;32m [CVS] \\u001b[0m \", adr)\n\n    const depositCheck = await ethereumStuff(adr);\n\n    console.log(`\\u001b[1;32m [CVS] \\u001b[0m address ${adr} deposit ${depositCheck}`)\n\n    // passes actual address to metadata if open verification process\n    if (verificationType == \"open\") {\n      addressVal = adr;\n    }\n\n    if (depositCheck) {\n      // if paid deposit create new verification session\n      const verificationSession = await stripe.identity.verificationSessions.create({\n        type: 'document',\n        metadata: {\n          passedDatabaseCheck: null, \n          verificationType: verificationType,\n          address: addressVal,\n        }\n        \n      });\n\n      // lock deposit\n      await lockDeposit(adr)\n\n      // Return only the client secret and id to the frontend.\n      clientSecret = verificationSession.client_secret;\n      id  = verificationSession.id;\n\n\n    }\n\n      res.status(200).json({ clientSecret, id })\n}\n\nconst Web3 = require('web3');\nconst Provider = require('truffle-hdwallet-provider');\nconst MyContract = require('../../ethereum/build/IdVerification.json');\n\nconst address = \"0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A\";\nconst privateKey = \"7a5e5b16d286a451082ee017f08410fae2c0062e4c7faa45f5beafc64df90664\"; // this is my private key\nconst infuraUrl = \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\";\n\nconst contractAddress = \"0x8e057beF1c3193a3A00686fA20001B7Dda980123\"; // change after deploying new contract version\n\nconst web3 = new Web3(infuraUrl);\nconst myContract = new web3.eth.Contract(\n  JSON.parse(MyContract.interface),\n  contractAddress\n);\nweb3.eth.accounts.wallet.add(privateKey);\n\nasync function ethereumStuff(adr) {\n    \n  // set up contract and signing key\n  console.log(\"\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m checking if deposit paid\")\n\n\n  console.log( \"\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m Setting up data for transaction...\" );\n\n  // set up transaction\n  const tx = myContract.methods.checkIfDepositPaid(adr);\n  const gas = await tx.estimateGas({from: address});\n  const gasPrice = await web3.eth.getGasPrice();\n  const data = tx.encodeABI();\n  const nonce = await web3.eth.getTransactionCount(address);\n  const txData = {\n    from: address,\n    to: myContract.options.address,\n    data: data,\n    gas: gas,\n    gasPrice: gasPrice,\n    nonce: nonce, \n    chain: 'rinkeby', \n    hardfork: 'istanbul'\n  };\n  \n  // send transaction\n  console.log(`\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m Waiting for call...`);\n  const depositCheckAnswerHex = await web3.eth.call(txData);\n  let depositCheckAnswerBool;\n\n  // might want to make the second check else if in case error is returned and this \n  // accidently interprets that as true\n  console.log(\"deposit check: \", depositCheckAnswerHex)\n  if (depositCheckAnswerHex == \"0x0000000000000000000000000000000000000000000000000000000000000000\") {\n    depositCheckAnswerBool = false;\n  } else {\n    depositCheckAnswerBool = true;\n  }\n  console.log(`\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m Call successful, deposit check ${depositCheckAnswerBool}`);\n\n\n  return depositCheckAnswerBool;\n}\n\nasync function lockDeposit(adr) {\n    \n  console.log( \"\\u001b[1;32m [CVS]->[Lock deposit] \\u001b[0m Setting up data for transaction...\" );\n\n  // set up transaction\n  const tx = myContract.methods.lockDeposity(adr);\n  const gas = await tx.estimateGas({from: address});\n  const gasPrice = await web3.eth.getGasPrice();\n  const data = tx.encodeABI();\n  const nonce = await web3.eth.getTransactionCount(address);\n  const txData = {\n    from: address,\n    to: myContract.options.address,\n    data: data,\n    gas: gas,\n    gasPrice: gasPrice,\n    nonce: nonce, \n    chain: 'rinkeby', \n    hardfork: 'istanbul'\n  };\n  \n  // send transaction\n  console.log(`\\u001b[1;32m [CVS]->[Lock deposit] \\u001b[0m Waiting for transaction...`);\n  await web3.eth.sendTransaction(txData);\n\n  console.log(`\\u001b[1;32m [CVS]->[Lock deposit] \\u001b[0m Transaction successful`);\n\n}"]},"metadata":{},"sourceType":"module"}