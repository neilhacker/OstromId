{"ast":null,"code":"import _regeneratorRuntime from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_2/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport ffjavascript from \"ffjavascript\";\nexport function calculateProof(_x, _x2) {\n  return _calculateProof.apply(this, arguments);\n}\n\nfunction _calculateProof() {\n  _calculateProof = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(preImage, hash) {\n    var _yield$snarkjs$groth, proof, publicSignals, pub, thing, vKey, res;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return snarkjs.groth16.fullProve({\n              x: preImage,\n              hash: hash.toString()\n            }, \"/circuits/hash/circuit.wasm\", \"/circuits/keys/hash/circuit_final.zkey\");\n\n          case 2:\n            _yield$snarkjs$groth = _context.sent;\n            proof = _yield$snarkjs$groth.proof;\n            publicSignals = _yield$snarkjs$groth.publicSignals;\n            console.log(proof);\n            console.log(publicSignals);\n            pub = unstringifyBigInts$2(JSON.parse(fs__default['default'].readFileSync(publicSignals, \"utf8\")));\n            thing = p256(proof.pi_a[0]);\n            console.log(thing);\n            _context.next = 12;\n            return fetch(\"/circuits/keys/hash/verification_key.json\").then(function (res) {\n              return res.json();\n            });\n\n          case 12:\n            vKey = _context.sent;\n            _context.next = 15;\n            return snarkjs.groth16.verify(vKey, publicSignals, proof);\n\n          case 15:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _calculateProof.apply(this, arguments);\n}\n\nfunction p256(n) {\n  var nstr = n.toString(16);\n\n  while (nstr.length < 64) {\n    nstr = \"0\" + nstr;\n  }\n\n  nstr = \"\\\"0x\".concat(nstr, \"\\\"\");\n  return nstr;\n}\n\nfunction groth16ExportSolidityCallData(_x3, _x4) {\n  return _groth16ExportSolidityCallData.apply(this, arguments);\n}\n\nfunction _groth16ExportSolidityCallData() {\n  _groth16ExportSolidityCallData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(proof, pub) {\n    var inputs, i, S;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            inputs = \"\";\n\n            for (i = 0; i < pub.length; i++) {\n              if (inputs != \"\") inputs = inputs + \",\";\n              inputs = inputs + p256(pub[i]);\n            }\n\n            S = \"[\".concat(p256(proof.pi_a[0]), \", \").concat(p256(proof.pi_a[1]), \"],\") + \"[[\".concat(p256(proof.pi_b[0][1]), \", \").concat(p256(proof.pi_b[0][0]), \"],[\").concat(p256(proof.pi_b[1][1]), \", \").concat(p256(proof.pi_b[1][0]), \"]],\") + \"[\".concat(p256(proof.pi_c[0]), \", \").concat(p256(proof.pi_c[1]), \"],\") + \"[\".concat(inputs, \"]\");\n            return _context2.abrupt(\"return\", S);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _groth16ExportSolidityCallData.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_2/prover.js"],"names":["ffjavascript","calculateProof","preImage","hash","snarkjs","groth16","fullProve","x","toString","proof","publicSignals","console","log","pub","unstringifyBigInts$2","JSON","parse","fs__default","readFileSync","thing","p256","pi_a","fetch","then","res","json","vKey","verify","n","nstr","length","groth16ExportSolidityCallData","inputs","i","S","pi_b","pi_c"],"mappings":"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","sourcesContent":["import ffjavascript from \"ffjavascript\"\n\nexport async function calculateProof(preImage, hash) {\n    const { proof, publicSignals } =\n      await snarkjs.groth16.fullProve({ x: preImage, hash: hash.toString() }, \"/circuits/hash/circuit.wasm\", \"/circuits/keys/hash/circuit_final.zkey\");\n\n      console.log(proof)\n      console.log(publicSignals)\n      const pub = unstringifyBigInts$2(JSON.parse(fs__default['default'].readFileSync(publicSignals, \"utf8\")));\n\n      const thing = p256(proof.pi_a[0])\n      console.log(thing)\n\n      const vKey = await fetch(\"/circuits/keys/hash/verification_key.json\").then(function(res) {\n        return res.json();\n      });\n  \n    const res = await snarkjs.groth16.verify(vKey, publicSignals, proof);\n  \n    return res;\n  }\n\nfunction p256(n) {\n    let nstr = n.toString(16);\n    while (nstr.length < 64) nstr = \"0\"+nstr;\n    nstr = `\"0x${nstr}\"`;\n    return nstr;\n}\n\nasync function groth16ExportSolidityCallData(proof, pub) {\n\n    let inputs = \"\";\n    for (let i=0; i<pub.length; i++) {\n        if (inputs != \"\") inputs = inputs + \",\";\n        inputs = inputs + p256(pub[i]);\n    }\n\n    let S;\n    S=`[${p256(proof.pi_a[0])}, ${p256(proof.pi_a[1])}],` +\n        `[[${p256(proof.pi_b[0][1])}, ${p256(proof.pi_b[0][0])}],[${p256(proof.pi_b[1][1])}, ${p256(proof.pi_b[1][0])}]],` +\n        `[${p256(proof.pi_c[0])}, ${p256(proof.pi_c[1])}],` +\n        `[${inputs}]`;\n\n    return S;\n}\n"]},"metadata":{},"sourceType":"module"}