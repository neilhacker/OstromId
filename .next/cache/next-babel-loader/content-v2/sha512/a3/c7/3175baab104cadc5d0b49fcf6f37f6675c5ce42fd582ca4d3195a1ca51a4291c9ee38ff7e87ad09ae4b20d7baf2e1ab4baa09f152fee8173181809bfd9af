{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/neilhacker/Desktop/project/working_on/ostrom_id_copy_7/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/neilhacker/Desktop/project/working_on/ostrom_id_copy_7/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/neilhacker/Desktop/project/working_on/ostrom_id_copy_7/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/neilhacker/Desktop/project/working_on/ostrom_id_copy_7/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/neilhacker/Desktop/project/working_on/ostrom_id_copy_7/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/neilhacker/Desktop/project/working_on/ostrom_id_copy_7/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/neilhacker/Desktop/project/working_on/ostrom_id_copy_7/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/neilhacker/Desktop/project/working_on/ostrom_id_copy_7/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/neilhacker/Desktop/project/working_on/ostrom_id_copy_7/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/neilhacker/Desktop/project/working_on/ostrom_id_copy_7/pages/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Message, Button, Input, Loader, Grid } from \"semantic-ui-react\";\nimport { Router } from '../routes';\nimport Layout from \"../components/Layout\";\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nimport AccountMessage from \"../components/Accounts\";\nimport OptionButton from \"../components/OptionButton\";\nimport OpenVerificationMessage from \"../components/OpenVerificationMessage\";\nimport factory from \"../ethereum/verification\";\nimport Web3 from \"web3\"; // use this to have connect account button\n\nvar web3;\nimport mimc from '../public/mimc.ts';\nimport { calculateProof } from '../public/prover.js';\nimport { loadStripe } from '@stripe/stripe-js';\nvar stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n\nvar VerificationIndex = /*#__PURE__*/function (_Component) {\n  _inherits(VerificationIndex, _Component);\n\n  var _super = _createSuper(VerificationIndex);\n\n  function VerificationIndex() {\n    var _this;\n\n    _classCallCheck(this, VerificationIndex);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      errorMessage: '',\n      errorTrue: false,\n      verificationType: \"anonymous\",\n      // eth\n      accountAlreadyVerified: false,\n      account: \"No account\",\n      network: \"No network\",\n      accountDetailsRetrieved: false,\n      openVerificationName: null,\n      // stripe\n      clientSecret: null,\n      stripe: null,\n      verification_session_id: null,\n      sessionIdRandNum: null,\n      sessionIdMimcNum: null,\n      //deposit\n      depositAlreadyPaid: false,\n      deposit_Status: \"Not paid\",\n      loaderDepositActive: false,\n      // verification\n      verification_status: \"Not started\",\n      loaderVerificationActive: false,\n      // proof\n      proof_status: \"Not sent\",\n      loaderProofActive: false,\n      //login\n      loginDetailsRecieved: false,\n      // this is for if they get details in current session\n      hasLoginDetails: false,\n      // this is for if they already have details\n      //zkp\n      mimcHashNumState: null,\n      solidityVerifierProof: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var metaMaskPresent, alreadyVerified, paidDeposit;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.connectMetaMaskAccountInitialCheck();\n\n            case 2:\n              metaMaskPresent = _context.sent;\n\n              if (metaMaskPresent) {\n                _context.next = 5;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 5:\n              _context.next = 7;\n              return _this.checkIfAccountVerified();\n\n            case 7:\n              alreadyVerified = _context.sent;\n              _context.next = 10;\n              return _this.checkDepositPaid();\n\n            case 10:\n              paidDeposit = _context.sent;\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"resetError\", function () {\n      _this.setState({\n        errorTrue: false,\n        errorMessage: \"\"\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeVerificationType\", function () {\n      if (_this.state.verificationType == \"anonymous\") {\n        console.log(\"changing verification type to open\");\n\n        _this.setState({\n          verificationType: \"open\"\n        });\n      } else {\n        console.log(\"changing verification type to anonymous\");\n\n        _this.setState({\n          verificationType: \"anonymous\"\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"connectMetaMaskAccountInitialCheck\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var address, network, net, provider;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(true && typeof window.ethereum !== \"undefined\")) {\n                _context2.next = 17;\n                break;\n              }\n\n              // We are in the browser and metamask is running.\n              web3 = new Web3(window.ethereum);\n              _context2.next = 4;\n              return ethereum.selectedAddress;\n\n            case 4:\n              address = _context2.sent;\n              network = ethereum.networkVersion;\n              console.log(\"account\", address);\n              console.log(\"network\", network);\n              net = _this.networkIntToName(network);\n\n              _this.setState({\n                network: net,\n                account: address\n              });\n\n              if (!(address != null)) {\n                _context2.next = 14;\n                break;\n              }\n\n              console.log(\"setting retireved\");\n\n              _this.setState({\n                accountDetailsRetrieved: true\n              });\n\n              return _context2.abrupt(\"return\", true);\n\n            case 14:\n              return _context2.abrupt(\"return\", false);\n\n            case 17:\n              // We are on the server *OR* the user is not running metamask\n              provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\");\n              return _context2.abrupt(\"return\", false);\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"connectMetaMaskAccount\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var address, network, net, provider;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(true && typeof window.ethereum !== \"undefined\")) {\n                _context3.next = 21;\n                break;\n              }\n\n              _context3.next = 3;\n              return window.ethereum.request({\n                method: \"eth_requestAccounts\"\n              });\n\n            case 3:\n              web3 = new Web3(window.ethereum);\n              _context3.next = 6;\n              return ethereum.selectedAddress;\n\n            case 6:\n              address = _context3.sent;\n              network = ethereum.networkVersion;\n              console.log(\"[WALLET] Connecting to Metamask account\");\n              console.log(\"[WALLET] account\", address);\n              console.log(\"[WALLET] network\", network);\n              net = _this.networkIntToName(network);\n\n              _this.setState({\n                network: net,\n                account: address\n              });\n\n              if (!(address != null)) {\n                _context3.next = 19;\n                break;\n              }\n\n              _this.setState({\n                accountDetailsRetrieved: true\n              });\n\n              _context3.next = 17;\n              return _this.checkIfAccountVerified();\n\n            case 17:\n              _context3.next = 19;\n              return _this.checkDepositPaid();\n\n            case 19:\n              _context3.next = 22;\n              break;\n\n            case 21:\n              // We are on the server *OR* the user is not running metamask\n              provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\");\n\n            case 22:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"networkIntToName\", function (networkId) {\n      switch (networkId) {\n        case \"1\":\n          return \"Main\";\n\n        case \"3\":\n          return \"Ropsten\";\n\n        case \"4\":\n          return \"Rinkeby\";\n\n        case \"42\":\n          return \"Kovan\";\n\n        case \"5\":\n          return \"Goerli\";\n\n        default:\n          return \"Custom\";\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkIfAccountVerified\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var accounts, anonymousRes, name;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              console.log(\"[VERIFY RESULT] Checking if account is verified...\");\n              _context4.prev = 1;\n              _context4.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context4.sent;\n              _context4.next = 7;\n              return factory.methods.checkIfAddressVerified().call({\n                from: accounts[0]\n              });\n\n            case 7:\n              anonymousRes = _context4.sent;\n              _context4.next = 10;\n              return factory.methods.checkIfAddressOpenVerified().call({\n                from: accounts[0]\n              });\n\n            case 10:\n              name = _context4.sent;\n\n              // name is null if it has no value which is falsy\n              if (name || anonymousRes) {\n                console.log(\"[VERIFY RESULT] address is verified\");\n\n                _this.setState({\n                  accountAlreadyVerified: true\n                });\n              } else {\n                console.log(\"[VERIFY RESULT] address is NOT verified\");\n\n                _this.setState({\n                  accountAlreadyVerified: false\n                });\n              }\n\n              return _context4.abrupt(\"return\", true);\n\n            case 15:\n              _context4.prev = 15;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.log(\"MetaMask error\");\n\n              _this.setState({\n                errorMessage: \"It looks like you may be on the wrong MetaMask network\",\n                errorTrue: true\n              });\n\n              return _context4.abrupt(\"return\", false);\n\n            case 20:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[1, 15]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"checkDepositPaid\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var accounts, res;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              console.log(\"[DEPOSIT] checking if deposit paid...\");\n              _context5.prev = 1;\n              _context5.next = 4;\n              return web3.eth.getAccounts();\n\n            case 4:\n              accounts = _context5.sent;\n              _context5.next = 7;\n              return factory.methods.checkIfDepositPaid().call({\n                from: accounts[0]\n              });\n\n            case 7:\n              res = _context5.sent;\n\n              // this should be uncommented eventually as it will block the verifcation button if no deposit is paid\n              _this.setState({\n                depositAlreadyPaid: res\n              });\n\n              if (res) {\n                console.log(\"[DEPOSIT] deposit paid\");\n\n                _this.setState({\n                  deposit_Status: \"Paid\"\n                });\n              } else {\n                console.log(\"[DEPOSIT] deposit NOT paid\");\n\n                _this.setState({\n                  deposit_Status: \"Not paid\"\n                });\n              }\n\n              return _context5.abrupt(\"return\", res);\n\n            case 13:\n              _context5.prev = 13;\n              _context5.t0 = _context5[\"catch\"](1);\n              console.log(\"error when initially checking account\");\n\n              _this.setState({\n                errorMessage: \"It looks like there was an error checking if you had paid the deposit\",\n                errorTrue: true\n              });\n\n              return _context5.abrupt(\"return\", false);\n\n            case 18:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[1, 13]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"sendDeposit\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var accounts, res;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _this.setState({\n                loaderDepositActive: true\n              });\n\n              console.log(\"[DEPOSIT] sending deposit...\");\n              _context6.prev = 2;\n\n              _this.setState({\n                deposit_Status: \"Sending deposit...\"\n              });\n\n              _context6.next = 6;\n              return web3.eth.getAccounts();\n\n            case 6:\n              accounts = _context6.sent;\n              _context6.next = 9;\n              return factory.methods.payDeposit().send({\n                from: accounts[0],\n                value: 20 // 20 wei deposit\n\n              });\n\n            case 9:\n              _context6.next = 11;\n              return factory.methods.checkIfDepositPaid().call({\n                from: accounts[0]\n              });\n\n            case 11:\n              res = _context6.sent;\n\n              if (res) {\n                console.log(\"[DEPOSIT] deposit transaction successful\");\n\n                _this.setState({\n                  depositAlreadyPaid: res,\n                  deposit_Status: \"Paid\"\n                });\n              }\n\n              _context6.next = 19;\n              break;\n\n            case 15:\n              _context6.prev = 15;\n              _context6.t0 = _context6[\"catch\"](2);\n              console.log(\"error in submit sol proof\");\n\n              _this.setState({\n                errorMessage: _context6.t0.message,\n                errorTrue: true\n              });\n\n            case 19:\n              _this.setState({\n                loaderDepositActive: false\n              });\n\n            case 20:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[2, 15]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"createNewStripeSession\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var accounts, requestOptions, response, data;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context7.sent;\n\n              _this.setState({\n                verification_status: \"server checking deposit payment\"\n              });\n\n              requestOptions = {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  title: 'POST of metamask address',\n                  address: accounts[0],\n                  verificationType: _this.state.verificationType\n                })\n              };\n              console.log(\"[VERIFICATION] sending address & verification type to server...\");\n              _context7.next = 9;\n              return fetch('/api/create-verification-session', requestOptions);\n\n            case 9:\n              response = _context7.sent;\n              _context7.next = 12;\n              return response.json();\n\n            case 12:\n              data = _context7.sent;\n\n              _this.setState({\n                clientSecret: data.clientSecret,\n                verification_session_id: data.id\n              });\n\n              console.log(\"[VERIFICATION] starting stripe ID flow...\");\n              _context7.t0 = _this;\n              _context7.next = 18;\n              return stripePromise;\n\n            case 18:\n              _context7.t1 = _context7.sent;\n              _context7.t2 = {\n                stripe: _context7.t1\n              };\n\n              _context7.t0.setState.call(_context7.t0, _context7.t2);\n\n              _context7.next = 28;\n              break;\n\n            case 23:\n              _context7.prev = 23;\n              _context7.t3 = _context7[\"catch\"](0);\n              console.log(\"error when trying to create new verification session\");\n\n              _this.setState({\n                errorMessage: \"It looks like there was an issue creating a new verification session\",\n                errorTrue: true\n              });\n\n              return _context7.abrupt(\"return\", false);\n\n            case 28:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, null, [[0, 23]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"verifyIdentity\", /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(event) {\n        var _this$state, stripe, clientSecret, _yield$stripe$verifyI, error;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                event.preventDefault();\n\n                _this.resetError();\n\n                _this.setState({\n                  loaderVerificationActive: true\n                });\n\n                console.log(\"[VERIFICATION] starting verification process...\"); // creating new stripe session on button click\n\n                _context8.next = 6;\n                return _this.createNewStripeSession();\n\n              case 6:\n                _this$state = _this.state, stripe = _this$state.stripe, clientSecret = _this$state.clientSecret;\n\n                if (!(!stripe || !clientSecret)) {\n                  _context8.next = 10;\n                  break;\n                }\n\n                _this.setState({\n                  loaderVerificationActive: false,\n                  errorTrue: true,\n                  errorMessage: \"Stripe not connecting\"\n                });\n\n                return _context8.abrupt(\"return\");\n\n              case 10:\n                _context8.next = 12;\n                return stripe.verifyIdentity(clientSecret);\n\n              case 12:\n                _yield$stripe$verifyI = _context8.sent;\n                error = _yield$stripe$verifyI.error;\n\n                if (error) {\n                  console.log('[error]', error);\n                } else {\n                  console.log('Verification submitted!');\n\n                  _this.pollForStatus();\n                }\n\n              case 15:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      return function (_x) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"pollForStatus\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (_this.state.verification_status !== \"passed_database_check\" && _this.state.verification_status !== \"failed_database_check\") {\n                setTimeout(_this.pollForStatus, 5000);\n\n                _this.fetchStatus();\n              }\n\n              if (_this.state.verification_status !== \"processing\" && _this.state.verification_status !== \"not_submitted\" && _this.state.verification_status !== \"verified_waiting_for_database_check\" && _this.state.verification_status !== \"server checking deposit payment\") {\n                _this.setState({\n                  loaderVerificationActive: false\n                });\n\n                if (_this.state.verification_status == \"passed_database_check\") {\n                  console.log(\"[VERIFICATION] passed database and verification checks\");\n\n                  _this.setState({\n                    loginDetailsRecieved: true,\n                    hasLoginDetails: true\n                  });\n                }\n              }\n\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchStatus\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              console.log(\"[VERIFICATION] polling for verification status...\"); //handle error if session id isn't set\n\n              fetch('/api/get-verification-session/' + _this.state.verification_session_id).then(function (res) {\n                return res.json();\n              }).then(function (data) {\n                return _this.setState({\n                  verification_status: data.status,\n                  sessionIdRandNum: data.randSeededNum,\n                  sessionIdMimcNum: data.mimcVal\n                });\n              });\n\n            case 2:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"hasLoginCredentials\", function () {\n      _this.setState({\n        hasLoginDetails: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"submitSolProof\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n      var preImage, hash, solidityProof, fullProof, pi_a, pi_b, pi_c, inputs, accounts, res;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              // event.preventDefault();\n              _this.resetError();\n\n              _this.setState({\n                loaderProofActive: true\n              });\n\n              console.log(\"[PROOF] creating ZKP\"); // CREATING ZKP FROM HASH AND PRE-IMAGE \n\n              _this.setState({\n                proof_status: \"Creating ZKP\"\n              });\n\n              preImage = parseInt(document.getElementById('preImageCredential').value);\n              console.log(\"[PROOF] pre-image: \", preImage);\n              hash = document.getElementById('mimcHashCredential').value;\n              console.log(\"[PROOF] MiMC hash: \", hash);\n              _context11.next = 10;\n              return calculateProof(preImage, hash);\n\n            case 10:\n              solidityProof = _context11.sent;\n              // this.setState({solidityVerifierProof: solidityProof});\n              console.log(\"[PROOF] ZKP: \", solidityProof); // SUBMIT ZKP TO CONTRACT  \n\n              console.log(\"[PROOF] submitting ZKP\");\n\n              _this.setState({\n                proof_status: \"Starting ETH transaction\"\n              });\n\n              fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n              pi_a = fullProof[0];\n              pi_b = fullProof[1];\n              pi_c = fullProof[2];\n              inputs = fullProof[3]; // send zk proof to verifyHash function\n\n              _context11.prev = 19;\n\n              _this.setState({\n                proof_status: \"Submitting ZKP...\"\n              });\n\n              _context11.next = 23;\n              return web3.eth.getAccounts();\n\n            case 23:\n              accounts = _context11.sent;\n              _context11.next = 26;\n              return factory.methods.verifyHash(pi_a, pi_b, pi_c, inputs).send({\n                from: accounts[0]\n              });\n\n            case 26:\n              console.log(\"[PROOF] submitted ZKP successfully\");\n              console.log(\"[PROOF] checking if ZKP passed verification checks...\");\n              _context11.next = 30;\n              return factory.methods.checkIfAddressVerified().call({\n                from: accounts[0]\n              });\n\n            case 30:\n              res = _context11.sent;\n              console.log(\"[PROOF] address verirification status: \", res);\n\n              _this.setState({\n                accountAlreadyVerified: res\n              });\n\n              _context11.next = 39;\n              break;\n\n            case 35:\n              _context11.prev = 35;\n              _context11.t0 = _context11[\"catch\"](19);\n              console.log(\"error in submit sol proof\");\n\n              _this.setState({\n                errorMessage: _context11.t0.message,\n                errorTrue: true\n              });\n\n            case 39:\n              _this.setState({\n                loaderProofActive: false\n              });\n\n            case 40:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, null, [[19, 35]]);\n    })));\n\n    return _this;\n  }\n\n  _createClass(VerificationIndex, [{\n    key: \"renderOpenVerificationMessage\",\n    //-------------------------------------------------------------------------------------------\n    //-------------------------------------------------------------------------------------------\n    // ----------------------------------RENDER INFO FUNCTIONS-----------------------------------\n    //-------------------------------------------------------------------------------------------\n    //-------------------------------------------------------------------------------------------\n    value: function renderOpenVerificationMessage() {\n      if (this.state.verificationType == \"open\") {\n        return /*#__PURE__*/_jsxDEV(OpenVerificationMessage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 9\n        }, this);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"renderAccountInfo\",\n    value: function renderAccountInfo() {\n      if (!this.state.accountDetailsRetrieved) {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.connectMetaMaskAccount,\n          className: \"button\",\n          children: \"Connect Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 9\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(AccountMessage, {\n          network: this.state.network,\n          account: this.state.account,\n          verified: this.state.accountAlreadyVerified,\n          name: this.state.openVerificationName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 9\n        }, this);\n      }\n    }\n  }, {\n    key: \"renderProofInfo\",\n    value: function renderProofInfo() {\n      // if on open verification mode no proof is needed so don't render\n      if (this.state.verificationType == \"open\") {\n        return null;\n      } // if on anonymous mode look if we have wallet account detail\n\n\n      if (this.state.accountDetailsRetrieved) {\n        // if we have them render button asking if they already have details \n        if (!this.state.hasLoginDetails) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Proof: \", this.state.proof_status, \" \\xA0 \\xA0\", this.state.loaderProofActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                active: true,\n                inline: true,\n                size: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 13\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.hasLoginCredentials,\n              disabled: !this.state.accountDetailsRetrieved,\n              className: \"button\",\n              children: \"If you already have login credentials click here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 9\n          }, this);\n        } // otherwise render button to send proof \n        else {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"Proof: \", this.state.proof_status, \" \\xA0 \\xA0\", this.state.loaderProofActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                  active: true,\n                  inline: true,\n                  size: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 535,\n                  columnNumber: 15\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: this.submitSolProof,\n                disabled: !this.state.accountDetailsRetrieved,\n                className: \"button\",\n                children: \"Send proof\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 538,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 531,\n              columnNumber: 11\n            }, this);\n          }\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Proof: \", this.state.proof_status, \" \\xA0 \\xA0\", this.state.loaderProofActive ? /*#__PURE__*/_jsxDEV(Loader, {\n            active: true,\n            inline: true,\n            size: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 11\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 9\n        }, this);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _jsxDEV2;\n\n      return /*#__PURE__*/_jsxDEV(Layout, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: 25\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: this.changeVerificationType,\n              style: {\n                marginBottom: 25\n              },\n              children: /*#__PURE__*/_jsxDEV(OptionButton, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 565,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 15\n            }, this), this.renderOpenVerificationMessage(), /*#__PURE__*/_jsxDEV(Grid, {\n              children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n                width: 6,\n                floated: \"left\",\n                className: \"statusBox\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  className: \"centeredHeader\",\n                  children: \"Status \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 573,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"Account:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 575,\n                  columnNumber: 27\n                }, this), this.renderAccountInfo(), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Deposit: \", this.state.deposit_Status, \" \\xA0 \\xA0\", this.state.loaderDepositActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                    active: true,\n                    inline: true,\n                    size: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 582,\n                    columnNumber: 29\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 579,\n                  columnNumber: 27\n                }, this), !this.state.depositAlreadyPaid && this.state.accountDetailsRetrieved ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: this.sendDeposit,\n                  disabled: !this.state.accountDetailsRetrieved,\n                  className: \"button\",\n                  children: \"Send deposit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 588,\n                  columnNumber: 29\n                }, this) : null, /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Verification Session: \", this.state.verification_status, \" \\xA0 \\xA0\", this.state.loaderVerificationActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                    active: true,\n                    inline: true,\n                    size: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 598,\n                    columnNumber: 29\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 595,\n                  columnNumber: 27\n                }, this), this.state.depositAlreadyPaid ? /*#__PURE__*/_jsxDEV(\"button\", (_jsxDEV2 = {\n                  onClick: this.verifyIdentity,\n                  disabled: !this.state.accountDetailsRetrieved\n                }, _defineProperty(_jsxDEV2, \"disabled\", !this.state.depositAlreadyPaid), _defineProperty(_jsxDEV2, \"className\", \"button\"), _defineProperty(_jsxDEV2, \"children\", \"Verify\"), _jsxDEV2), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 603,\n                  columnNumber: 29\n                }, this) : null, this.renderProofInfo(), this.state.errorTrue ? /*#__PURE__*/_jsxDEV(Message, {\n                  negative: true,\n                  children: [/*#__PURE__*/_jsxDEV(Message.Header, {\n                    children: \"Error\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 617,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: this.state.errorMessage\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 618,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 616,\n                  columnNumber: 27\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 571,\n                columnNumber: 17\n              }, this), this.state.verificationType !== \"open\" ? /*#__PURE__*/_jsxDEV(Grid.Column, {\n                width: 9,\n                floated: \"right\",\n                className: \"statusBox\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Login credentials\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 630,\n                  columnNumber: 23\n                }, this), // !this.state.loginDetailsRecieved ?\n                this.state.loginDetailsRecieved ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: [\"Pre-image: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 635,\n                      columnNumber: 49\n                    }, this), \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 635,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(PreImageButton, {\n                    children: this.state.sessionIdRandNum\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 636,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: [\"Hash: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 638,\n                      columnNumber: 44\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 638,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(HashButton, {\n                    children: this.state.sessionIdMimcNum\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 640,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 634,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"No login details yet...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 642,\n                  columnNumber: 34\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 645,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Create and submit proof\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 648,\n                  columnNumber: 23\n                }, this), this.state.hasLoginDetails ? /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: /*#__PURE__*/_jsxDEV(Input, {\n                      id: \"preImageCredential\",\n                      placeholder: \"Pre-image\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 652,\n                      columnNumber: 26\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 652,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: /*#__PURE__*/_jsxDEV(Input, {\n                      id: \"mimcHashCredential\",\n                      placeholder: \"Hash\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 653,\n                      columnNumber: 26\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 653,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 651,\n                  columnNumber: 23\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 627,\n                columnNumber: 21\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 570,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 9\n      }, this);\n    }\n  }]);\n\n  return VerificationIndex;\n}(Component);\n\nexport default VerificationIndex;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/project/working_on/ostrom_id_copy_7/pages/index.js"],"names":["React","Component","Message","Button","Input","Loader","Grid","Router","Layout","PreImageButton","HashButton","AccountMessage","OptionButton","OpenVerificationMessage","factory","Web3","web3","mimc","calculateProof","loadStripe","stripePromise","VerificationIndex","errorMessage","errorTrue","verificationType","accountAlreadyVerified","account","network","accountDetailsRetrieved","openVerificationName","clientSecret","stripe","verification_session_id","sessionIdRandNum","sessionIdMimcNum","depositAlreadyPaid","deposit_Status","loaderDepositActive","verification_status","loaderVerificationActive","proof_status","loaderProofActive","loginDetailsRecieved","hasLoginDetails","mimcHashNumState","solidityVerifierProof","connectMetaMaskAccountInitialCheck","metaMaskPresent","checkIfAccountVerified","alreadyVerified","checkDepositPaid","paidDeposit","setState","state","console","log","window","ethereum","selectedAddress","address","networkVersion","net","networkIntToName","provider","providers","HttpProvider","request","method","networkId","eth","getAccounts","accounts","methods","checkIfAddressVerified","call","from","anonymousRes","checkIfAddressOpenVerified","name","checkIfDepositPaid","res","payDeposit","send","value","message","requestOptions","headers","body","JSON","stringify","title","fetch","response","json","data","id","event","preventDefault","resetError","createNewStripeSession","verifyIdentity","error","pollForStatus","setTimeout","fetchStatus","then","status","randSeededNum","mimcVal","preImage","parseInt","document","getElementById","hash","solidityProof","fullProof","parse","pi_a","pi_b","pi_c","inputs","verifyHash","connectMetaMaskAccount","hasLoginCredentials","submitSolProof","marginTop","changeVerificationType","marginBottom","renderOpenVerificationMessage","renderAccountInfo","sendDeposit","renderProofInfo"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Message, Button, Input, Loader, Grid } from \"semantic-ui-react\";\nimport { Router } from '../routes';\n\nimport Layout from \"../components/Layout\";\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nimport AccountMessage from \"../components/Accounts\";\nimport OptionButton from \"../components/OptionButton\";\nimport OpenVerificationMessage from \"../components/OpenVerificationMessage\";\n\nimport factory from \"../ethereum/verification\";\nimport Web3 from \"web3\"; // use this to have connect account button\nlet web3; \n\nimport mimc from '../public/mimc.ts';\nimport { calculateProof } from '../public/prover.js'\n\nimport {loadStripe} from '@stripe/stripe-js';\n\nconst stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n\n\nclass VerificationIndex extends Component {\n \n   state = {\n    errorMessage: '',\n    errorTrue: false,\n    verificationType: \"anonymous\",   \n    // eth\n    accountAlreadyVerified: false,\n    account: \"No account\",\n    network: \"No network\",\n    accountDetailsRetrieved: false,\n    openVerificationName: null,\n    // stripe\n    clientSecret: null,\n    stripe: null,\n    verification_session_id: null,\n    sessionIdRandNum: null,\n    sessionIdMimcNum: null,\n    //deposit\n    depositAlreadyPaid: false,\n    deposit_Status: \"Not paid\",\n    loaderDepositActive: false,\n    // verification\n    verification_status: \"Not started\",\n    loaderVerificationActive: false,\n    // proof\n    proof_status: \"Not sent\",\n    loaderProofActive: false,\n    //login\n    loginDetailsRecieved: false, // this is for if they get details in current session\n    hasLoginDetails: false, // this is for if they already have details\n    //zkp\n    mimcHashNumState:null,\n    solidityVerifierProof:null,\n  };  \n\n  componentDidMount = async () => {\n    // check if metamask installed and account connected\n    const metaMaskPresent = await this.connectMetaMaskAccountInitialCheck();\n    if(!metaMaskPresent) {return;}\n\n    // checking if account is already verified\n    // at the moment I haven't disabled rest of flow if already verified to make testing easier\n    const alreadyVerified = await this.checkIfAccountVerified();\n\n    // check if deposit is paid\n    const paidDeposit = await this.checkDepositPaid();\n    // if(!paidDeposit) {return;} // this should be live for actual flow\n    \n  }\n\n  resetError = () => {\n    this.setState({errorTrue: false, errorMessage: \"\"});\n  }  \n\n  changeVerificationType = () => {\n    if(this.state.verificationType == \"anonymous\") {\n      console.log(\"changing verification type to open\")\n      this.setState({verificationType: \"open\"})\n    } else {\n      console.log(\"changing verification type to anonymous\")\n      this.setState({verificationType: \"anonymous\"})\n    }\n  }\n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------METAMASK STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n  connectMetaMaskAccountInitialCheck = async () => {\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // We are in the browser and metamask is running.\n      \n      web3 = new Web3(window.ethereum);\n\n      var address = await ethereum.selectedAddress;\n      var network = ethereum.networkVersion;\n\n      console.log(\"account\", address)\n      console.log(\"network\", network)\n\n      const net = this.networkIntToName(network)\n\n      this.setState({network: net, account: address})\n\n      if (address != null) {\n        console.log(\"setting retireved\")\n        this.setState({accountDetailsRetrieved: true})\n        return true\n      }\n      return false\n\n    } else {\n      // We are on the server *OR* the user is not running metamask\n      const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\"\n      );\n      return false\n    }\n  }\n  \n  connectMetaMaskAccount = async () => {\n    // let web3;\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // We are in the browser and metamask is running.\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      \n      web3 = new Web3(window.ethereum);\n\n      var address = await ethereum.selectedAddress;\n      var network = ethereum.networkVersion;\n\n      console.log(\"[WALLET] Connecting to Metamask account\")\n      console.log(\"[WALLET] account\", address)\n      console.log(\"[WALLET] network\", network)\n\n      const net = this.networkIntToName(network)\n\n      this.setState({network: net, account: address})\n\n      if (address != null) {\n        this.setState({accountDetailsRetrieved: true})\n        await this.checkIfAccountVerified()\n        await this.checkDepositPaid()\n      }\n\n    } else {\n      // We are on the server *OR* the user is not running metamask\n      const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\"\n      );\n    }\n  }\n\n  networkIntToName = (networkId) => {\n    switch(networkId) {\n      case \"1\":\n          return \"Main\"\n      case \"3\":\n        return \"Ropsten\"\n      case \"4\":\n        return \"Rinkeby\"\n      case \"42\":\n        return \"Kovan\";\n      case \"5\":\n        return \"Goerli\";\n      default: \n        return \"Custom\";\n    }\n}\n\n\n  checkIfAccountVerified = async () => {\n    console.log(\"[VERIFY RESULT] Checking if account is verified...\")\n    try {\n      const accounts = await web3.eth.getAccounts();\n      let anonymousRes = await factory.methods\n        .checkIfAddressVerified()\n        .call({\n            from: accounts[0]\n      });\n\n      let name = await factory.methods\n        .checkIfAddressOpenVerified()\n        .call({\n            from: accounts[0]\n      });\n\n      // name is null if it has no value which is falsy\n      if (name || anonymousRes) {\n        console.log(\"[VERIFY RESULT] address is verified\")\n        this.setState({accountAlreadyVerified: true});\n      } else {\n        console.log(\"[VERIFY RESULT] address is NOT verified\")\n        this.setState({accountAlreadyVerified: false});\n      }\n      return true;\n\n    } catch (err) {\n        console.log(\"MetaMask error\")\n        this.setState({ \n          errorMessage: \"It looks like you may be on the wrong MetaMask network\", \n          errorTrue: true });\n        return false;\n    }\n  }\n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------DEPOSIT STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  checkDepositPaid = async () => {\n    console.log(\"[DEPOSIT] checking if deposit paid...\")\n    try {\n      const accounts = await web3.eth.getAccounts();\n      let res = await factory.methods\n        .checkIfDepositPaid()\n        .call({\n            from: accounts[0]\n      });\n      // this should be uncommented eventually as it will block the verifcation button if no deposit is paid\n      this.setState({depositAlreadyPaid: res});\n\n      if(res) {\n        console.log(\"[DEPOSIT] deposit paid\")\n        this.setState({deposit_Status: \"Paid\"})\n      } else {\n        console.log(\"[DEPOSIT] deposit NOT paid\")\n        this.setState({deposit_Status: \"Not paid\"})\n      }\n      return res;\n\n    } catch (err) {\n        console.log(\"error when initially checking account\")\n        this.setState({ \n          errorMessage: \"It looks like there was an error checking if you had paid the deposit\", \n          errorTrue: true });\n        return false;\n    } \n  }\n\n  sendDeposit = async () => {\n    this.setState({ loaderDepositActive: true});\n\n    console.log(\"[DEPOSIT] sending deposit...\")\n\n    try {\n      this.setState({deposit_Status: \"Sending deposit...\"})\n      const accounts = await web3.eth.getAccounts();\n      await factory.methods\n          .payDeposit()\n          .send({\n              from: accounts[0],\n              value: 20 // 20 wei deposit\n      });\n  \n      let res = await factory.methods\n          .checkIfDepositPaid()\n          .call({\n              from: accounts[0]\n      });\n      \n      if (res) {\n          console.log(\"[DEPOSIT] deposit transaction successful\")\n          this.setState({depositAlreadyPaid: res, deposit_Status: \"Paid\"})\n      }\n  \n    } catch (err) {\n        console.log(\"error in submit sol proof\")\n        this.setState({ errorMessage: err.message, errorTrue: true });\n    }\n  this.setState({ loaderDepositActive: false});\n  \n  }\n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------STRIPE STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  createNewStripeSession = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n\n      this.setState({ verification_status: \"server checking deposit payment\" })\n\n      const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          title: 'POST of metamask address',\n          address: accounts[0],\n          verificationType: this.state.verificationType })\n      };\n\n      console.log(\"[VERIFICATION] sending address & verification type to server...\")\n      const response = await fetch('/api/create-verification-session', requestOptions);\n      const data = await response.json();\n      this.setState({clientSecret: data.clientSecret, verification_session_id: data.id})\n      console.log(\"[VERIFICATION] starting stripe ID flow...\")\n      this.setState({ stripe: await stripePromise })\n    } catch (err) {\n      console.log(\"error when trying to create new verification session\")\n      this.setState({ \n        errorMessage: \"It looks like there was an issue creating a new verification session\", \n        errorTrue: true });\n      return false;\n    }\n\n  }\n\n\n  verifyIdentity = async (event) => {\n    event.preventDefault();\n\n    this.resetError()\n    this.setState({ loaderVerificationActive: true});\n\n    console.log(\"[VERIFICATION] starting verification process...\")\n\n    // creating new stripe session on button click\n    await this.createNewStripeSession();\n\n    let { stripe, clientSecret } = this.state;\n    \n    if (!stripe || !clientSecret) {\n      this.setState({ loaderVerificationActive: false, errorTrue: true, errorMessage: \"Stripe not connecting\"});\n      return;\n    }\n\n    // Show the verification modal.\n    const { error } = await stripe.verifyIdentity(clientSecret);\n    \n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('Verification submitted!');\n      this.pollForStatus();\n    }\n\n  }\n\n  pollForStatus = async() => {\n\n    if(this.state.verification_status !== \"passed_database_check\" && this.state.verification_status !== \"failed_database_check\") {\n      setTimeout(this.pollForStatus, 5000)\n      this.fetchStatus()\n    }\n    if(this.state.verification_status !== \"processing\" && \n        this.state.verification_status !== \"not_submitted\" && \n        this.state.verification_status !== \"verified_waiting_for_database_check\" &&\n        this.state.verification_status !== \"server checking deposit payment\") \n        {\n          this.setState({ loaderVerificationActive: false});\n          \n          if(this.state.verification_status == \"passed_database_check\") {\n            console.log(\"[VERIFICATION] passed database and verification checks\")\n            this.setState({loginDetailsRecieved: true, hasLoginDetails: true});\n        }\n    }\n\n  }\n\nfetchStatus = async () => {\n    console.log(\"[VERIFICATION] polling for verification status...\")\n    //handle error if session id isn't set\n    fetch('/api/get-verification-session/' + this.state.verification_session_id)\n      .then(res => res.json())\n      .then(data => this.setState({\n        verification_status: data.status, \n        sessionIdRandNum: data.randSeededNum,\n        sessionIdMimcNum: data.mimcVal,\n      }))\n  }\n\n  //-------------------------------------------------------------------------------------------\n  //-------------------------------------------------------------------------------------------\n  // ------------------------------------LOGIN DETAILS STUFF------------------------------------\n  //-------------------------------------------------------------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  hasLoginCredentials = () => {\n    this.setState({hasLoginDetails: true})\n  }\n\n  // mimcHashNum = async () => {\n  // const preImage1 = document.getElementById('mimc_num').value\n  // // console.log(\"[PROOF] pre-image: \",preImage1)\n  // const out = mimc(preImage1);\n  // // console.log(\"[PROOF] MiMC hash: \",out.toString())\n  // this.setState({mimcHashNumState: out.toString()});\n\n  // }\n\n// verifyPreimage = async() => {\n//   const preImage = parseInt(document.getElementById('preImageCredential').value);\n//   console.log(\"[PROOF] pre-image: \",preImage)\n//   const hash = document.getElementById('mimcHashCredential').value;\n//   console.log(\"[PROOF] MiMC hash: \",hash)\n//   const solidityProof = await calculateProof(preImage, hash);\n//   this.setState({solidityVerifierProof: solidityProof});\n//   console.log(solidityProof)\n//   console.log(\"[PROOF] ZKP: \",out.toString())\n\n// }\n\nsubmitSolProof = async () => {\n  // event.preventDefault();\n  this.resetError()\n  this.setState({ loaderProofActive: true});\n\n  console.log(\"[PROOF] creating ZKP\")\n\n  // CREATING ZKP FROM HASH AND PRE-IMAGE \n  this.setState({proof_status: \"Creating ZKP\"})\n  const preImage = parseInt(document.getElementById('preImageCredential').value);\n  console.log(\"[PROOF] pre-image: \",preImage)\n  const hash = document.getElementById('mimcHashCredential').value;\n  console.log(\"[PROOF] MiMC hash: \",hash)\n  const solidityProof = await calculateProof(preImage, hash);\n  // this.setState({solidityVerifierProof: solidityProof});\n  console.log(\"[PROOF] ZKP: \", solidityProof)\n\n\n  // SUBMIT ZKP TO CONTRACT  \n  console.log(\"[PROOF] submitting ZKP\")\n\n  this.setState({proof_status: \"Starting ETH transaction\"})\n\n  const fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n\n  const pi_a = fullProof[0]\n  const pi_b = fullProof[1]\n  const pi_c = fullProof[2]\n  const inputs = fullProof[3]\n  \n\n  // send zk proof to verifyHash function\n  try {\n      this.setState({proof_status: \"Submitting ZKP...\"})\n      const accounts = await web3.eth.getAccounts();\n      await factory.methods\n          .verifyHash(pi_a,pi_b,pi_c,inputs)\n          .send({\n              from: accounts[0]\n      });\n\n      console.log(\"[PROOF] submitted ZKP successfully\")\n      console.log(\"[PROOF] checking if ZKP passed verification checks...\")\n      let res = await factory.methods\n          .checkIfAddressVerified()\n          .call({\n              from: accounts[0]\n      });\n\n      console.log(\"[PROOF] address verirification status: \", res)\n      this.setState({accountAlreadyVerified: res});\n\n    } catch (err) {\n        console.log(\"error in submit sol proof\")\n        this.setState({ errorMessage: err.message, errorTrue: true });\n    }\n\n    this.setState({loaderProofActive: false});\n  }\n\n  //-------------------------------------------------------------------------------------------\n  //-------------------------------------------------------------------------------------------\n  // ----------------------------------RENDER INFO FUNCTIONS-----------------------------------\n  //-------------------------------------------------------------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  renderOpenVerificationMessage() {\n    if (this.state.verificationType==\"open\") {\n      return (\n        <OpenVerificationMessage></OpenVerificationMessage>\n      )\n    } else {\n      return null\n    }\n  }\n\n  renderAccountInfo() {\n    if (!this.state.accountDetailsRetrieved) {\n      return (\n        <button onClick={this.connectMetaMaskAccount} \n        className=\"button\"                                    \n        >Connect Wallet</button>\n      )\n    } else {\n      return (\n        <AccountMessage \n        network={this.state.network} \n        account={this.state.account}\n        verified={this.state.accountAlreadyVerified}\n        name={this.state.openVerificationName}\n      />\n      )\n    }\n  }\n\n  renderProofInfo() {\n    // if on open verification mode no proof is needed so don't render\n    if (this.state.verificationType==\"open\") {\n      return null;\n    }\n    // if on anonymous mode look if we have wallet account detail\n    if (this.state.accountDetailsRetrieved) {\n       // if we have them render button asking if they already have details \n      if (!this.state.hasLoginDetails) {\n        return (\n        <div>\n          <h3>Proof: {this.state.proof_status} &nbsp; &nbsp;\n          {\n            this.state.loaderProofActive ?\n            <Loader active inline size=\"small\" />: null\n          }\n          </h3>\n          \n          <button onClick={this.hasLoginCredentials} \n          disabled={!this.state.accountDetailsRetrieved}\n          className=\"button\" \n          >If you already have login credentials click here</button>\n        </div>\n        ) \n      } \n      // otherwise render button to send proof \n      else {\n        return (\n          <div>\n            <h3>Proof: {this.state.proof_status} &nbsp; &nbsp;\n            {\n              this.state.loaderProofActive ?\n              <Loader active inline size=\"small\" />: null\n            }\n            </h3>\n            <button onClick={this.submitSolProof} \n            disabled={!this.state.accountDetailsRetrieved}\n            className=\"button\" \n            >Send proof</button>\n        </div>\n        )\n      }\n    }  else {\n      return (\n        <h3>Proof: {this.state.proof_status} &nbsp; &nbsp;\n        {\n          this.state.loaderProofActive ?\n          <Loader active inline size=\"small\" />: null\n        }\n        </h3>\n      )\n    }\n  }\n\n\n  render() {\n    return (\n        <Layout >\n            <div>\n              <div style={{marginTop: 25}}>\n\n              <div onClick={this.changeVerificationType} style={{marginBottom: 25}}>\n              <OptionButton ></OptionButton>\n              </div>\n              {this.renderOpenVerificationMessage()}\n              \n\n              <Grid >\n                <Grid.Column width={6} floated='left' className=\"statusBox\">\n                        {/* --------------------SESSION STATUS--------------------- */}\n                        <h2 className=\"centeredHeader\">Status </h2>\n                        {/* --------------------address status--------------------- */}\n                          <h3>Account:</h3>\n                          {this.renderAccountInfo()}\n\n                         {/* --------------------deposit status--------------------- */}\n                          <h3>Deposit: {this.state.deposit_Status} &nbsp; &nbsp;\n                          {\n                            this.state.loaderDepositActive ?\n                            <Loader active inline size=\"small\" />: null\n                          }\n                          </h3>\n\n                          {\n                            (!this.state.depositAlreadyPaid && this.state.accountDetailsRetrieved) ?\n                            <button onClick={this.sendDeposit} \n                            disabled={!this.state.accountDetailsRetrieved}\n                            className=\"button\" \n                            >Send deposit</button>\n                            : null\n                          }\n                          {/* --------------------verification status--------------------- */}\n                          <h3>Verification Session: {this.state.verification_status} &nbsp; &nbsp;\n                          {\n                            this.state.loaderVerificationActive ?\n                            <Loader active inline size=\"small\" />: null\n                          }\n                          </h3>\n                          {\n                            this.state.depositAlreadyPaid ?\n                            <button onClick={this.verifyIdentity} \n                            disabled={!this.state.accountDetailsRetrieved}\n                            disabled={!this.state.depositAlreadyPaid}\n                            className=\"button\" \n                            >Verify</button>\n                            : null\n                          }\n                          {/* --------------------proof message--------------------- */}\n                          {this.renderProofInfo()}\n\n                          {/* --------------------error message--------------------- */}\n                          {\n                          this.state.errorTrue ?\n                          <Message negative>\n                            <Message.Header>Error</Message.Header>\n                            <p>{this.state.errorMessage}</p>\n                          </Message> : null\n                          }\n                          \n                    </Grid.Column>\n                    {\n                      (this.state.verificationType !== \"open\") ?\n\n                    \n                    <Grid.Column  width={9} floated='right' className=\"statusBox\" >\n                      {/* --------------------LOGIN CREDENTIALS--------------------- */}\n                      {/* only show if user has logindetails recieved in current session */}\n                      <h2>Login credentials</h2>\n                      {\n                        // !this.state.loginDetailsRecieved ?\n                        this.state.loginDetailsRecieved ?\n                        <div>\n                          <h3>Pre-image: &nbsp; <br></br> </h3> \n                          <PreImageButton>{this.state.sessionIdRandNum}</PreImageButton>\n                      \n                          <h3>Hash: &nbsp; <br></br></h3>\n                          {/* <HashButton>13430753380610635471786589099759983096423845689623637123238304661144465381689</HashButton> */}\n                          <HashButton>{this.state.sessionIdMimcNum}</HashButton>\n\n                        </div> : <h4>No login details yet...</h4>\n                      }\n                                      \n                      <hr/>\n                      {/* ---------------------SUBMIT PROOF---------------------- */}\n                      {/* only show if hasLoginDetails is true  */}\n                      <h2>Create and submit proof</h2>\n                      {\n                      this.state.hasLoginDetails ?\n                      <p>\n                      <p><Input id=\"preImageCredential\" placeholder=\"Pre-image\"></Input></p>\n                      <p><Input id=\"mimcHashCredential\" placeholder=\"Hash\"></Input></p>\n                      </p> : null\n                      }\n                      \n                    </Grid.Column>\n                    : null\n                    }\n                </Grid>\n            </div>\n            </div>\n        </Layout>\n    );\n  }\n}\n\nexport default VerificationIndex;\n"]},"metadata":{},"sourceType":"module"}