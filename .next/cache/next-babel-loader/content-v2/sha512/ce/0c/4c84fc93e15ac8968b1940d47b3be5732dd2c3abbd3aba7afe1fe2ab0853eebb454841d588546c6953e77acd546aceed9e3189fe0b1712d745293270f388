{"ast":null,"code":"const stripe = require('stripe')('rk_test_51J305OC6YuwVjGqqJ6Sj41vN15r5vfTbCiHd1slfDzXLSgdyjLxofs7oqGCBrWRlVXxpfbpIxHd3hmhmTlbWwGNx00UU16Rwo4');\n\nimport { sha256 } from 'js-sha256';\nimport { EthereumStuff } from '../../ethBackend';\n\nconst handler = async (req, res) => {\n  //todo: check stripe signing key\n  if (req.method === \"POST\") {\n    const event = req.body; // need to verifiy that event came from stripe \n    // https://stripe.com/docs/identity/handle-verification-outcomes\n    // Handle the event\n\n    switch (event.type) {\n      case 'identity.verification_session.verified':\n        {\n          // All the verification checks passed\n          const verificationSession = event.data.object;\n          console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m identity verification session verified\");\n          const verifiedOutputs = await stripe.identity.verificationSessions.retrieve(verificationSession.id, {\n            expand: ['verified_outputs', 'verified_outputs.dob']\n          });\n          const hash = makeHashOfDetails(verifiedOutputs);\n          console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m hash of user details\", hash);\n          EthereumStuff(verificationSession.id, hash);\n          break;\n        }\n\n      default:\n        // Unexpected event type\n        console.log(`❌ Unhandled event type ${event.type}.`);\n    } // Return a 200 response to acknowledge receipt of the event\n\n\n    res.send(); // res.status(200).json({ })\n  } else {\n    res.setHeader(\"Allow\", \"POST\");\n    res.status(405).end(\"Method Not Allowed\");\n  }\n};\n\nconst makeHashOfDetails = verifiedOutputs => {\n  const firstName = verifiedOutputs.verified_outputs.first_name.toString().toLowerCase();\n  const lastName = verifiedOutputs.verified_outputs.last_name.toString().toLowerCase();\n  const dayStr = verifiedOutputs.verified_outputs.dob.day.toString();\n  const monthStr = verifiedOutputs.verified_outputs.dob.month.toString();\n  const yearStr = verifiedOutputs.verified_outputs.dob.year.toString();\n  const combination = firstName + lastName + dayStr + monthStr + yearStr;\n  console.log(combination);\n  const hashCombination = sha256(combination);\n  return hashCombination;\n}; // const Web3 = require('web3');\n// const Provider = require('truffle-hdwallet-provider');\n// const MyContract = require('../../ethereum/build/IdVerification.json');\n// const address = '0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A';\n// const privateKey = '7a5e5b16d286a451082ee017f08410fae2c0062e4c7faa45f5beafc64df90664'; // this is my private key\n// const infuraUrl = 'https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6'; \n// import mimc from '../../mimc.ts';\n// const seedrandom = require('seedrandom');\n// import searchDatabase from '../../mongo.js'\n// const EthereumStuff = async (id, hash) => {\n//   console.log( \"\\u001b[1;32m [Ethereum] \\u001b[0m\" );\n//   // set up contract and signing key\n//   const web3 = new Web3(infuraUrl);\n//   const myContract = new web3.eth.Contract(\n//     JSON.parse(MyContract.interface),\n//     '0x65a1772fF0c8eC4780c0d591a3774259e7d40bC1'\n//   );\n//   web3.eth.accounts.wallet.add(privateKey);\n//   // set up info for transaction\n//   // take session id and seed random num generator with it so [id].js will be able to get same num\n//   // get random num\n//   // get Mimc hash of this num (this is the value we will claim we know the pre image of)\n//   // convert Mimc hash to hex and store this val in contract\n//   // this hex value will be the last input of zkp\n//   var seededHash = seedrandom(id);\n//   const randSeededNum = seededHash() * 1000000000000000000;\n//   console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m randSeededNum\", randSeededNum)\n//   const mimcVal = mimc(randSeededNum)\n//   console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m mimc val\", mimcVal.toString())\n//   var hexVal = mimcVal.toString(16);\n//   console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m hexVal \", hexVal.toString())\n//   hexVal = `0x${hexVal}` // turn it into right format for contract\n//   console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m hexVal \", hexVal)\n//   // search Database\n//   await searchDatabase(hash).catch(console.error);\n//   // set up transaction\n//   const tx = myContract.methods.addNewHash(hexVal);\n//   const gas = await tx.estimateGas({from: address});\n//   const gasPrice = await web3.eth.getGasPrice();\n//   const data = tx.encodeABI();\n//   const nonce = await web3.eth.getTransactionCount(address);\n//   const txData = {\n//     from: address,\n//     to: myContract.options.address,\n//     data: data,\n//     gas: gas,\n//     gasPrice: gasPrice,\n//     nonce: nonce, \n//     chain: 'rinkeby', \n//     hardfork: 'istanbul'\n//   };\n//   // send transaction\n//   const receipt = await web3.eth.sendTransaction(txData);\n//   // console.log transaction hash to show it has gone through\n//   console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Transaction hash: ${receipt.transactionHash}`);\n// }\n\n\nexport default handler;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/pages/api/stripe_hook.js"],"names":["stripe","require","sha256","EthereumStuff","handler","req","res","method","event","body","type","verificationSession","data","object","console","log","verifiedOutputs","identity","verificationSessions","retrieve","id","expand","hash","makeHashOfDetails","send","setHeader","status","end","firstName","verified_outputs","first_name","toString","toLowerCase","lastName","last_name","dayStr","dob","day","monthStr","month","yearStr","year","combination","hashCombination"],"mappings":"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","sourcesContent":["const stripe = require('stripe')('rk_test_51J305OC6YuwVjGqqJ6Sj41vN15r5vfTbCiHd1slfDzXLSgdyjLxofs7oqGCBrWRlVXxpfbpIxHd3hmhmTlbWwGNx00UU16Rwo4');\nimport { sha256 } from 'js-sha256';\nimport { EthereumStuff } from '../../ethBackend';\n\nconst handler = async (req, res) => {\n    //todo: check stripe signing key\n    if (req.method === \"POST\") {\n        const event = req.body;\n\n        // need to verifiy that event came from stripe \n        // https://stripe.com/docs/identity/handle-verification-outcomes\n      \n        // Handle the event\n        switch (event.type) {\n          case 'identity.verification_session.verified': {\n              // All the verification checks passed\n              const verificationSession = event.data.object;\n              console.log( \"\\u001b[1;32m [Stripe] \\u001b[0m identity verification session verified\" );\n\n              const verifiedOutputs = await stripe.identity.verificationSessions.retrieve(\n                verificationSession.id,\n                {\n                  expand: [\n                    'verified_outputs',\n                    'verified_outputs.dob',\n                  ],\n                }\n              );\n              \n              const hash = makeHashOfDetails(verifiedOutputs);\n              console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m hash of user details\", hash)\n                            \n              EthereumStuff(verificationSession.id, hash);\n              break;\n            }\n        \n          default:\n            // Unexpected event type\n            console.log(`❌ Unhandled event type ${event.type}.`);\n        }\n        // Return a 200 response to acknowledge receipt of the event\n        res.send();\n        // res.status(200).json({ })\n    } else {\n      res.setHeader(\"Allow\", \"POST\");\n      res.status(405).end(\"Method Not Allowed\");\n    }\n}\n\nconst makeHashOfDetails = (verifiedOutputs) => {\n  const firstName = verifiedOutputs.verified_outputs.first_name.toString().toLowerCase();\n  const lastName = verifiedOutputs.verified_outputs.last_name.toString().toLowerCase();\n  const dayStr = verifiedOutputs.verified_outputs.dob.day.toString();\n  const monthStr = verifiedOutputs.verified_outputs.dob.month.toString();\n  const yearStr = verifiedOutputs.verified_outputs.dob.year.toString();\n\n  const combination = firstName + lastName + dayStr + monthStr + yearStr;\n  console.log(combination)\n\n  const hashCombination = sha256(combination);\n  return hashCombination;\n\n} \n\n// const Web3 = require('web3');\n// const Provider = require('truffle-hdwallet-provider');\n// const MyContract = require('../../ethereum/build/IdVerification.json');\n// const address = '0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A';\n// const privateKey = '7a5e5b16d286a451082ee017f08410fae2c0062e4c7faa45f5beafc64df90664'; // this is my private key\n// const infuraUrl = 'https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6'; \n// import mimc from '../../mimc.ts';\n// const seedrandom = require('seedrandom');\n// import searchDatabase from '../../mongo.js'\n\n\n\n// const EthereumStuff = async (id, hash) => {\n//   console.log( \"\\u001b[1;32m [Ethereum] \\u001b[0m\" );\n\n\n//   // set up contract and signing key\n//   const web3 = new Web3(infuraUrl);\n//   const myContract = new web3.eth.Contract(\n//     JSON.parse(MyContract.interface),\n//     '0x65a1772fF0c8eC4780c0d591a3774259e7d40bC1'\n//   );\n//   web3.eth.accounts.wallet.add(privateKey);\n\n//   // set up info for transaction\n//   // take session id and seed random num generator with it so [id].js will be able to get same num\n//   // get random num\n//   // get Mimc hash of this num (this is the value we will claim we know the pre image of)\n//   // convert Mimc hash to hex and store this val in contract\n//   // this hex value will be the last input of zkp\n\n//   var seededHash = seedrandom(id);\n//   const randSeededNum = seededHash() * 1000000000000000000;\n//   console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m randSeededNum\", randSeededNum)\n\n//   const mimcVal = mimc(randSeededNum)\n//   console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m mimc val\", mimcVal.toString())\n\n//   var hexVal = mimcVal.toString(16);\n//   console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m hexVal \", hexVal.toString())\n//   hexVal = `0x${hexVal}` // turn it into right format for contract\n//   console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m hexVal \", hexVal)\n\n//   // search Database\n//   await searchDatabase(hash).catch(console.error);\n\n//   // set up transaction\n//   const tx = myContract.methods.addNewHash(hexVal);\n//   const gas = await tx.estimateGas({from: address});\n//   const gasPrice = await web3.eth.getGasPrice();\n//   const data = tx.encodeABI();\n//   const nonce = await web3.eth.getTransactionCount(address);\n//   const txData = {\n//     from: address,\n//     to: myContract.options.address,\n//     data: data,\n//     gas: gas,\n//     gasPrice: gasPrice,\n//     nonce: nonce, \n//     chain: 'rinkeby', \n//     hardfork: 'istanbul'\n//   };\n  \n//   // send transaction\n//   const receipt = await web3.eth.sendTransaction(txData);\n\n//   // console.log transaction hash to show it has gone through\n//   console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Transaction hash: ${receipt.transactionHash}`);\n// }\n\n\nexport default handler;"]},"metadata":{},"sourceType":"module"}