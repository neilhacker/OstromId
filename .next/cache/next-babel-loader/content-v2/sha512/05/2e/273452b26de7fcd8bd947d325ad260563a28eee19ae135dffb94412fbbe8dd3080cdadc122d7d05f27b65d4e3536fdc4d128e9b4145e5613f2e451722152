{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/pages/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Message, Button, Input, Loader, Grid } from \"semantic-ui-react\";\nimport { Router } from '../routes';\nimport Layout from \"../components/Layout\";\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nimport AccountMessage from \"../components/Accounts\";\nimport OptionButton from \"../components/OptionButton\";\nimport factory from \"../ethereum/verification\";\nimport Web3 from \"web3\"; // use this to have connect account button\n\nvar web3;\nimport mimc from '../public/mimc.ts';\nimport { calculateProof } from '../public/prover.js';\nimport { loadStripe } from '@stripe/stripe-js';\nvar stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n\nvar CampaignIndex = /*#__PURE__*/function (_Component) {\n  _inherits(CampaignIndex, _Component);\n\n  var _super = _createSuper(CampaignIndex);\n\n  function CampaignIndex() {\n    var _this;\n\n    _classCallCheck(this, CampaignIndex);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      errorMessage: '',\n      errorTrue: false,\n      verificationType: \"anonymous\",\n      // eth\n      accountAlreadyVerified: false,\n      account: \"No account\",\n      network: \"No network\",\n      accountDetailsRetrieved: false,\n      // stripe\n      clientSecret: null,\n      stripe: null,\n      verification_session_id: null,\n      sessionIdRandNum: null,\n      sessionIdMimcNum: null,\n      //deposit\n      depositAlreadyPaid: false,\n      deposit_Status: \"Not paid\",\n      loaderDepositActive: false,\n      // verification\n      verification_status: \"Not started\",\n      loaderVerificationActive: false,\n      // proof\n      proof_status: \"Not sent\",\n      loaderProofActive: false,\n      //login\n      loginDetailsRecieved: false,\n      // this is for if they get details in current session\n      hasLoginDetails: false,\n      // this is for if they already have details\n      //zkp\n      mimcHashNumState: null,\n      solidityVerifierProof: null,\n      zkResult: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var metaMaskPresent, alreadyVerified, paidDeposit;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.connectMetaMaskAccountInitialCheck();\n\n            case 2:\n              metaMaskPresent = _context.sent;\n\n              if (metaMaskPresent) {\n                _context.next = 5;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 5:\n              _context.next = 7;\n              return _this.checkIfAccountVerified();\n\n            case 7:\n              alreadyVerified = _context.sent;\n              _context.next = 10;\n              return _this.checkDepositPaid();\n\n            case 10:\n              paidDeposit = _context.sent;\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"resetError\", function () {\n      _this.setState({\n        errorTrue: false,\n        errorMessage: \"\"\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeVerificationType\", function () {\n      if (_this.state.verificationType == \"anonymous\") {\n        console.log(\"changing verification type to open\");\n\n        _this.setState({\n          verificationType: \"open\"\n        });\n      } else {\n        console.log(\"changing verification type to anonymous\");\n\n        _this.setState({\n          verificationType: \"anonymous\"\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"connectMetaMaskAccountInitialCheck\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var address, network, net, provider;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(true && typeof window.ethereum !== \"undefined\")) {\n                _context2.next = 17;\n                break;\n              }\n\n              // We are in the browser and metamask is running.\n              web3 = new Web3(window.ethereum);\n              _context2.next = 4;\n              return ethereum.selectedAddress;\n\n            case 4:\n              address = _context2.sent;\n              network = ethereum.networkVersion;\n              console.log(\"account\", address);\n              console.log(\"network\", network);\n              net = _this.networkIntToName(network);\n\n              _this.setState({\n                network: net,\n                account: address\n              });\n\n              if (!(address != null)) {\n                _context2.next = 14;\n                break;\n              }\n\n              console.log(\"setting retireved\");\n\n              _this.setState({\n                accountDetailsRetrieved: true\n              });\n\n              return _context2.abrupt(\"return\", true);\n\n            case 14:\n              return _context2.abrupt(\"return\", false);\n\n            case 17:\n              // We are on the server *OR* the user is not running metamask\n              provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\");\n              return _context2.abrupt(\"return\", false);\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"connectMetaMaskAccount\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var address, network, net, provider;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(true && typeof window.ethereum !== \"undefined\")) {\n                _context3.next = 20;\n                break;\n              }\n\n              _context3.next = 3;\n              return window.ethereum.request({\n                method: \"eth_requestAccounts\"\n              });\n\n            case 3:\n              web3 = new Web3(window.ethereum);\n              _context3.next = 6;\n              return ethereum.selectedAddress;\n\n            case 6:\n              address = _context3.sent;\n              network = ethereum.networkVersion;\n              console.log(\"account\", address);\n              console.log(\"network\", network);\n              net = _this.networkIntToName(network);\n\n              _this.setState({\n                network: net,\n                account: address\n              });\n\n              if (!(address != null)) {\n                _context3.next = 18;\n                break;\n              }\n\n              _this.setState({\n                accountDetailsRetrieved: true\n              });\n\n              _context3.next = 16;\n              return _this.checkIfAccountVerified();\n\n            case 16:\n              _context3.next = 18;\n              return _this.checkDepositPaid();\n\n            case 18:\n              _context3.next = 21;\n              break;\n\n            case 20:\n              // We are on the server *OR* the user is not running metamask\n              provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\");\n\n            case 21:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"networkIntToName\", function (networkId) {\n      switch (networkId) {\n        case \"1\":\n          return \"Main\";\n\n        case \"3\":\n          return \"Ropsten\";\n\n        case \"4\":\n          return \"Rinkeby\";\n\n        case \"42\":\n          return \"Kovan\";\n\n        case \"5\":\n          return \"Goerli\";\n\n        default:\n          return \"Custom\";\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkIfAccountVerified\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var accounts, res;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context4.sent;\n              _context4.next = 6;\n              return factory.methods.checkIfAddressVerified().call({\n                from: accounts[0]\n              });\n\n            case 6:\n              res = _context4.sent;\n\n              _this.setState({\n                accountAlreadyVerified: res\n              });\n\n              return _context4.abrupt(\"return\", true);\n\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.log(\"MetMask aerror\");\n\n              _this.setState({\n                errorMessage: \"It looks like you may be on the wrong MetaMask network\",\n                errorTrue: true\n              });\n\n              return _context4.abrupt(\"return\", false);\n\n            case 16:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 11]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"checkDepositPaid\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var accounts, res;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context5.sent;\n              _context5.next = 6;\n              return factory.methods.checkIfDepositPaid().call({\n                from: accounts[0]\n              });\n\n            case 6:\n              res = _context5.sent;\n\n              // this should be uncommented eventually as it will block the verifcation button if no deposit is paid\n              _this.setState({\n                depositAlreadyPaid: res\n              });\n\n              if (res) {\n                _this.setState({\n                  deposit_Status: \"Paid\"\n                });\n              } else {\n                _this.setState({\n                  deposit_Status: \"Not paid\"\n                });\n              }\n\n              return _context5.abrupt(\"return\", res);\n\n            case 12:\n              _context5.prev = 12;\n              _context5.t0 = _context5[\"catch\"](0);\n              console.log(\"error when initially checking account\");\n\n              _this.setState({\n                errorMessage: \"It looks like there was an error checking if you had paid the deposit\",\n                errorTrue: true\n              });\n\n              return _context5.abrupt(\"return\", false);\n\n            case 17:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[0, 12]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"sendDeposit\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var accounts, res;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _this.setState({\n                loaderDepositActive: true\n              });\n\n              _context6.prev = 1;\n\n              _this.setState({\n                deposit_Status: \"Sending deposit...\"\n              });\n\n              _context6.next = 5;\n              return web3.eth.getAccounts();\n\n            case 5:\n              accounts = _context6.sent;\n              _context6.next = 8;\n              return factory.methods.payDeposit().send({\n                from: accounts[0],\n                value: 20 // 20 wei deposit\n\n              });\n\n            case 8:\n              _context6.next = 10;\n              return factory.methods.checkIfDepositPaid().call({\n                from: accounts[0]\n              });\n\n            case 10:\n              res = _context6.sent;\n\n              if (res) {\n                _this.setState({\n                  depositAlreadyPaid: res,\n                  deposit_Status: \"Paid\"\n                });\n              }\n\n              _context6.next = 18;\n              break;\n\n            case 14:\n              _context6.prev = 14;\n              _context6.t0 = _context6[\"catch\"](1);\n              console.log(\"error in submit sol proof\");\n\n              _this.setState({\n                errorMessage: _context6.t0.message,\n                errorTrue: true\n              });\n\n            case 18:\n              _this.setState({\n                loaderDepositActive: false\n              });\n\n            case 19:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[1, 14]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"createNewStripeSession\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var accounts, requestOptions, response, data;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context7.sent;\n\n              _this.setState({\n                verification_status: \"server checking deposit payment\"\n              });\n\n              requestOptions = {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  title: 'POST of metamask address',\n                  address: accounts[0],\n                  verificationType: _this.state.verificationType\n                })\n              };\n              _context7.next = 8;\n              return fetch('/api/create-verification-session', requestOptions);\n\n            case 8:\n              response = _context7.sent;\n              _context7.next = 11;\n              return response.json();\n\n            case 11:\n              data = _context7.sent;\n\n              _this.setState({\n                clientSecret: data.clientSecret,\n                verification_session_id: data.id\n              }); // fetch('/api/create-verification-session')\n              // .then(res => res.json())\n              // .then(data => this.setState({clientSecret: data.clientSecret, verification_session_id: data.id}))\n\n\n              _context7.t0 = _this;\n              _context7.next = 16;\n              return stripePromise;\n\n            case 16:\n              _context7.t1 = _context7.sent;\n              _context7.t2 = {\n                stripe: _context7.t1\n              };\n\n              _context7.t0.setState.call(_context7.t0, _context7.t2);\n\n              _context7.next = 26;\n              break;\n\n            case 21:\n              _context7.prev = 21;\n              _context7.t3 = _context7[\"catch\"](0);\n              console.log(\"error when trying to create new verification session\");\n\n              _this.setState({\n                errorMessage: \"It looks like there was an issue creating a new verification session\",\n                errorTrue: true\n              });\n\n              return _context7.abrupt(\"return\", false);\n\n            case 26:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, null, [[0, 21]]);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"verifyIdentity\", /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(event) {\n        var _this$state, stripe, clientSecret, _yield$stripe$verifyI, error;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                event.preventDefault();\n\n                _this.resetError();\n\n                _this.setState({\n                  loaderVerificationActive: true\n                }); // creating new stripe session on button click\n\n\n                _context8.next = 5;\n                return _this.createNewStripeSession();\n\n              case 5:\n                _this$state = _this.state, stripe = _this$state.stripe, clientSecret = _this$state.clientSecret;\n\n                if (!(!stripe || !clientSecret)) {\n                  _context8.next = 9;\n                  break;\n                }\n\n                _this.setState({\n                  loaderVerificationActive: false,\n                  errorTrue: true,\n                  errorMessage: \"Stripe not connecting\"\n                });\n\n                return _context8.abrupt(\"return\");\n\n              case 9:\n                _context8.next = 11;\n                return stripe.verifyIdentity(clientSecret);\n\n              case 11:\n                _yield$stripe$verifyI = _context8.sent;\n                error = _yield$stripe$verifyI.error;\n\n                if (error) {\n                  console.log('[error]', error);\n                } else {\n                  console.log('Verification submitted!');\n\n                  _this.pollForStatus();\n                }\n\n              case 14:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      return function (_x) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"pollForStatus\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (_this.state.verification_status !== \"passed_database_check\" && _this.state.verification_status !== \"failed_database_check\") {\n                setTimeout(_this.pollForStatus, 5000);\n\n                _this.fetchStatus();\n              }\n\n              if (_this.state.verification_status !== \"processing\" && _this.state.verification_status !== \"not_submitted\" && _this.state.verification_status !== \"verified_waiting_for_database_check\" && _this.state.verification_status !== \"server checking deposit payment\") {\n                _this.setState({\n                  loaderVerificationActive: false\n                });\n\n                if (_this.state.verification_status == \"passed_database_check\") {\n                  _this.setState({\n                    loginDetailsRecieved: true,\n                    hasLoginDetails: true\n                  });\n                }\n              }\n\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchStatus\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              //handle error if session id isn't set\n              fetch('/api/get-verification-session/' + _this.state.verification_session_id).then(function (res) {\n                return res.json();\n              }).then(function (data) {\n                return _this.setState({\n                  verification_status: data.status,\n                  sessionIdRandNum: data.randSeededNum,\n                  sessionIdMimcNum: data.mimcVal\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"hasLoginCredentials\", function () {\n      _this.setState({\n        hasLoginDetails: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mimcHashNum\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n      var preImage1, out;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              preImage1 = document.getElementById('mimc_num').value;\n              console.log(preImage1);\n              out = mimc(preImage1);\n              console.log(out.toString());\n\n              _this.setState({\n                mimcHashNumState: out.toString()\n              });\n\n            case 5:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"verifyPreimage\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n      var preImage, hash, solidityProof;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              preImage = parseInt(document.getElementById('preImageCredential').value);\n              console.log(preImage);\n              hash = document.getElementById('mimcHashCredential').value;\n              console.log(hash);\n              _context12.next = 6;\n              return calculateProof(preImage, hash);\n\n            case 6:\n              solidityProof = _context12.sent;\n\n              _this.setState({\n                solidityVerifierProof: solidityProof\n              });\n\n              console.log(solidityProof);\n\n            case 9:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"submitSolProof\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n      var preImage, hash, solidityProof, fullProof, pi_a, pi_b, pi_c, inputs, accounts, res;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              // event.preventDefault();\n              _this.resetError();\n\n              _this.setState({\n                loaderProofActive: true\n              }); // CREATING ZKP FROM HASH AND PRE-IMAGE \n\n\n              _this.setState({\n                proof_status: \"Creating ZKP\"\n              });\n\n              preImage = parseInt(document.getElementById('preImageCredential').value);\n              console.log(preImage);\n              hash = document.getElementById('mimcHashCredential').value;\n              console.log(hash);\n              _context13.next = 9;\n              return calculateProof(preImage, hash);\n\n            case 9:\n              solidityProof = _context13.sent;\n              // this.setState({solidityVerifierProof: solidityProof});\n              console.log(solidityProof); // SUBMIT ZKP TO CONTRACT  \n\n              _this.setState({\n                proof_status: \"Starting ETH transaction\"\n              });\n\n              fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n              pi_a = fullProof[0];\n              pi_b = fullProof[1];\n              pi_c = fullProof[2];\n              inputs = fullProof[3]; // send zk proof to verifyHash function\n\n              _context13.prev = 17;\n\n              _this.setState({\n                proof_status: \"Submitting ZKP...\"\n              });\n\n              _context13.next = 21;\n              return web3.eth.getAccounts();\n\n            case 21:\n              accounts = _context13.sent;\n              _context13.next = 24;\n              return factory.methods.verifyHash(pi_a, pi_b, pi_c, inputs).send({\n                from: accounts[0]\n              });\n\n            case 24:\n              console.log(\"submitted zkp successfully\"); // Router.reload(window.location.pathname)\n\n              _context13.next = 27;\n              return factory.methods.checkIfAddressVerified().call({\n                from: accounts[0]\n              });\n\n            case 27:\n              res = _context13.sent;\n\n              _this.setState({\n                zkResult: res.toString(),\n                accountAlreadyVerified: res\n              });\n\n              _context13.next = 35;\n              break;\n\n            case 31:\n              _context13.prev = 31;\n              _context13.t0 = _context13[\"catch\"](17);\n              console.log(\"error in submit sol proof\");\n\n              _this.setState({\n                errorMessage: _context13.t0.message,\n                errorTrue: true\n              });\n\n            case 35:\n              _this.setState({\n                loaderProofActive: false\n              });\n\n            case 36:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, null, [[17, 31]]);\n    })));\n\n    return _this;\n  }\n\n  _createClass(CampaignIndex, [{\n    key: \"render\",\n    value: function render() {\n      var _jsxDEV2;\n\n      return /*#__PURE__*/_jsxDEV(Layout, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: 25\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: this.changeVerificationType,\n              style: {\n                marginBottom: 25\n              },\n              children: /*#__PURE__*/_jsxDEV(OptionButton, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n                width: 6,\n                floated: \"left\",\n                className: \"statusBox\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Status \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 447,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"Account:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 449,\n                  columnNumber: 27\n                }, this), !this.state.accountDetailsRetrieved ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: this.connectMetaMaskAccount,\n                  className: \"button\",\n                  children: \"Connect Wallet\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 451,\n                  columnNumber: 27\n                }, this) : /*#__PURE__*/_jsxDEV(AccountMessage, {\n                  network: this.state.network,\n                  account: this.state.account,\n                  verified: this.state.accountAlreadyVerified\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 455,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Deposit: \", this.state.deposit_Status, \" \\xA0 \\xA0\", this.state.loaderDepositActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                    active: true,\n                    inline: true,\n                    size: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 466,\n                    columnNumber: 29\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 463,\n                  columnNumber: 27\n                }, this), !this.state.depositAlreadyPaid && this.state.accountDetailsRetrieved ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: this.sendDeposit,\n                  disabled: !this.state.accountDetailsRetrieved,\n                  className: \"button\",\n                  children: \"Send deposit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 472,\n                  columnNumber: 29\n                }, this) : null, /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Verification Session: \", this.state.verification_status, \" \\xA0 \\xA0\", this.state.loaderVerificationActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                    active: true,\n                    inline: true,\n                    size: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 482,\n                    columnNumber: 29\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 479,\n                  columnNumber: 27\n                }, this), this.state.depositAlreadyPaid ? /*#__PURE__*/_jsxDEV(\"button\", (_jsxDEV2 = {\n                  onClick: this.verifyIdentity,\n                  disabled: !this.state.accountDetailsRetrieved\n                }, _defineProperty(_jsxDEV2, \"disabled\", !this.state.depositAlreadyPaid), _defineProperty(_jsxDEV2, \"className\", \"button\"), _defineProperty(_jsxDEV2, \"children\", \"Verify\"), _jsxDEV2), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 487,\n                  columnNumber: 29\n                }, this) : null, /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Proof: \", this.state.proof_status, \" \\xA0 \\xA0\", this.state.loaderProofActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                    active: true,\n                    inline: true,\n                    size: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 498,\n                    columnNumber: 29\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 495,\n                  columnNumber: 27\n                }, this), this.state.accountDetailsRetrieved ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: !this.state.hasLoginDetails ? /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: this.hasLoginCredentials,\n                    disabled: !this.state.accountDetailsRetrieved,\n                    className: \"button\",\n                    children: \"If you already have login credentials click here\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 508,\n                    columnNumber: 31\n                  }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: this.submitSolProof,\n                    disabled: !this.state.accountDetailsRetrieved,\n                    className: \"button\",\n                    children: \"Send proof\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 513,\n                    columnNumber: 31\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 505,\n                  columnNumber: 29\n                }, this) : null, this.state.errorTrue ? /*#__PURE__*/_jsxDEV(Message, {\n                  negative: true,\n                  children: [/*#__PURE__*/_jsxDEV(Message.Header, {\n                    children: \"Error\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 526,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: this.state.errorMessage\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 527,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 525,\n                  columnNumber: 27\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n                width: 9,\n                floated: \"right\",\n                className: \"statusBox\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Login credentials\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 536,\n                  columnNumber: 23\n                }, this), !this.state.loginDetailsRecieved ?\n                /*#__PURE__*/\n                // this.state.loginDetailsRecieved ?\n                _jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: [\"Pre-image: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 541,\n                      columnNumber: 49\n                    }, this), \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 541,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(PreImageButton, {\n                    children: this.state.sessionIdRandNum\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 542,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: [\"Hash: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 544,\n                      columnNumber: 44\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 544,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(HashButton, {\n                    children: \"13430753380610635471786589099759983096423845689623637123238304661144465381689\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 545,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 540,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"No login details yet...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 548,\n                  columnNumber: 34\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 551,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Create and submit proof\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 554,\n                  columnNumber: 23\n                }, this), this.state.hasLoginDetails ? /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: /*#__PURE__*/_jsxDEV(Input, {\n                      id: \"preImageCredential\",\n                      placeholder: \"Pre-image\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 558,\n                      columnNumber: 26\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 558,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: /*#__PURE__*/_jsxDEV(Input, {\n                      id: \"mimcHashCredential\",\n                      placeholder: \"Hash\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 559,\n                      columnNumber: 26\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 559,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 557,\n                  columnNumber: 23\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this);\n    }\n  }]);\n\n  return CampaignIndex;\n}(Component);\n\nexport default CampaignIndex;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/pages/index.js"],"names":["React","Component","Message","Button","Input","Loader","Grid","Router","Layout","PreImageButton","HashButton","AccountMessage","OptionButton","factory","Web3","web3","mimc","calculateProof","loadStripe","stripePromise","CampaignIndex","errorMessage","errorTrue","verificationType","accountAlreadyVerified","account","network","accountDetailsRetrieved","clientSecret","stripe","verification_session_id","sessionIdRandNum","sessionIdMimcNum","depositAlreadyPaid","deposit_Status","loaderDepositActive","verification_status","loaderVerificationActive","proof_status","loaderProofActive","loginDetailsRecieved","hasLoginDetails","mimcHashNumState","solidityVerifierProof","zkResult","connectMetaMaskAccountInitialCheck","metaMaskPresent","checkIfAccountVerified","alreadyVerified","checkDepositPaid","paidDeposit","setState","state","console","log","window","ethereum","selectedAddress","address","networkVersion","net","networkIntToName","provider","providers","HttpProvider","request","method","networkId","eth","getAccounts","accounts","methods","checkIfAddressVerified","call","from","res","checkIfDepositPaid","payDeposit","send","value","message","requestOptions","headers","body","JSON","stringify","title","fetch","response","json","data","id","event","preventDefault","resetError","createNewStripeSession","verifyIdentity","error","pollForStatus","setTimeout","fetchStatus","then","status","randSeededNum","mimcVal","preImage1","document","getElementById","out","toString","preImage","parseInt","hash","solidityProof","fullProof","parse","pi_a","pi_b","pi_c","inputs","verifyHash","marginTop","changeVerificationType","marginBottom","connectMetaMaskAccount","sendDeposit","hasLoginCredentials","submitSolProof"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Message, Button, Input, Loader, Grid } from \"semantic-ui-react\";\nimport { Router } from '../routes';\n\nimport Layout from \"../components/Layout\";\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nimport AccountMessage from \"../components/Accounts\";\nimport OptionButton from \"../components/OptionButton\";\n\nimport factory from \"../ethereum/verification\";\nimport Web3 from \"web3\"; // use this to have connect account button\nlet web3; \n\nimport mimc from '../public/mimc.ts';\nimport { calculateProof } from '../public/prover.js'\n\nimport {loadStripe} from '@stripe/stripe-js';\n\nconst stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n\nclass CampaignIndex extends Component {\n \n   state = {\n    errorMessage: '',\n    errorTrue: false,\n    verificationType: \"anonymous\",   \n    // eth\n    accountAlreadyVerified: false,\n    account: \"No account\",\n    network: \"No network\",\n    accountDetailsRetrieved: false,\n    // stripe\n    clientSecret: null,\n    stripe: null,\n    verification_session_id: null,\n    sessionIdRandNum: null,\n    sessionIdMimcNum: null,\n    //deposit\n    depositAlreadyPaid: false,\n    deposit_Status: \"Not paid\",\n    loaderDepositActive: false,\n    // verification\n    verification_status: \"Not started\",\n    loaderVerificationActive: false,\n    // proof\n    proof_status: \"Not sent\",\n    loaderProofActive: false,\n    //login\n    loginDetailsRecieved: false, // this is for if they get details in current session\n    hasLoginDetails: false, // this is for if they already have details\n    //zkp\n    mimcHashNumState:null,\n    solidityVerifierProof:null,\n    zkResult: null,\n  };  \n\n  componentDidMount = async () => {\n    // check if metamask installed and account connected\n    const metaMaskPresent = await this.connectMetaMaskAccountInitialCheck();\n    if(!metaMaskPresent) {return;}\n\n    // checking if account is already verified\n    // at the moment I haven't disabled rest of flow if already verified to make testing easier\n    const alreadyVerified = await this.checkIfAccountVerified();\n\n    // check if deposit is paid\n    const paidDeposit = await this.checkDepositPaid();\n    // if(!paidDeposit) {return;} // this should be live for actual flow\n    \n  }\n\n  resetError = () => {\n    this.setState({errorTrue: false, errorMessage: \"\"});\n  }  \n\n  changeVerificationType = () => {\n    if(this.state.verificationType == \"anonymous\") {\n      console.log(\"changing verification type to open\")\n      this.setState({verificationType: \"open\"})\n    } else {\n      console.log(\"changing verification type to anonymous\")\n      this.setState({verificationType: \"anonymous\"})\n    }\n  }\n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------METAMASK STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n  connectMetaMaskAccountInitialCheck = async () => {\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // We are in the browser and metamask is running.\n      \n      web3 = new Web3(window.ethereum);\n\n      var address = await ethereum.selectedAddress;\n      var network = ethereum.networkVersion;\n\n      console.log(\"account\", address)\n      console.log(\"network\", network)\n\n      const net = this.networkIntToName(network)\n\n      this.setState({network: net, account: address})\n\n      if (address != null) {\n        console.log(\"setting retireved\")\n        this.setState({accountDetailsRetrieved: true})\n        return true\n      }\n      return false\n\n    } else {\n      // We are on the server *OR* the user is not running metamask\n      const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\"\n      );\n      return false\n    }\n  }\n  \n  connectMetaMaskAccount = async () => {\n    // let web3;\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // We are in the browser and metamask is running.\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      \n      web3 = new Web3(window.ethereum);\n\n      var address = await ethereum.selectedAddress;\n      var network = ethereum.networkVersion;\n\n      console.log(\"account\", address)\n      console.log(\"network\", network)\n\n      const net = this.networkIntToName(network)\n\n      this.setState({network: net, account: address})\n\n      if (address != null) {\n        this.setState({accountDetailsRetrieved: true})\n        await this.checkIfAccountVerified()\n        await this.checkDepositPaid()\n      }\n\n    } else {\n      // We are on the server *OR* the user is not running metamask\n      const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\"\n      );\n    }\n  }\n\n  networkIntToName = (networkId) => {\n    switch(networkId) {\n      case \"1\":\n          return \"Main\"\n      case \"3\":\n        return \"Ropsten\"\n      case \"4\":\n        return \"Rinkeby\"\n      case \"42\":\n        return \"Kovan\";\n      case \"5\":\n        return \"Goerli\";\n      default: \n        return \"Custom\";\n    }\n}\n\n\n  checkIfAccountVerified = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n      let res = await factory.methods\n        .checkIfAddressVerified()\n        .call({\n            from: accounts[0]\n      });\n      this.setState({accountAlreadyVerified: res});\n      return true;\n\n    } catch (err) {\n        console.log(\"MetMask aerror\")\n        this.setState({ \n          errorMessage: \"It looks like you may be on the wrong MetaMask network\", \n          errorTrue: true });\n        return false;\n    }\n  }\n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------DEPOSIT STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  checkDepositPaid = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n      let res = await factory.methods\n        .checkIfDepositPaid()\n        .call({\n            from: accounts[0]\n      });\n      // this should be uncommented eventually as it will block the verifcation button if no deposit is paid\n      this.setState({depositAlreadyPaid: res});\n\n      if(res) {\n        this.setState({deposit_Status: \"Paid\"})\n      } else {\n        this.setState({deposit_Status: \"Not paid\"})\n      }\n      return res;\n\n    } catch (err) {\n        console.log(\"error when initially checking account\")\n        this.setState({ \n          errorMessage: \"It looks like there was an error checking if you had paid the deposit\", \n          errorTrue: true });\n        return false;\n    } \n  }\n\n  sendDeposit = async () => {\n    this.setState({ loaderDepositActive: true});\n  \n    try {\n      this.setState({deposit_Status: \"Sending deposit...\"})\n      const accounts = await web3.eth.getAccounts();\n      await factory.methods\n          .payDeposit()\n          .send({\n              from: accounts[0],\n              value: 20 // 20 wei deposit\n      });\n  \n      let res = await factory.methods\n          .checkIfDepositPaid()\n          .call({\n              from: accounts[0]\n      });\n      \n      if (res) {\n          this.setState({depositAlreadyPaid: res, deposit_Status: \"Paid\"})\n      }\n  \n    } catch (err) {\n        console.log(\"error in submit sol proof\")\n        this.setState({ errorMessage: err.message, errorTrue: true });\n    }\n  this.setState({ loaderDepositActive: false});\n  \n  }\n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------STRIPE STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  createNewStripeSession = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n\n      this.setState({ verification_status: \"server checking deposit payment\" })\n\n      const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          title: 'POST of metamask address',\n          address: accounts[0],\n          verificationType: this.state.verificationType })\n      };\n      const response = await fetch('/api/create-verification-session', requestOptions);\n      const data = await response.json();\n      this.setState({clientSecret: data.clientSecret, verification_session_id: data.id})\n\n      // fetch('/api/create-verification-session')\n      // .then(res => res.json())\n      // .then(data => this.setState({clientSecret: data.clientSecret, verification_session_id: data.id}))\n\n      this.setState({ stripe: await stripePromise })\n    } catch (err) {\n      console.log(\"error when trying to create new verification session\")\n      this.setState({ \n        errorMessage: \"It looks like there was an issue creating a new verification session\", \n        errorTrue: true });\n      return false;\n    }\n\n  }\n\n\n  verifyIdentity = async (event) => {\n    event.preventDefault();\n\n    this.resetError()\n    this.setState({ loaderVerificationActive: true});\n\n    // creating new stripe session on button click\n    await this.createNewStripeSession();\n\n    let { stripe, clientSecret } = this.state;\n    \n    if (!stripe || !clientSecret) {\n      this.setState({ loaderVerificationActive: false, errorTrue: true, errorMessage: \"Stripe not connecting\"});\n      return;\n    }\n\n    // Show the verification modal.\n    const { error } = await stripe.verifyIdentity(clientSecret);\n    \n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('Verification submitted!');\n      this.pollForStatus();\n    }\n\n  }\n\n  pollForStatus = async() => {\n\n    if(this.state.verification_status !== \"passed_database_check\" && this.state.verification_status !== \"failed_database_check\") {\n      setTimeout(this.pollForStatus, 5000)\n      this.fetchStatus()\n    }\n    if(this.state.verification_status !== \"processing\" && \n        this.state.verification_status !== \"not_submitted\" && \n        this.state.verification_status !== \"verified_waiting_for_database_check\" &&\n        this.state.verification_status !== \"server checking deposit payment\") \n        {\n          this.setState({ loaderVerificationActive: false});\n          \n          if(this.state.verification_status == \"passed_database_check\") {\n            this.setState({loginDetailsRecieved: true, hasLoginDetails: true});\n        }\n    }\n\n  }\n\nfetchStatus = async () => {\n    //handle error if session id isn't set\n    fetch('/api/get-verification-session/' + this.state.verification_session_id)\n      .then(res => res.json())\n      .then(data => this.setState({\n        verification_status: data.status, \n        sessionIdRandNum: data.randSeededNum,\n        sessionIdMimcNum: data.mimcVal,\n      }))\n  }\n\n\n  //-------------------------------------------------------------------------------------------\n  // ------------------------------------LOGIN DETAILS STUFF------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  hasLoginCredentials = () => {\n    this.setState({hasLoginDetails: true})\n  }\n\n  mimcHashNum = async () => {\n  const preImage1 = document.getElementById('mimc_num').value\n  console.log(preImage1)\n  const out = mimc(preImage1);\n  console.log(out.toString())\n  this.setState({mimcHashNumState: out.toString()});\n\n  }\n\nverifyPreimage = async() => {\n  const preImage = parseInt(document.getElementById('preImageCredential').value);\n  console.log(preImage)\n  const hash = document.getElementById('mimcHashCredential').value;\n  console.log(hash)\n  const solidityProof = await calculateProof(preImage, hash);\n  this.setState({solidityVerifierProof: solidityProof});\n  console.log(solidityProof)\n}\n\nsubmitSolProof = async () => {\n  // event.preventDefault();\n  this.resetError()\n  this.setState({ loaderProofActive: true});\n\n  // CREATING ZKP FROM HASH AND PRE-IMAGE \n  this.setState({proof_status: \"Creating ZKP\"})\n  const preImage = parseInt(document.getElementById('preImageCredential').value);\n  console.log(preImage)\n  const hash = document.getElementById('mimcHashCredential').value;\n  console.log(hash)\n  const solidityProof = await calculateProof(preImage, hash);\n  // this.setState({solidityVerifierProof: solidityProof});\n  console.log(solidityProof)\n\n  // SUBMIT ZKP TO CONTRACT  \n  this.setState({proof_status: \"Starting ETH transaction\"})\n\n  const fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n\n  const pi_a = fullProof[0]\n  const pi_b = fullProof[1]\n  const pi_c = fullProof[2]\n  const inputs = fullProof[3]\n  \n\n  // send zk proof to verifyHash function\n  try {\n      this.setState({proof_status: \"Submitting ZKP...\"})\n      const accounts = await web3.eth.getAccounts();\n      await factory.methods\n          .verifyHash(pi_a,pi_b,pi_c,inputs)\n          .send({\n              from: accounts[0]\n      });\n      \n      console.log(\"submitted zkp successfully\")\n      // Router.reload(window.location.pathname)\n\n      let res = await factory.methods\n          .checkIfAddressVerified()\n          .call({\n              from: accounts[0]\n      });\n      this.setState({zkResult: res.toString(), accountAlreadyVerified: res});\n\n    } catch (err) {\n        console.log(\"error in submit sol proof\")\n        this.setState({ errorMessage: err.message, errorTrue: true });\n    }\n\n    this.setState({loaderProofActive: false});\n  }\n  \n\n  render() {\n    return (\n        <Layout >\n            <div>\n              <div style={{marginTop: 25}}>\n\n              <div onClick={this.changeVerificationType} style={{marginBottom: 25}}>\n              <OptionButton ></OptionButton>\n              </div>\n\n              <Grid >\n                <Grid.Column width={6} floated='left' className=\"statusBox\">\n                        {/* --------------------SESSION STATUS--------------------- */}\n                        <h2>Status </h2>\n                        {/* --------------------address status--------------------- */}\n                          <h3>Account:</h3>\n                          { !this.state.accountDetailsRetrieved ? \n                          <button onClick={this.connectMetaMaskAccount} \n                          className=\"button\"                                    \n                          >Connect Wallet</button> \n                          : \n                          <AccountMessage \n                            network={this.state.network} \n                            account={this.state.account}\n                            verified={this.state.accountAlreadyVerified}\n                          />\n                          }\n\n                         {/* --------------------deposit status--------------------- */}\n                          <h3>Deposit: {this.state.deposit_Status} &nbsp; &nbsp;\n                          {\n                            this.state.loaderDepositActive ?\n                            <Loader active inline size=\"small\" />: null\n                          }\n                          </h3>\n\n                          {\n                            (!this.state.depositAlreadyPaid && this.state.accountDetailsRetrieved) ?\n                            <button onClick={this.sendDeposit} \n                            disabled={!this.state.accountDetailsRetrieved}\n                            className=\"button\" \n                            >Send deposit</button>\n                            : null\n                          }\n                          {/* --------------------verification status--------------------- */}\n                          <h3>Verification Session: {this.state.verification_status} &nbsp; &nbsp;\n                          {\n                            this.state.loaderVerificationActive ?\n                            <Loader active inline size=\"small\" />: null\n                          }\n                          </h3>\n                          {\n                            this.state.depositAlreadyPaid ?\n                            <button onClick={this.verifyIdentity} \n                            disabled={!this.state.accountDetailsRetrieved}\n                            disabled={!this.state.depositAlreadyPaid}\n                            className=\"button\" \n                            >Verify</button>\n                            : null\n                          }\n                          {/* --------------------proof message--------------------- */}\n                          <h3>Proof: {this.state.proof_status} &nbsp; &nbsp;\n                          {\n                            this.state.loaderProofActive ?\n                            <Loader active inline size=\"small\" />: null\n                          }\n                          </h3>\n                          {/* this is messy but what it does is: If no wallet connected don't show anything */}\n                          {/* if wallet is connected show button asking if user has login details */}\n                          {\n                            this.state.accountDetailsRetrieved ?\n                            <div>\n                            {\n                              !this.state.hasLoginDetails ?\n                              <button onClick={this.hasLoginCredentials} \n                              disabled={!this.state.accountDetailsRetrieved}\n                              className=\"button\" \n                              >If you already have login credentials click here</button>\n                              :\n                              <button onClick={this.submitSolProof} \n                              disabled={!this.state.accountDetailsRetrieved}\n                              className=\"button\" \n                              >Send proof</button>\n                            }\n                            </div>\n                            : null\n                          }\n\n                          {/* --------------------error message--------------------- */}\n                          {\n                          this.state.errorTrue ?\n                          <Message negative>\n                            <Message.Header>Error</Message.Header>\n                            <p>{this.state.errorMessage}</p>\n                          </Message> : null\n                          }\n                          \n                    </Grid.Column>\n                    <Grid.Column  width={9} floated='right' className=\"statusBox\" >\n                      \n                      {/* --------------------LOGIN CREDENTIALS--------------------- */}\n                      {/* only show if user has logindetails recieved in current session */}\n                      <h2>Login credentials</h2>\n                      {\n                        !this.state.loginDetailsRecieved ?\n                        // this.state.loginDetailsRecieved ?\n                        <div>\n                          <h3>Pre-image: &nbsp; <br></br> </h3> \n                          <PreImageButton>{this.state.sessionIdRandNum}</PreImageButton>\n                      \n                          <h3>Hash: &nbsp; <br></br></h3>\n                          <HashButton>13430753380610635471786589099759983096423845689623637123238304661144465381689</HashButton>\n                          {/* <HashButton>{this.state.sessionIdMimcNum}</HashButton> */}\n\n                        </div> : <h4>No login details yet...</h4>\n                      }\n                                      \n                      <hr/>\n                      {/* ---------------------SUBMIT PROOF---------------------- */}\n                      {/* only show if hasLoginDetails is true  */}\n                      <h2>Create and submit proof</h2>\n                      {\n                      this.state.hasLoginDetails ?\n                      <p>\n                      <p><Input id=\"preImageCredential\" placeholder=\"Pre-image\"></Input></p>\n                      <p><Input id=\"mimcHashCredential\" placeholder=\"Hash\"></Input></p>\n                      </p> : null\n                      }\n                      \n                    </Grid.Column>\n                </Grid>\n            </div>\n            </div>\n        </Layout>\n    );\n  }\n}\n\nexport default CampaignIndex;\n"]},"metadata":{},"sourceType":"module"}