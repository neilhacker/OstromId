{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/pages/testing.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Button, Icon, Dimmer } from \"semantic-ui-react\";\nimport Layout from \"../components/Layout\";\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nimport { Router } from '../routes'; // import web3 from '../ethereum/web3' // use this to automatically scan for metamask\n\nimport Web3 from \"web3\"; // use this to have connect account button\n// import web3Call from \"../ethereum/web3\";\n\nvar web3;\n\nvar CampaignIndex = /*#__PURE__*/function (_Component) {\n  _inherits(CampaignIndex, _Component);\n\n  var _super = _createSuper(CampaignIndex);\n\n  function CampaignIndex() {\n    var _this;\n\n    _classCallCheck(this, CampaignIndex);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      errorTrue: false,\n      errorMessage: \"\",\n      accountAlreadyVerified: false,\n      account: \"No account\",\n      network: \"No network\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.connectMetaMaskAccount();\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"connectMetaMaskAccount\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var address, network, net, provider;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(true && typeof window.ethereum !== \"undefined\")) {\n                _context2.next = 13;\n                break;\n              }\n\n              // We are in the browser and metamask is running.\n              // await window.ethereum.request({ method: \"eth_requestAccounts\" });\n              web3.eth.getAccounts();\n              web3 = new Web3(window.ethereum);\n              _context2.next = 5;\n              return ethereum.selectedAddress;\n\n            case 5:\n              address = _context2.sent;\n              network = ethereum.networkVersion;\n              console.log(\"account\", address);\n              console.log(\"network\", network);\n              net = _this.networkIntToName(network);\n\n              _this.setState({\n                network: net,\n                account: address\n              });\n\n              _context2.next = 14;\n              break;\n\n            case 13:\n              // We are on the server *OR* the user is not running metamask\n              provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\");\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"networkIntToName\", function (networkId) {\n      switch (networkId) {\n        case \"1\":\n          return \"main\";\n\n        case \"3\":\n          return \"ropsten\";\n\n        case \"4\":\n          return \"rinkeby\";\n\n        case \"42\":\n          return \"kovan\";\n\n        case \"5\":\n          return \"goerli\";\n\n        default:\n          return \"custom\";\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(CampaignIndex, [{\n    key: \"render\",\n    // checkMetaMask = async () => {\n    //   try {\n    //     const accounts = await web3.eth.getAccounts();\n    //     this.setState({account: accounts[0]})\n    //     return true;\n    //   } catch (err) {\n    //       console.log(\"MetaMask error\")\n    //       this.setState({ \n    //         errorMessage: \"It looks like you don't have metamask up and running, which you need to use this service\", \n    //         errorTrue: true });\n    //       return false;\n    //   }\n    // }\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(Layout, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: 100,\n              marginLeft: 200\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.connectMetaMaskAccount,\n              children: \"click\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Account: \", this.state.account]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Network: \", this.state.network]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this);\n    }\n  }]);\n\n  return CampaignIndex;\n}(Component);\n\nexport default CampaignIndex;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/pages/testing.js"],"names":["React","Component","Button","Icon","Dimmer","Layout","PreImageButton","HashButton","Router","Web3","web3","CampaignIndex","errorTrue","errorMessage","accountAlreadyVerified","account","network","connectMetaMaskAccount","window","ethereum","eth","getAccounts","selectedAddress","address","networkVersion","console","log","net","networkIntToName","setState","provider","providers","HttpProvider","networkId","marginTop","marginLeft","state"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, Icon, Dimmer } from \"semantic-ui-react\";\nimport Layout from \"../components/Layout\";\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nimport { Router } from '../routes';\n\n// import web3 from '../ethereum/web3' // use this to automatically scan for metamask\nimport Web3 from \"web3\"; // use this to have connect account button\n// import web3Call from \"../ethereum/web3\";\nlet web3; \n\nclass CampaignIndex extends Component {\n  state = {\n    errorTrue: false,\n    errorMessage: \"\",\n    accountAlreadyVerified: false,\n    account: \"No account\",\n    network: \"No network\",\n\n  }\n \n  componentDidMount = async () => {\n    await this.connectMetaMaskAccount();\n\n  }\n\n  // componentDidUpdate = async () => {\n  //   this.checkMetaMask();\n\n  // }\n    \n\n  connectMetaMaskAccount = async () => {\n    // let web3;\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // We are in the browser and metamask is running.\n      // await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      web3.eth.getAccounts()\n\n      web3 = new Web3(window.ethereum);\n      var address = await ethereum.selectedAddress;\n      var network = ethereum.networkVersion;\n\n      console.log(\"account\", address)\n      console.log(\"network\", network)\n\n      const net = this.networkIntToName(network)\n\n      this.setState({network: net, account: address})\n\n    } else {\n      // We are on the server *OR* the user is not running metamask\n      const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\"\n      );\n    }\n  }\n\n  networkIntToName = (networkId) => {\n    switch(networkId) {\n      case \"1\":\n          return \"main\"\n      case \"3\":\n        return \"ropsten\"\n      case \"4\":\n        return \"rinkeby\"\n      case \"42\":\n        return \"kovan\";\n      case \"5\":\n        return \"goerli\";\n      default: \n        return \"custom\";\n    }\n}\n\n  // checkMetaMask = async () => {\n  //   try {\n  //     const accounts = await web3.eth.getAccounts();\n  //     this.setState({account: accounts[0]})\n  //     return true;\n\n  //   } catch (err) {\n  //       console.log(\"MetaMask error\")\n  //       this.setState({ \n  //         errorMessage: \"It looks like you don't have metamask up and running, which you need to use this service\", \n  //         errorTrue: true });\n  //       return false;\n  //   }\n  // }\n\n  render() {\n\n    return (\n        <Layout>\n          <div>\n          <div style={{marginTop: 100, marginLeft: 200}}>\n\n          \n          <button onClick={this.connectMetaMaskAccount}>click</button> \n          <h3>Account: {this.state.account}</h3>    \n          <h3>Network: {this.state.network}</h3>               \n          </div>\n          </div>\n        </Layout>\n    );\n  }\n}\n\nexport default CampaignIndex;\n"]},"metadata":{},"sourceType":"module"}