{"ast":null,"code":"const stripe = require('stripe')('sk_test_51J305OC6YuwVjGqqdtMScisG2JWYy339dNtTGf7QE44BdrPbWPqeMKd5WF1nfpnKYhAmbh8GGQbiaolofct52IgZ003WkhWzMr');\n\nexport default async function handler(req, res) {\n  const adr = req.body.address;\n  console.log(\"\\u001b[1;32m [CVS] \\u001b[0m \", req.body);\n  console.log(\"\\u001b[1;32m [CVS] \\u001b[0m \", adr);\n  const depositCheck = await ethereumStuff(adr);\n  console.log(`\\u001b[1;32m [CVS] \\u001b[0m address ${adr} deposit ${depositCheck}`);\n  const verificationSession = await stripe.identity.verificationSessions.create({\n    type: 'document',\n    metadata: {\n      passedDatabaseCheck: null\n    }\n  }); // Return only the client secret and id to the frontend.\n\n  const clientSecret = verificationSession.client_secret;\n  const {\n    id\n  } = verificationSession;\n  res.status(200).json({\n    clientSecret,\n    id\n  });\n}\n\nconst Web3 = require('web3');\n\nconst Provider = require('truffle-hdwallet-provider');\n\nconst MyContract = require('../../ethereum/build/IdVerification.json');\n\nconst address = \"0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A\";\nconst privateKey = \"7a5e5b16d286a451082ee017f08410fae2c0062e4c7faa45f5beafc64df90664\"; // this is my private key\n\nconst infuraUrl = \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\";\nconst contractAddress = \"0x0d23E56075bfe051524295af7F20fE42ae47cC7B\"; // change after deploying new contract version\n\nasync function ethereumStuff(adr) {\n  // set up contract and signing key\n  console.log(\"\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m checking if deposit paid\");\n  const web3 = new Web3(infuraUrl);\n  const myContract = new web3.eth.Contract(JSON.parse(MyContract.interface), contractAddress);\n  web3.eth.accounts.wallet.add(privateKey);\n  console.log(\"\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m Setting up data for transaction...\"); // set up transaction\n\n  const tx = myContract.methods.checkIfDepositPaid(adr);\n  const gas = await tx.estimateGas({\n    from: address\n  });\n  const gasPrice = await web3.eth.getGasPrice();\n  const data = tx.encodeABI();\n  const nonce = await web3.eth.getTransactionCount(address);\n  const txData = {\n    from: address,\n    to: myContract.options.address,\n    data: data,\n    gas: gas,\n    gasPrice: gasPrice,\n    nonce: nonce,\n    chain: 'rinkeby',\n    hardfork: 'istanbul'\n  }; // send transaction\n\n  console.log(`\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m Waiting for call...`);\n  const depositCheckAnswer = await web3.eth.sendTransaction(txData); // console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Transaction hash: ${receipt.transactionHash}`);\n\n  console.log(`\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m Call successful`);\n  return depositCheckAnswer;\n}","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/pages/api/create-verification-session.js"],"names":["stripe","require","handler","req","res","adr","body","address","console","log","depositCheck","ethereumStuff","verificationSession","identity","verificationSessions","create","type","metadata","passedDatabaseCheck","clientSecret","client_secret","id","status","json","Web3","Provider","MyContract","privateKey","infuraUrl","contractAddress","web3","myContract","eth","Contract","JSON","parse","interface","accounts","wallet","add","tx","methods","checkIfDepositPaid","gas","estimateGas","from","gasPrice","getGasPrice","data","encodeABI","nonce","getTransactionCount","txData","to","options","chain","hardfork","depositCheckAnswer","sendTransaction"],"mappings":"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","sourcesContent":["const stripe = require('stripe')('sk_test_51J305OC6YuwVjGqqdtMScisG2JWYy339dNtTGf7QE44BdrPbWPqeMKd5WF1nfpnKYhAmbh8GGQbiaolofct52IgZ003WkhWzMr');\n\nexport default async function handler(req, res) {\n    \n    const adr = req.body.address;\n\n    console.log(\"\\u001b[1;32m [CVS] \\u001b[0m \", req.body)\n    console.log(\"\\u001b[1;32m [CVS] \\u001b[0m \", adr)\n\n    const depositCheck = await ethereumStuff(adr);\n\n    console.log(`\\u001b[1;32m [CVS] \\u001b[0m address ${adr} deposit ${depositCheck}`)\n\n    const verificationSession = await stripe.identity.verificationSessions.create({\n        type: 'document',\n        metadata: {passedDatabaseCheck: null}\n        \n      });\n      \n      // Return only the client secret and id to the frontend.\n      const clientSecret = verificationSession.client_secret;\n      const { id } = verificationSession;\n      res.status(200).json({ clientSecret, id })\n}\n\nconst Web3 = require('web3');\nconst Provider = require('truffle-hdwallet-provider');\nconst MyContract = require('../../ethereum/build/IdVerification.json');\n\nconst address = \"0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A\";\nconst privateKey = \"7a5e5b16d286a451082ee017f08410fae2c0062e4c7faa45f5beafc64df90664\"; // this is my private key\nconst infuraUrl = \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\";\n\nconst contractAddress = \"0x0d23E56075bfe051524295af7F20fE42ae47cC7B\"; // change after deploying new contract version\n\n\nasync function ethereumStuff(adr) {\n    \n  // set up contract and signing key\n  console.log(\"\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m checking if deposit paid\")\n\n  const web3 = new Web3(infuraUrl);\n  const myContract = new web3.eth.Contract(\n    JSON.parse(MyContract.interface),\n    contractAddress\n  );\n  web3.eth.accounts.wallet.add(privateKey);\n\n\n  console.log( \"\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m Setting up data for transaction...\" );\n\n  // set up transaction\n  const tx = myContract.methods.checkIfDepositPaid(adr);\n  const gas = await tx.estimateGas({from: address});\n  const gasPrice = await web3.eth.getGasPrice();\n  const data = tx.encodeABI();\n  const nonce = await web3.eth.getTransactionCount(address);\n  const txData = {\n    from: address,\n    to: myContract.options.address,\n    data: data,\n    gas: gas,\n    gasPrice: gasPrice,\n    nonce: nonce, \n    chain: 'rinkeby', \n    hardfork: 'istanbul'\n  };\n  \n  // send transaction\n  console.log(`\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m Waiting for call...`);\n  const depositCheckAnswer = await web3.eth.sendTransaction(txData);\n\n  // console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Transaction hash: ${receipt.transactionHash}`);\n  console.log(`\\u001b[1;32m [CVS]->[Depoit check] \\u001b[0m Call successful`);\n\n  return depositCheckAnswer;\n}"]},"metadata":{},"sourceType":"module"}