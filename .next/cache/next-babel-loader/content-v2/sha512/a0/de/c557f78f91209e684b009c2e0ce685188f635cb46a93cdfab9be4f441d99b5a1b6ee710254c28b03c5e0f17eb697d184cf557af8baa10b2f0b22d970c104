{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/pages/testing.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Button, Icon, Dimmer } from \"semantic-ui-react\";\nimport Layout from \"../components/Layout\";\nimport { Router } from '../routes'; // import web3 from '../ethereum/web3' // use this to automatically scan for metamask\n\nimport Web3 from \"web3\"; // use this to have connect account button\n// import web3Call from \"../ethereum/web3\";\n\nlet web3;\n\nclass CampaignIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      errorTrue: false,\n      errorMessage: \"\",\n      accountAlreadyVerified: false,\n      account: \"No account\",\n      network: \"No network\"\n    });\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      await this.connectMetaMaskAccountInitialCheck();\n    });\n\n    _defineProperty(this, \"connectMetaMaskAccountInitialCheck\", async () => {\n      if (false && typeof window.ethereum !== \"undefined\") {\n        // We are in the browser and metamask is running.\n        web3 = new Web3(window.ethereum); // let stuff = await web3.eth.getAccounts()\n        // console.log(\"stuff\", stuff)\n\n        var address = await ethereum.selectedAddress;\n        var network = ethereum.networkVersion;\n        console.log(\"account\", address);\n        console.log(\"network\", network);\n        const net = this.networkIntToName(network);\n        this.setState({\n          network: net,\n          account: address\n        });\n      } else {\n        // We are on the server *OR* the user is not running metamask\n        const provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\");\n      }\n    });\n\n    _defineProperty(this, \"connectMetaMaskAccount\", async () => {\n      // let web3;\n      if (false && typeof window.ethereum !== \"undefined\") {\n        // We are in the browser and metamask is running.\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        web3 = new Web3(window.ethereum); // let stuff = await web3.eth.getAccounts()\n        // console.log(\"stuff\", stuff)\n\n        var address = await ethereum.selectedAddress;\n        var network = ethereum.networkVersion;\n        console.log(\"account\", address);\n        console.log(\"network\", network);\n        const net = this.networkIntToName(network);\n        this.setState({\n          network: net,\n          account: address\n        });\n      } else {\n        // We are on the server *OR* the user is not running metamask\n        const provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\");\n      }\n    });\n\n    _defineProperty(this, \"networkIntToName\", networkId => {\n      switch (networkId) {\n        case \"1\":\n          return \"Main\";\n\n        case \"3\":\n          return \"Ropsten\";\n\n        case \"4\":\n          return \"Rinkeby\";\n\n        case \"42\":\n          return \"Kovan\";\n\n        case \"5\":\n          return \"Goerli\";\n\n        default:\n          return \"Custom\";\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 100,\n            marginLeft: 200\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.connectMetaMaskAccount,\n            children: \"Connect Wallet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              color: \"#F4C458\",\n              backgroundColor: \"#F7E9EB\",\n              width: \"fit-content\",\n              padding: \"1%\",\n              borderRadius: \"12px\"\n            },\n            children: this.state.network\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              color: \"black\",\n              backgroundColor: \"#F7E9EB\",\n              width: \"fit-content\",\n              padding: \"1%\",\n              borderRadius: \"12px\"\n            },\n            children: this.state.account\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default CampaignIndex;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/pages/testing.js"],"names":["React","Component","Button","Icon","Dimmer","Layout","Router","Web3","web3","CampaignIndex","errorTrue","errorMessage","accountAlreadyVerified","account","network","connectMetaMaskAccountInitialCheck","window","ethereum","address","selectedAddress","networkVersion","console","log","net","networkIntToName","setState","provider","providers","HttpProvider","request","method","networkId","render","marginTop","marginLeft","connectMetaMaskAccount","color","backgroundColor","width","padding","borderRadius","state"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, Icon, Dimmer } from \"semantic-ui-react\";\nimport Layout from \"../components/Layout\";\nimport { Router } from '../routes';\n\n// import web3 from '../ethereum/web3' // use this to automatically scan for metamask\nimport Web3 from \"web3\"; // use this to have connect account button\n// import web3Call from \"../ethereum/web3\";\nlet web3; \n\nclass CampaignIndex extends Component {\n  state = {\n    errorTrue: false,\n    errorMessage: \"\",\n    accountAlreadyVerified: false,\n    account: \"No account\",\n    network: \"No network\",\n\n  }\n \n  componentDidMount = async () => {\n    await this.connectMetaMaskAccountInitialCheck();\n\n  }\n\n  // componentDidUpdate = async () => {\n  //   this.checkMetaMask();\n\n  // }\n    \n  connectMetaMaskAccountInitialCheck = async () => {\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // We are in the browser and metamask is running.\n      \n      web3 = new Web3(window.ethereum);\n\n      // let stuff = await web3.eth.getAccounts()\n      // console.log(\"stuff\", stuff)\n\n      var address = await ethereum.selectedAddress;\n      var network = ethereum.networkVersion;\n\n      console.log(\"account\", address)\n      console.log(\"network\", network)\n\n      const net = this.networkIntToName(network)\n\n      this.setState({network: net, account: address})\n\n    } else {\n      // We are on the server *OR* the user is not running metamask\n      const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\"\n      );\n    }\n  }\n  \n  connectMetaMaskAccount = async () => {\n    // let web3;\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // We are in the browser and metamask is running.\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      \n      web3 = new Web3(window.ethereum);\n\n      // let stuff = await web3.eth.getAccounts()\n      // console.log(\"stuff\", stuff)\n\n      var address = await ethereum.selectedAddress;\n      var network = ethereum.networkVersion;\n\n      console.log(\"account\", address)\n      console.log(\"network\", network)\n\n      const net = this.networkIntToName(network)\n\n      this.setState({network: net, account: address})\n\n    } else {\n      // We are on the server *OR* the user is not running metamask\n      const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\"\n      );\n    }\n  }\n\n  networkIntToName = (networkId) => {\n    switch(networkId) {\n      case \"1\":\n          return \"Main\"\n      case \"3\":\n        return \"Ropsten\"\n      case \"4\":\n        return \"Rinkeby\"\n      case \"42\":\n        return \"Kovan\";\n      case \"5\":\n        return \"Goerli\";\n      default: \n        return \"Custom\";\n    }\n}\n\n  render() {\n\n    return (\n        <Layout>\n          <div>\n          <div style={{marginTop: 100, marginLeft: 200}}>\n\n          <button onClick={this.connectMetaMaskAccount}>Connect Wallet</button> \n          <h4 style={{color: \"#F4C458\",\n                    backgroundColor: \"#F7E9EB\",\n                    width: \"fit-content\",\n                    padding: \"1%\",\n                    borderRadius: \"12px\",\n                    }}>\n            {this.state.network}\n          </h4>   \n          <h4 style={{color: \"black\",\n                    backgroundColor: \"#F7E9EB\",\n                    width: \"fit-content\",\n                    padding: \"1%\",\n                    borderRadius: \"12px\",\n                    }}>\n            {this.state.account}\n          </h4>   \n               \n          </div>\n          </div>\n        </Layout>\n    );\n  }\n}\n\nexport default CampaignIndex;\n"]},"metadata":{},"sourceType":"module"}