{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/pages/testing.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Button, Icon, Dimmer } from \"semantic-ui-react\";\nimport Layout from \"../components/Layout\";\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nimport { Router } from '../routes'; // import web3 from '../ethereum/web3' // use this to automatically scan for metamask\n\nimport Web3 from \"web3\"; // use this to have connect account button\n// import web3Call from \"../ethereum/web3\";\n\nlet web3;\n\nclass CampaignIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      errorTrue: false,\n      errorMessage: \"\",\n      accountAlreadyVerified: false,\n      account: \"No account\",\n      network: \"No network\"\n    });\n\n    _defineProperty(this, \"connectMetaMaskAccount\", async () => {\n      // let web3;\n      if (false && typeof window.ethereum !== \"undefined\") {\n        // We are in the browser and metamask is running.\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        web3 = new Web3(window.ethereum);\n        var address = await ethereum.selectedAddress;\n        var network = ethereum.networkVersion;\n        console.log(\"account\", address);\n        console.log(\"network\", network);\n        const net = this.networkIntToName(network);\n        this.setState({\n          account: address\n        });\n      } else {\n        // We are on the server *OR* the user is not running metamask\n        const provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\");\n      }\n    });\n\n    _defineProperty(this, \"networkIntToName\", networkId => {\n      console.log(\"networkID\", networkId);\n\n      switch (networkId) {\n        case \"4\":\n          this.setState({\n            network: \"rinkeby\"\n          });\n          break;\n\n        default:\n          this.setState({\n            network: \"main\"\n          });\n          break;\n      }\n    });\n\n    _defineProperty(this, \"checkMetaMask\", async () => {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        this.setState({\n          account: accounts[0]\n        });\n        return true;\n      } catch (err) {\n        console.log(\"MetaMask error\");\n        this.setState({\n          errorMessage: \"It looks like you don't have metamask up and running, which you need to use this service\",\n          errorTrue: true\n        });\n        return false;\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 100,\n            marginLeft: 200\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.connectMetaMaskAccount,\n            children: \"click\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Account: \", this.state.account]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Network: \", this.state.network]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default CampaignIndex;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/pages/testing.js"],"names":["React","Component","Button","Icon","Dimmer","Layout","PreImageButton","HashButton","Router","Web3","web3","CampaignIndex","errorTrue","errorMessage","accountAlreadyVerified","account","network","window","ethereum","request","method","address","selectedAddress","networkVersion","console","log","net","networkIntToName","setState","provider","providers","HttpProvider","networkId","accounts","eth","getAccounts","err","render","marginTop","marginLeft","connectMetaMaskAccount","state"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, Icon, Dimmer } from \"semantic-ui-react\";\nimport Layout from \"../components/Layout\";\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nimport { Router } from '../routes';\n\n// import web3 from '../ethereum/web3' // use this to automatically scan for metamask\nimport Web3 from \"web3\"; // use this to have connect account button\n// import web3Call from \"../ethereum/web3\";\nlet web3; \n\nclass CampaignIndex extends Component {\n  state = {\n    errorTrue: false,\n    errorMessage: \"\",\n    accountAlreadyVerified: false,\n    account: \"No account\",\n    network: \"No network\",\n\n  }\n \n  // componentDidMount = async () => {\n  //   if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n  //     // We are in the browser and metamask is running.\n  //     // window.ethereum.request({ method: \"eth_requestAccounts\" });\n  //     web3 = new Web3(window.ethereum);\n  //   } else {\n  //     // We are on the server *OR* the user is not running metamask\n  //     const provider = new Web3.providers.HttpProvider(\n  //       \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\"\n  //     );\n  //   }\n\n  // }\n\n  // componentDidUpdate = async () => {\n  //   this.checkMetaMask();\n\n  // }\n\n  connectMetaMaskAccount = async () => {\n    // let web3;\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // We are in the browser and metamask is running.\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      web3 = new Web3(window.ethereum);\n      var address = await ethereum.selectedAddress;\n      var network = ethereum.networkVersion;\n\n      console.log(\"account\", address)\n      console.log(\"network\", network)\n\n      const net = this.networkIntToName(network)\n\n      this.setState({account: address})\n\n    } else {\n      // We are on the server *OR* the user is not running metamask\n      const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\"\n      );\n    }\n  }\n\n  networkIntToName = (networkId) => {\n    console.log(\"networkID\", networkId)\n    switch(networkId) {\n      case \"4\":\n        this.setState({network: \"rinkeby\"})\n        break;\n      default: \n        this.setState({network: \"main\"})\n        break;\n    }\n}\n\n  checkMetaMask = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n      this.setState({account: accounts[0]})\n      return true;\n\n    } catch (err) {\n        console.log(\"MetaMask error\")\n        this.setState({ \n          errorMessage: \"It looks like you don't have metamask up and running, which you need to use this service\", \n          errorTrue: true });\n        return false;\n    }\n  }\n  render() {\n\n    return (\n        <Layout>\n          <div>\n          <div style={{marginTop: 100, marginLeft: 200}}>\n\n          \n          <button onClick={this.connectMetaMaskAccount}>click</button> \n          <h3>Account: {this.state.account}</h3>    \n          <h3>Network: {this.state.network}</h3>               \n          </div>\n          </div>\n        </Layout>\n    );\n  }\n}\n\nexport default CampaignIndex;\n"]},"metadata":{},"sourceType":"module"}