{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/pages/index.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Message, Button, Input, Loader, Grid } from \"semantic-ui-react\";\nimport { Router } from '../routes';\nimport Layout from \"../components/Layout\";\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nimport AccountMessage from \"../components/Accounts\";\nimport factory from \"../ethereum/verification\";\nimport Web3 from \"web3\"; // use this to have connect account button\n\nlet web3;\nimport mimc from '../public/mimc.ts';\nimport { calculateProof } from '../public/prover.js';\nimport { loadStripe } from '@stripe/stripe-js';\nconst stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n\nclass CampaignIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      errorMessage: '',\n      errorTrue: false,\n      // eth\n      accountAlreadyVerified: false,\n      account: \"No account\",\n      network: \"No network\",\n      accountDetailsRetrieved: false,\n      // stripe\n      clientSecret: null,\n      stripe: null,\n      verification_session_id: null,\n      sessionIdRandNum: null,\n      sessionIdMimcNum: null,\n      //deposit\n      depositAlreadyPaid: false,\n      deposit_Status: \"Not paid\",\n      loaderDepositActive: false,\n      // verification\n      verification_status: \"Not started\",\n      loaderVerificationActive: false,\n      // proof\n      proof_status: \"Not sent\",\n      loaderProofActive: false,\n      //login\n      loginDetailsRecieved: false,\n      //zkp\n      mimcHashNumState: null,\n      solidityVerifierProof: null,\n      zkResult: null\n    });\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      // check if metamask installed and account connected\n      const metaMaskPresent = await this.connectMetaMaskAccountInitialCheck();\n\n      if (!metaMaskPresent) {\n        return;\n      } // checking if account is already verified\n      // at the moment I haven't disabled rest of flow if already verified to make testing easier\n\n\n      const alreadyVerified = await this.checkIfAccountVerified(); // check if deposit is paid\n\n      const paidDeposit = await this.checkDepositPaid(); // if(!paidDeposit) {return;} // this should be live for actual flow\n    });\n\n    _defineProperty(this, \"resetError\", () => {\n      this.setState({\n        errorTrue: false,\n        errorMessage: \"\"\n      });\n    });\n\n    _defineProperty(this, \"connectMetaMaskAccountInitialCheck\", async () => {\n      if (false && typeof window.ethereum !== \"undefined\") {\n        // We are in the browser and metamask is running.\n        web3 = new Web3(window.ethereum);\n        var address = await ethereum.selectedAddress;\n        var network = ethereum.networkVersion;\n        console.log(\"account\", address);\n        console.log(\"network\", network);\n        const net = this.networkIntToName(network);\n        this.setState({\n          network: net,\n          account: address\n        });\n\n        if (address != null) {\n          console.log(\"setting retireved\");\n          this.setState({\n            accountDetailsRetrieved: true\n          });\n          return true;\n        }\n\n        return false;\n      } else {\n        // We are on the server *OR* the user is not running metamask\n        const provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\");\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"connectMetaMaskAccount\", async () => {\n      // let web3;\n      if (false && typeof window.ethereum !== \"undefined\") {\n        // We are in the browser and metamask is running.\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        web3 = new Web3(window.ethereum);\n        var address = await ethereum.selectedAddress;\n        var network = ethereum.networkVersion;\n        console.log(\"account\", address);\n        console.log(\"network\", network);\n        const net = this.networkIntToName(network);\n        this.setState({\n          network: net,\n          account: address\n        });\n\n        if (address != null) {\n          this.setState({\n            accountDetailsRetrieved: true\n          });\n          await this.checkIfAccountVerified();\n          await this.checkDepositPaid();\n        }\n      } else {\n        // We are on the server *OR* the user is not running metamask\n        const provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\");\n      }\n    });\n\n    _defineProperty(this, \"networkIntToName\", networkId => {\n      switch (networkId) {\n        case \"1\":\n          return \"Main\";\n\n        case \"3\":\n          return \"Ropsten\";\n\n        case \"4\":\n          return \"Rinkeby\";\n\n        case \"42\":\n          return \"Kovan\";\n\n        case \"5\":\n          return \"Goerli\";\n\n        default:\n          return \"Custom\";\n      }\n    });\n\n    _defineProperty(this, \"checkIfAccountVerified\", async () => {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        let res = await factory.methods.checkIfAddressVerified().call({\n          from: accounts[0]\n        });\n        this.setState({\n          accountAlreadyVerified: res\n        });\n        return true;\n      } catch (err) {\n        console.log(\"MetMask aerror\");\n        this.setState({\n          errorMessage: \"It looks like you may be on the wrong MetaMask network\",\n          errorTrue: true\n        });\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"checkDepositPaid\", async () => {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        let res = await factory.methods.checkIfDepositPaid().call({\n          from: accounts[0]\n        }); // this should be uncommented eventually as it will block the verifcation button if no deposit is paid\n\n        this.setState({\n          depositAlreadyPaid: res\n        });\n\n        if (res) {\n          this.setState({\n            deposit_Status: \"Paid\"\n          });\n        } else {\n          this.setState({\n            deposit_Status: \"Not paid\"\n          });\n        }\n\n        return res;\n      } catch (err) {\n        console.log(\"error when initially checking account\");\n        this.setState({\n          errorMessage: \"It looks like there was an error checking if you had paid the deposit\",\n          errorTrue: true\n        });\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"sendDeposit\", async () => {\n      this.setState({\n        loaderDepositActive: true\n      });\n\n      try {\n        this.setState({\n          deposit_Status: \"Sending deposit...\"\n        });\n        const accounts = await web3.eth.getAccounts();\n        await factory.methods.payDeposit().send({\n          from: accounts[0],\n          value: 20 // 20 wei deposit\n\n        });\n        let res = await factory.methods.checkIfDepositPaid().call({\n          from: accounts[0]\n        });\n\n        if (res) {\n          this.setState({\n            depositAlreadyPaid: res,\n            deposit_Status: \"Paid\"\n          });\n        }\n      } catch (err) {\n        console.log(\"error in submit sol proof\");\n        this.setState({\n          errorMessage: err.message,\n          errorTrue: true\n        });\n      }\n\n      this.setState({\n        loaderDepositActive: false\n      });\n    });\n\n    _defineProperty(this, \"createNewStripeSession\", async () => {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        this.setState({\n          verification_status: \"server checking deposit payment\"\n        });\n        const requestOptions = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            title: 'POST of metamask address',\n            address: accounts[0]\n          })\n        };\n        const response = await fetch('/api/create-verification-session', requestOptions);\n        const data = await response.json();\n        this.setState({\n          clientSecret: data.clientSecret,\n          verification_session_id: data.id\n        }); // fetch('/api/create-verification-session')\n        // .then(res => res.json())\n        // .then(data => this.setState({clientSecret: data.clientSecret, verification_session_id: data.id}))\n\n        this.setState({\n          stripe: await stripePromise\n        });\n      } catch (err) {\n        console.log(\"error when trying to create new verification session\");\n        this.setState({\n          errorMessage: \"It looks like there was an issue creating a new verification session\",\n          errorTrue: true\n        });\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"verifyIdentity\", async event => {\n      event.preventDefault();\n      this.resetError();\n      this.setState({\n        loaderVerificationActive: true\n      }); // creating new stripe session on button click\n\n      await this.createNewStripeSession();\n      let {\n        stripe,\n        clientSecret\n      } = this.state;\n\n      if (!stripe || !clientSecret) {\n        this.setState({\n          loaderVerificationActive: false,\n          errorTrue: true,\n          errorMessage: \"Stripe not connecting\"\n        });\n        return;\n      } // Show the verification modal.\n\n\n      const {\n        error\n      } = await stripe.verifyIdentity(clientSecret);\n\n      if (error) {\n        console.log('[error]', error);\n      } else {\n        console.log('Verification submitted!');\n        this.pollForStatus();\n      }\n    });\n\n    _defineProperty(this, \"pollForStatus\", async () => {\n      if (this.state.verification_status !== \"passed_database_check\" && this.state.verification_status !== \"failed_database_check\") {\n        setTimeout(this.pollForStatus, 5000);\n        this.fetchStatus();\n      }\n\n      if (this.state.verification_status !== \"processing\" && this.state.verification_status !== \"not_submitted\" && this.state.verification_status !== \"verified_waiting_for_database_check\" && this.state.verification_status !== \"server checking deposit payment\") {\n        this.setState({\n          loaderVerificationActive: false\n        });\n\n        if (this.state.verification_status == \"passed_database_check\") {\n          this.setState({\n            loginDetailsRecieved: true\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"fetchStatus\", async () => {\n      //handle error if session id isn't set\n      fetch('/api/get-verification-session/' + this.state.verification_session_id).then(res => res.json()).then(data => this.setState({\n        verification_status: data.status,\n        sessionIdRandNum: data.randSeededNum,\n        sessionIdMimcNum: data.mimcVal\n      }));\n    });\n\n    _defineProperty(this, \"mimcHashNum\", async () => {\n      const preImage1 = document.getElementById('mimc_num').value;\n      console.log(preImage1);\n      const out = mimc(preImage1);\n      console.log(out.toString());\n      this.setState({\n        mimcHashNumState: out.toString()\n      });\n    });\n\n    _defineProperty(this, \"verifyPreimage\", async () => {\n      const preImage = parseInt(document.getElementById('preImageCredential').value);\n      console.log(preImage);\n      const hash = document.getElementById('mimcHashCredential').value;\n      console.log(hash);\n      const solidityProof = await calculateProof(preImage, hash);\n      this.setState({\n        solidityVerifierProof: solidityProof\n      });\n      console.log(solidityProof);\n    });\n\n    _defineProperty(this, \"submitSolProof\", async () => {\n      // event.preventDefault();\n      this.resetError();\n      this.setState({\n        loaderProofActive: true\n      }); // CREATING ZKP FROM HASH AND PRE-IMAGE \n\n      this.setState({\n        verification_status: \"Creating ZKP\"\n      });\n      const preImage = parseInt(document.getElementById('preImageCredential').value);\n      console.log(preImage);\n      const hash = document.getElementById('mimcHashCredential').value;\n      console.log(hash);\n      const solidityProof = await calculateProof(preImage, hash); // this.setState({solidityVerifierProof: solidityProof});\n\n      console.log(solidityProof); // SUBMIT ZKP TO CONTRACT  \n\n      this.setState({\n        proof_status: \"Starting ETH transaction\"\n      });\n      const fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n      const pi_a = fullProof[0];\n      const pi_b = fullProof[1];\n      const pi_c = fullProof[2];\n      const inputs = fullProof[3]; // send zk proof to verifyHash function\n\n      try {\n        this.setState({\n          proof_status: \"Submitting ZKP...\"\n        });\n        const accounts = await web3.eth.getAccounts();\n        await factory.methods.verifyHash(pi_a, pi_b, pi_c, inputs).send({\n          from: accounts[0]\n        });\n        console.log(\"submitted zkp successfully\"); // Router.reload(window.location.pathname)\n\n        let res = await factory.methods.checkIfAddressVerified().call({\n          from: accounts[0]\n        });\n        this.setState({\n          zkResult: res.toString()\n        }); // set state of session status depending on res\n        // if(res) {\n        //   this.setState({verification_status: \"Address is verified\"})\n        // } else {\n        //   this.setState({verification_status: \"Address verification failed\"})\n        // }\n      } catch (err) {\n        console.log(\"error in submit sol proof\");\n        this.setState({\n          errorMessage: err.message,\n          errorTrue: true\n        });\n      }\n\n      this.setState({\n        loaderProofActive: false\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 50\n          },\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n              children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n                width: 10,\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Verify your identity\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 433,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  primary: true,\n                  disabled: !this.state.depositAlreadyPaid,\n                  onClick: this.verifyIdentity,\n                  children: \"Verify\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 434,\n                  columnNumber: 23\n                }, this), !this.state.depositAlreadyPaid ? /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"You can't verify your idenity until you have connected an account and paid a deposit (see status section)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 437,\n                  columnNumber: 25\n                }, this) : null, /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 442,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Login credentials\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 445,\n                  columnNumber: 23\n                }, this), this.state.loginDetailsRecieved ? /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: [\"Pre-image: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 449,\n                      columnNumber: 49\n                    }, this), \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 449,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(PreImageButton, {\n                    children: this.state.sessionIdRandNum\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 450,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: [\"Hash: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 452,\n                      columnNumber: 44\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 452,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(HashButton, {\n                    children: this.state.sessionIdMimcNum\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 453,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 448,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"No login details yet...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 455,\n                  columnNumber: 32\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 458,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Create and submit proof\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 460,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: /*#__PURE__*/_jsxDEV(Input, {\n                    id: \"preImageCredential\",\n                    placeholder: \"Pre-image\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 461,\n                    columnNumber: 26\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 461,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: /*#__PURE__*/_jsxDEV(Input, {\n                    id: \"mimcHashCredential\",\n                    placeholder: \"Hash\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 462,\n                    columnNumber: 26\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 462,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  primary: true,\n                  onClick: this.submitSolProof,\n                  disabled: !this.state.accountDetailsRetrieved,\n                  children: \"Send proof\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 463,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n                width: 6,\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Status \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 470,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"Account:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 472,\n                  columnNumber: 27\n                }, this), !this.state.accountDetailsRetrieved ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: this.connectMetaMaskAccount,\n                  style: {\n                    color: \"#D04C88\",\n                    backgroundColor: \"#FCDCE7\",\n                    width: \"fit-content\",\n                    padding: \"3%\",\n                    borderRadius: \"12px\",\n                    border: \"none\",\n                    fontWeight: \"bold\",\n                    cursor: \"pointer\"\n                  },\n                  children: \"Connect Wallet\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 474,\n                  columnNumber: 27\n                }, this) : null, this.state.accountDetailsRetrieved ? /*#__PURE__*/_jsxDEV(AccountMessage, {\n                  network: this.state.network,\n                  account: this.state.account,\n                  verified: this.state.accountAlreadyVerified\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 488,\n                  columnNumber: 27\n                }, this) : null, /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Deposit: \", this.state.deposit_Status, \" \\xA0 \\xA0\", this.state.loaderDepositActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                    active: true,\n                    inline: true,\n                    size: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 500,\n                    columnNumber: 29\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 497,\n                  columnNumber: 27\n                }, this), !this.state.depositAlreadyPaid && this.state.accountDetailsRetrieved ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: this.sendDeposit,\n                  disabled: !this.state.accountDetailsRetrieved,\n                  style: {\n                    color: \"#D04C88\",\n                    backgroundColor: \"#FCDCE7\",\n                    width: \"fit-content\",\n                    padding: \"3%\",\n                    borderRadius: \"12px\",\n                    border: \"none\",\n                    fontWeight: \"bold\",\n                    cursor: \"pointer\"\n                  },\n                  children: \"Send deposit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 506,\n                  columnNumber: 29\n                }, this) : null, /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Verification Session: \", this.state.verification_status, \" \\xA0 \\xA0\", this.state.loaderVerificationActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                    active: true,\n                    inline: true,\n                    size: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 524,\n                    columnNumber: 29\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 521,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Proof: \", this.state.proof_status, \" \\xA0 \\xA0\", this.state.loaderProofActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                    active: true,\n                    inline: true,\n                    size: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 531,\n                    columnNumber: 29\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 528,\n                  columnNumber: 27\n                }, this), this.state.errorTrue ? /*#__PURE__*/_jsxDEV(Message, {\n                  negative: true,\n                  children: [/*#__PURE__*/_jsxDEV(Message.Header, {\n                    children: \"Error\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 538,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: this.state.errorMessage\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 539,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 537,\n                  columnNumber: 27\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 468,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default CampaignIndex;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/pages/index.js"],"names":["React","Component","Message","Button","Input","Loader","Grid","Router","Layout","PreImageButton","HashButton","AccountMessage","factory","Web3","web3","mimc","calculateProof","loadStripe","stripePromise","CampaignIndex","errorMessage","errorTrue","accountAlreadyVerified","account","network","accountDetailsRetrieved","clientSecret","stripe","verification_session_id","sessionIdRandNum","sessionIdMimcNum","depositAlreadyPaid","deposit_Status","loaderDepositActive","verification_status","loaderVerificationActive","proof_status","loaderProofActive","loginDetailsRecieved","mimcHashNumState","solidityVerifierProof","zkResult","metaMaskPresent","connectMetaMaskAccountInitialCheck","alreadyVerified","checkIfAccountVerified","paidDeposit","checkDepositPaid","setState","window","ethereum","address","selectedAddress","networkVersion","console","log","net","networkIntToName","provider","providers","HttpProvider","request","method","networkId","accounts","eth","getAccounts","res","methods","checkIfAddressVerified","call","from","err","checkIfDepositPaid","payDeposit","send","value","message","requestOptions","headers","body","JSON","stringify","title","response","fetch","data","json","id","event","preventDefault","resetError","createNewStripeSession","state","error","verifyIdentity","pollForStatus","setTimeout","fetchStatus","then","status","randSeededNum","mimcVal","preImage1","document","getElementById","out","toString","preImage","parseInt","hash","solidityProof","fullProof","parse","pi_a","pi_b","pi_c","inputs","verifyHash","render","marginTop","submitSolProof","connectMetaMaskAccount","color","backgroundColor","width","padding","borderRadius","border","fontWeight","cursor","sendDeposit"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Message, Button, Input, Loader, Grid } from \"semantic-ui-react\";\nimport { Router } from '../routes';\n\nimport Layout from \"../components/Layout\";\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nimport AccountMessage from \"../components/Accounts\";\n\nimport factory from \"../ethereum/verification\";\nimport Web3 from \"web3\"; // use this to have connect account button\nlet web3; \n\nimport mimc from '../public/mimc.ts';\nimport { calculateProof } from '../public/prover.js'\n\nimport {loadStripe} from '@stripe/stripe-js';\n\nconst stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n\nclass CampaignIndex extends Component {\n \n   state = {\n    errorMessage: '',\n    errorTrue: false,    \n    // eth\n    accountAlreadyVerified: false,\n    account: \"No account\",\n    network: \"No network\",\n    accountDetailsRetrieved: false,\n    // stripe\n    clientSecret: null,\n    stripe: null,\n    verification_session_id: null,\n    sessionIdRandNum: null,\n    sessionIdMimcNum: null,\n    //deposit\n    depositAlreadyPaid: false,\n    deposit_Status: \"Not paid\",\n    loaderDepositActive: false,\n    // verification\n    verification_status: \"Not started\",\n    loaderVerificationActive: false,\n    // proof\n    proof_status: \"Not sent\",\n    loaderProofActive: false,\n    //login\n    loginDetailsRecieved: false,\n    //zkp\n    mimcHashNumState:null,\n    solidityVerifierProof:null,\n    zkResult: null,\n  };  \n\n  componentDidMount = async () => {\n    // check if metamask installed and account connected\n    const metaMaskPresent = await this.connectMetaMaskAccountInitialCheck();\n    if(!metaMaskPresent) {return;}\n\n    // checking if account is already verified\n    // at the moment I haven't disabled rest of flow if already verified to make testing easier\n    const alreadyVerified = await this.checkIfAccountVerified();\n\n    // check if deposit is paid\n    const paidDeposit = await this.checkDepositPaid();\n    // if(!paidDeposit) {return;} // this should be live for actual flow\n    \n  }\n\n  resetError = () => {\n    this.setState({errorTrue: false, errorMessage: \"\"});\n  }  \n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------METAMASK STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n  connectMetaMaskAccountInitialCheck = async () => {\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // We are in the browser and metamask is running.\n      \n      web3 = new Web3(window.ethereum);\n\n      var address = await ethereum.selectedAddress;\n      var network = ethereum.networkVersion;\n\n      console.log(\"account\", address)\n      console.log(\"network\", network)\n\n      const net = this.networkIntToName(network)\n\n      this.setState({network: net, account: address})\n\n      if (address != null) {\n        console.log(\"setting retireved\")\n        this.setState({accountDetailsRetrieved: true})\n        return true\n      }\n      return false\n\n    } else {\n      // We are on the server *OR* the user is not running metamask\n      const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\"\n      );\n      return false\n    }\n  }\n  \n  connectMetaMaskAccount = async () => {\n    // let web3;\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // We are in the browser and metamask is running.\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      \n      web3 = new Web3(window.ethereum);\n\n      var address = await ethereum.selectedAddress;\n      var network = ethereum.networkVersion;\n\n      console.log(\"account\", address)\n      console.log(\"network\", network)\n\n      const net = this.networkIntToName(network)\n\n      this.setState({network: net, account: address})\n\n      if (address != null) {\n        this.setState({accountDetailsRetrieved: true})\n        await this.checkIfAccountVerified()\n        await this.checkDepositPaid()\n      }\n\n    } else {\n      // We are on the server *OR* the user is not running metamask\n      const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\"\n      );\n    }\n  }\n\n  networkIntToName = (networkId) => {\n    switch(networkId) {\n      case \"1\":\n          return \"Main\"\n      case \"3\":\n        return \"Ropsten\"\n      case \"4\":\n        return \"Rinkeby\"\n      case \"42\":\n        return \"Kovan\";\n      case \"5\":\n        return \"Goerli\";\n      default: \n        return \"Custom\";\n    }\n}\n\n\n  checkIfAccountVerified = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n      let res = await factory.methods\n        .checkIfAddressVerified()\n        .call({\n            from: accounts[0]\n      });\n      this.setState({accountAlreadyVerified: res});\n      return true;\n\n    } catch (err) {\n        console.log(\"MetMask aerror\")\n        this.setState({ \n          errorMessage: \"It looks like you may be on the wrong MetaMask network\", \n          errorTrue: true });\n        return false;\n    }\n  }\n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------DEPOSIT STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  checkDepositPaid = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n      let res = await factory.methods\n        .checkIfDepositPaid()\n        .call({\n            from: accounts[0]\n      });\n      // this should be uncommented eventually as it will block the verifcation button if no deposit is paid\n      this.setState({depositAlreadyPaid: res});\n\n      if(res) {\n        this.setState({deposit_Status: \"Paid\"})\n      } else {\n        this.setState({deposit_Status: \"Not paid\"})\n      }\n      return res;\n\n    } catch (err) {\n        console.log(\"error when initially checking account\")\n        this.setState({ \n          errorMessage: \"It looks like there was an error checking if you had paid the deposit\", \n          errorTrue: true });\n        return false;\n    } \n  }\n\n  sendDeposit = async () => {\n    this.setState({ loaderDepositActive: true});\n  \n    try {\n      this.setState({deposit_Status: \"Sending deposit...\"})\n      const accounts = await web3.eth.getAccounts();\n      await factory.methods\n          .payDeposit()\n          .send({\n              from: accounts[0],\n              value: 20 // 20 wei deposit\n      });\n  \n      let res = await factory.methods\n          .checkIfDepositPaid()\n          .call({\n              from: accounts[0]\n      });\n      \n      if (res) {\n          this.setState({depositAlreadyPaid: res, deposit_Status: \"Paid\"})\n      }\n  \n    } catch (err) {\n        console.log(\"error in submit sol proof\")\n        this.setState({ errorMessage: err.message, errorTrue: true });\n    }\n  this.setState({ loaderDepositActive: false});\n  \n  }\n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------STRIPE STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  createNewStripeSession = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n\n      this.setState({ verification_status: \"server checking deposit payment\" })\n\n      const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ title: 'POST of metamask address',address: accounts[0] })\n      };\n      const response = await fetch('/api/create-verification-session', requestOptions);\n      const data = await response.json();\n      this.setState({clientSecret: data.clientSecret, verification_session_id: data.id})\n\n      // fetch('/api/create-verification-session')\n      // .then(res => res.json())\n      // .then(data => this.setState({clientSecret: data.clientSecret, verification_session_id: data.id}))\n\n      this.setState({ stripe: await stripePromise })\n    } catch (err) {\n      console.log(\"error when trying to create new verification session\")\n      this.setState({ \n        errorMessage: \"It looks like there was an issue creating a new verification session\", \n        errorTrue: true });\n      return false;\n    }\n\n  }\n\n\n  verifyIdentity = async (event) => {\n    event.preventDefault();\n\n    this.resetError()\n    this.setState({ loaderVerificationActive: true});\n\n    // creating new stripe session on button click\n    await this.createNewStripeSession();\n\n    let { stripe, clientSecret } = this.state;\n    \n    if (!stripe || !clientSecret) {\n      this.setState({ loaderVerificationActive: false, errorTrue: true, errorMessage: \"Stripe not connecting\"});\n      return;\n    }\n\n    // Show the verification modal.\n    const { error } = await stripe.verifyIdentity(clientSecret);\n    \n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('Verification submitted!');\n      this.pollForStatus();\n    }\n\n  }\n\n  pollForStatus = async() => {\n\n    if(this.state.verification_status !== \"passed_database_check\" && this.state.verification_status !== \"failed_database_check\") {\n      setTimeout(this.pollForStatus, 5000)\n      this.fetchStatus()\n    }\n    if(this.state.verification_status !== \"processing\" && \n        this.state.verification_status !== \"not_submitted\" && \n        this.state.verification_status !== \"verified_waiting_for_database_check\" &&\n        this.state.verification_status !== \"server checking deposit payment\") \n        {\n          this.setState({ loaderVerificationActive: false});\n          \n          if(this.state.verification_status == \"passed_database_check\") {\n            this.setState({loginDetailsRecieved: true});\n        }\n    }\n\n  }\n\nfetchStatus = async () => {\n    //handle error if session id isn't set\n    fetch('/api/get-verification-session/' + this.state.verification_session_id)\n      .then(res => res.json())\n      .then(data => this.setState({\n        verification_status: data.status, \n        sessionIdRandNum: data.randSeededNum,\n        sessionIdMimcNum: data.mimcVal,\n      }))\n  }\n\n\n  //-------------------------------------------------------------------------------------------\n  // ------------------------------------LOGIN DETAILS STUFF------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  mimcHashNum = async () => {\n  const preImage1 = document.getElementById('mimc_num').value\n  console.log(preImage1)\n  const out = mimc(preImage1);\n  console.log(out.toString())\n  this.setState({mimcHashNumState: out.toString()});\n\n  }\n\nverifyPreimage = async() => {\n  const preImage = parseInt(document.getElementById('preImageCredential').value);\n  console.log(preImage)\n  const hash = document.getElementById('mimcHashCredential').value;\n  console.log(hash)\n  const solidityProof = await calculateProof(preImage, hash);\n  this.setState({solidityVerifierProof: solidityProof});\n  console.log(solidityProof)\n}\n\nsubmitSolProof = async () => {\n  // event.preventDefault();\n  this.resetError()\n  this.setState({ loaderProofActive: true});\n\n  // CREATING ZKP FROM HASH AND PRE-IMAGE \n  this.setState({verification_status: \"Creating ZKP\"})\n  const preImage = parseInt(document.getElementById('preImageCredential').value);\n  console.log(preImage)\n  const hash = document.getElementById('mimcHashCredential').value;\n  console.log(hash)\n  const solidityProof = await calculateProof(preImage, hash);\n  // this.setState({solidityVerifierProof: solidityProof});\n  console.log(solidityProof)\n\n  // SUBMIT ZKP TO CONTRACT  \n  this.setState({proof_status: \"Starting ETH transaction\"})\n\n  const fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n\n  const pi_a = fullProof[0]\n  const pi_b = fullProof[1]\n  const pi_c = fullProof[2]\n  const inputs = fullProof[3]\n  \n\n  // send zk proof to verifyHash function\n  try {\n      this.setState({proof_status: \"Submitting ZKP...\"})\n      const accounts = await web3.eth.getAccounts();\n      await factory.methods\n          .verifyHash(pi_a,pi_b,pi_c,inputs)\n          .send({\n              from: accounts[0]\n      });\n      \n      console.log(\"submitted zkp successfully\")\n      // Router.reload(window.location.pathname)\n\n      let res = await factory.methods\n          .checkIfAddressVerified()\n          .call({\n              from: accounts[0]\n      });\n      this.setState({zkResult: res.toString()});\n\n\n      // set state of session status depending on res\n      // if(res) {\n      //   this.setState({verification_status: \"Address is verified\"})\n      // } else {\n      //   this.setState({verification_status: \"Address verification failed\"})\n      // }\n\n    } catch (err) {\n        console.log(\"error in submit sol proof\")\n        this.setState({ errorMessage: err.message, errorTrue: true });\n    }\n\n    this.setState({loaderProofActive: false});\n  }\n\n\n\n  render() {\n    return (\n        <Layout >\n            <div>\n              <div style={{marginTop: 50}}>\n\n              <Grid>\n                <Grid.Row>\n                    <Grid.Column width={10}>\n                      {/* --------------------VERIFY IDENTITY--------------------- */}\n                      <h2>Verify your identity</h2>\n                      <Button primary disabled={!this.state.depositAlreadyPaid} onClick={this.verifyIdentity}>Verify</Button>\n                      {\n                        !this.state.depositAlreadyPaid ?\n                        <p>\n                          You can't verify your idenity until you have connected an account and paid a deposit (see status section)\n                        </p>\n                        : null\n                      }\n                      <hr/>\n                      \n                      {/* --------------------LOGIN CREDENTIALS--------------------- */}\n                      <h2>Login credentials</h2>\n                      {\n                      this.state.loginDetailsRecieved ?\n                        <p>\n                          <h3>Pre-image: &nbsp; <br></br> </h3> \n                          <PreImageButton>{this.state.sessionIdRandNum}</PreImageButton>\n                      \n                          <h3>Hash: &nbsp; <br></br></h3>\n                          <HashButton>{this.state.sessionIdMimcNum}</HashButton>\n\n                        </p> : <h4>No login details yet...</h4>\n                      }\n                                      \n                      <hr/>\n                      {/* ---------------------SUBMIT PROOF---------------------- */}\n                      <h2>Create and submit proof</h2>\n                      <p><Input id=\"preImageCredential\" placeholder=\"Pre-image\"></Input></p>\n                      <p><Input id=\"mimcHashCredential\" placeholder=\"Hash\"></Input></p>\n                      <Button primary onClick={this.submitSolProof} \n                      disabled={!this.state.accountDetailsRetrieved}>Send proof</Button> \n                        \n                    \n                    </Grid.Column>\n                    <Grid.Column width={6}>\n                        {/* --------------------SESSION STATUS--------------------- */}\n                        <h2>Status </h2>\n                        {/* --------------------address status--------------------- */}\n                          <h3>Account:</h3>\n                          { !this.state.accountDetailsRetrieved ? \n                          <button onClick={this.connectMetaMaskAccount} \n                          style={{color: \"#D04C88\",\n                                    backgroundColor: \"#FCDCE7\",\n                                    width: \"fit-content\",\n                                    padding: \"3%\",\n                                    borderRadius: \"12px\",\n                                    border: \"none\",\n                                    fontWeight: \"bold\",\n                                    cursor: \"pointer\"\n                                    }}\n                                    >Connect Wallet</button> : null\n                          }\n\n                          { this.state.accountDetailsRetrieved ? \n                          <AccountMessage \n                            network={this.state.network} \n                            account={this.state.account}\n                            verified={this.state.accountAlreadyVerified}\n                          />\n                          : null\n                          }\n\n                         {/* --------------------deposit status--------------------- */}\n                          <h3>Deposit: {this.state.deposit_Status} &nbsp; &nbsp;\n                          {\n                            this.state.loaderDepositActive ?\n                            <Loader active inline size=\"small\" />: null\n                          }\n                          </h3>\n\n                          {\n                            (!this.state.depositAlreadyPaid && this.state.accountDetailsRetrieved) ?\n                            <button onClick={this.sendDeposit} \n                            disabled={!this.state.accountDetailsRetrieved}\n                            style={{color: \"#D04C88\",\n                                      backgroundColor: \"#FCDCE7\",\n                                      width: \"fit-content\",\n                                      padding: \"3%\",\n                                      borderRadius: \"12px\",\n                                      border: \"none\",\n                                      fontWeight: \"bold\",\n                                      cursor: \"pointer\"\n                                      }}\n                                      >Send deposit</button>\n                            : null\n                          }\n                          {/* --------------------verification status--------------------- */}\n                          <h3>Verification Session: {this.state.verification_status} &nbsp; &nbsp;\n                          {\n                            this.state.loaderVerificationActive ?\n                            <Loader active inline size=\"small\" />: null\n                          }\n                          </h3>\n                          {/* --------------------proof message--------------------- */}\n                          <h3>Proof: {this.state.proof_status} &nbsp; &nbsp;\n                          {\n                            this.state.loaderProofActive ?\n                            <Loader active inline size=\"small\" />: null\n                          }\n                          </h3>\n                          {/* --------------------error message--------------------- */}\n                          {\n                          this.state.errorTrue ?\n                          <Message negative>\n                            <Message.Header>Error</Message.Header>\n                            <p>{this.state.errorMessage}</p>\n                          </Message> : null\n                          }\n                          {/* {\n                            this.state.accountAlreadyVerified ?\n                            <h3 style={{color:\"rgb(83, 193, 77)\"}}>***Looks like your account is already verified***</h3> : null\n                          } */}\n                          \n                    </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n                \n            </div>\n            </div>\n        </Layout>\n    );\n  }\n}\n\nexport default CampaignIndex;\n"]},"metadata":{},"sourceType":"module"}