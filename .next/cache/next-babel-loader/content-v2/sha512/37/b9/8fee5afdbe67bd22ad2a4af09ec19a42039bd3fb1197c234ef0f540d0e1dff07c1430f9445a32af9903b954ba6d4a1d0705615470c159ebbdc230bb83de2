{"ast":null,"code":"const Web3 = require('web3');\n\nconst Provider = require('truffle-hdwallet-provider');\n\nconst MyContract = require('../ethereum/build/IdVerification.json');\n\nconst address = '0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A';\nconst privateKey = '7a5e5b16d286a451082ee017f08410fae2c0062e4c7faa45f5beafc64df90664'; // this is my private key\n\nconst infuraUrl = 'https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6';\nimport mimc from '../public/mimc.ts';\n\nconst seedrandom = require('seedrandom');\n\nimport searchDatabase from './mongo.js';\nexport async function EthereumStuff(id, hash) {\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m\"); // set up contract and signing key\n\n  const web3 = new Web3(infuraUrl);\n  const myContract = new web3.eth.Contract(JSON.parse(MyContract.interface), '0x2ce8eb3119C3A137eAeD2a73b33C17412b7d6Bf1');\n  web3.eth.accounts.wallet.add(privateKey); // set up info for transaction\n  // take session id and seed random num generator with it so [id].js will be able to get same num\n  // get random num\n  // get Mimc hash of this num (this is the value we will claim we know the pre image of)\n  // convert Mimc hash to hex and store this val in contract\n  // this hex value will be the last input of zkp\n\n  var seededHash = seedrandom(id);\n  const randSeededNum = seededHash() * 1000000000000000000;\n  const mimcVal = mimc(randSeededNum);\n  var hexVal = mimcVal.toString(16);\n  hexVal = `0x${hexVal}`; // turn it into right format for contract\n\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m randSeededNum\", randSeededNum);\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m mimc val\", mimcVal.toString());\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m hexVal \", hexVal); // search Database\n\n  await searchDatabase(hash).catch(console.error); // set up transaction\n\n  const tx = myContract.methods.addNewHash(hexVal);\n  const gas = await tx.estimateGas({\n    from: address\n  });\n  const gasPrice = await web3.eth.getGasPrice();\n  const data = tx.encodeABI();\n  const nonce = await web3.eth.getTransactionCount(address);\n  const txData = {\n    from: address,\n    to: myContract.options.address,\n    data: data,\n    gas: gas,\n    gasPrice: gasPrice,\n    nonce: nonce,\n    chain: 'rinkeby',\n    hardfork: 'istanbul'\n  }; // send transaction\n\n  console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m waiting for transaction...`);\n  const receipt = await web3.eth.sendTransaction(txData);\n  console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Transaction hash: ${receipt.transactionHash}`);\n}","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/backend/ethBackend.js"],"names":["Web3","require","Provider","MyContract","address","privateKey","infuraUrl","mimc","seedrandom","searchDatabase","EthereumStuff","id","hash","console","log","web3","myContract","eth","Contract","JSON","parse","interface","accounts","wallet","add","seededHash","randSeededNum","mimcVal","hexVal","toString","catch","error","tx","methods","addNewHash","gas","estimateGas","from","gasPrice","getGasPrice","data","encodeABI","nonce","getTransactionCount","txData","to","options","chain","hardfork","receipt","sendTransaction","transactionHash"],"mappings":"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","sourcesContent":["const Web3 = require('web3');\nconst Provider = require('truffle-hdwallet-provider');\nconst MyContract = require('../ethereum/build/IdVerification.json');\nconst address = '0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A';\nconst privateKey = '7a5e5b16d286a451082ee017f08410fae2c0062e4c7faa45f5beafc64df90664'; // this is my private key\nconst infuraUrl = 'https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6'; \nimport mimc from '../public/mimc.ts';\nconst seedrandom = require('seedrandom');\nimport searchDatabase from './mongo.js'\n\nexport async function EthereumStuff(id, hash) {\n    console.log( \"\\u001b[1;32m [Ethereum] \\u001b[0m\" );\n  \n  \n    // set up contract and signing key\n    const web3 = new Web3(infuraUrl);\n    const myContract = new web3.eth.Contract(\n      JSON.parse(MyContract.interface),\n      '0x2ce8eb3119C3A137eAeD2a73b33C17412b7d6Bf1'\n    );\n    web3.eth.accounts.wallet.add(privateKey);\n  \n    // set up info for transaction\n    // take session id and seed random num generator with it so [id].js will be able to get same num\n    // get random num\n    // get Mimc hash of this num (this is the value we will claim we know the pre image of)\n    // convert Mimc hash to hex and store this val in contract\n    // this hex value will be the last input of zkp\n  \n    var seededHash = seedrandom(id);\n    const randSeededNum = seededHash() * 1000000000000000000;\n    const mimcVal = mimc(randSeededNum)\n    var hexVal = mimcVal.toString(16);\n    hexVal = `0x${hexVal}` // turn it into right format for contract\n\n    console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m randSeededNum\", randSeededNum)\n    console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m mimc val\", mimcVal.toString())\n    console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m hexVal \", hexVal)\n  \n    // search Database\n    await searchDatabase(hash).catch(console.error);\n  \n    // set up transaction\n    const tx = myContract.methods.addNewHash(hexVal);\n    const gas = await tx.estimateGas({from: address});\n    const gasPrice = await web3.eth.getGasPrice();\n    const data = tx.encodeABI();\n    const nonce = await web3.eth.getTransactionCount(address);\n    const txData = {\n      from: address,\n      to: myContract.options.address,\n      data: data,\n      gas: gas,\n      gasPrice: gasPrice,\n      nonce: nonce, \n      chain: 'rinkeby', \n      hardfork: 'istanbul'\n    };\n    \n    // send transaction\n    console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m waiting for transaction...`);\n    const receipt = await web3.eth.sendTransaction(txData);\n  \n    console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Transaction hash: ${receipt.transactionHash}`);\n  }\n\n"]},"metadata":{},"sourceType":"module"}