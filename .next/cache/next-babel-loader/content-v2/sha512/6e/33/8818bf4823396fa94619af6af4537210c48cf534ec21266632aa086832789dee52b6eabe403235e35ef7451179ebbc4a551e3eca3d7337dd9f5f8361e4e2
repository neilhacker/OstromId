{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/pages/index.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Message, Button, Input, Loader, Grid } from \"semantic-ui-react\";\nimport { Router } from '../routes';\nimport Layout from \"../components/Layout\";\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nimport AccountMessage from \"../components/Accounts\";\nimport OptionButton from \"../components/OptionButton\";\nimport OpenVerificationMessage from \"../components/OpenVerificationMessage\";\nimport factory from \"../ethereum/verification\";\nimport Web3 from \"web3\"; // use this to have connect account button\n\nlet web3;\nimport mimc from '../public/mimc.ts';\nimport { calculateProof } from '../public/prover.js';\nimport { loadStripe } from '@stripe/stripe-js';\nconst stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n\nclass CampaignIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      errorMessage: '',\n      errorTrue: false,\n      verificationType: \"anonymous\",\n      // eth\n      accountAlreadyVerified: false,\n      account: \"No account\",\n      network: \"No network\",\n      accountDetailsRetrieved: false,\n      openVerificationName: null,\n      // stripe\n      clientSecret: null,\n      stripe: null,\n      verification_session_id: null,\n      sessionIdRandNum: null,\n      sessionIdMimcNum: null,\n      //deposit\n      depositAlreadyPaid: false,\n      deposit_Status: \"Not paid\",\n      loaderDepositActive: false,\n      // verification\n      verification_status: \"Not started\",\n      loaderVerificationActive: false,\n      // proof\n      proof_status: \"Not sent\",\n      loaderProofActive: false,\n      //login\n      loginDetailsRecieved: false,\n      // this is for if they get details in current session\n      hasLoginDetails: false,\n      // this is for if they already have details\n      //zkp\n      mimcHashNumState: null,\n      solidityVerifierProof: null\n    });\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      // check if metamask installed and account connected\n      const metaMaskPresent = await this.connectMetaMaskAccountInitialCheck();\n\n      if (!metaMaskPresent) {\n        return;\n      } // checking if account is already verified\n      // at the moment I haven't disabled rest of flow if already verified to make testing easier\n\n\n      const alreadyVerified = await this.checkIfAccountVerified(); // check if deposit is paid\n\n      const paidDeposit = await this.checkDepositPaid(); // if(!paidDeposit) {return;} // this should be live for actual flow\n    });\n\n    _defineProperty(this, \"resetError\", () => {\n      this.setState({\n        errorTrue: false,\n        errorMessage: \"\"\n      });\n    });\n\n    _defineProperty(this, \"changeVerificationType\", () => {\n      if (this.state.verificationType == \"anonymous\") {\n        console.log(\"changing verification type to open\");\n        this.setState({\n          verificationType: \"open\"\n        });\n      } else {\n        console.log(\"changing verification type to anonymous\");\n        this.setState({\n          verificationType: \"anonymous\"\n        });\n      }\n    });\n\n    _defineProperty(this, \"connectMetaMaskAccountInitialCheck\", async () => {\n      if (false && typeof window.ethereum !== \"undefined\") {\n        // We are in the browser and metamask is running.\n        web3 = new Web3(window.ethereum);\n        var address = await ethereum.selectedAddress;\n        var network = ethereum.networkVersion;\n        console.log(\"account\", address);\n        console.log(\"network\", network);\n        const net = this.networkIntToName(network);\n        this.setState({\n          network: net,\n          account: address\n        });\n\n        if (address != null) {\n          console.log(\"setting retireved\");\n          this.setState({\n            accountDetailsRetrieved: true\n          });\n          return true;\n        }\n\n        return false;\n      } else {\n        // We are on the server *OR* the user is not running metamask\n        const provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\");\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"connectMetaMaskAccount\", async () => {\n      // let web3;\n      if (false && typeof window.ethereum !== \"undefined\") {\n        // We are in the browser and metamask is running.\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        web3 = new Web3(window.ethereum);\n        var address = await ethereum.selectedAddress;\n        var network = ethereum.networkVersion;\n        console.log(\"account\", address);\n        console.log(\"network\", network);\n        const net = this.networkIntToName(network);\n        this.setState({\n          network: net,\n          account: address\n        });\n\n        if (address != null) {\n          this.setState({\n            accountDetailsRetrieved: true\n          });\n          await this.checkIfAccountVerified();\n          await this.checkDepositPaid();\n        }\n      } else {\n        // We are on the server *OR* the user is not running metamask\n        const provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\");\n      }\n    });\n\n    _defineProperty(this, \"networkIntToName\", networkId => {\n      switch (networkId) {\n        case \"1\":\n          return \"Main\";\n\n        case \"3\":\n          return \"Ropsten\";\n\n        case \"4\":\n          return \"Rinkeby\";\n\n        case \"42\":\n          return \"Kovan\";\n\n        case \"5\":\n          return \"Goerli\";\n\n        default:\n          return \"Custom\";\n      }\n    });\n\n    _defineProperty(this, \"checkIfAccountVerified\", async () => {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        let anonymousRes = await factory.methods.checkIfAddressVerified().call({\n          from: accounts[0]\n        });\n        let name = await factory.methods.checkIfAddressOpenVerified().call({\n          from: accounts[0]\n        });\n        console.log(\"NAME: \", name);\n        console.log(\"anon: \", anonymousRes);\n\n        if (!name || anonymousRes) {\n          console.log(\"TRUE\");\n          this.setState({\n            accountAlreadyVerified: true\n          });\n        } else {\n          this.setState({\n            accountAlreadyVerified: false\n          });\n        }\n\n        return true;\n      } catch (err) {\n        console.log(\"MetMask aerror\");\n        this.setState({\n          errorMessage: \"It looks like you may be on the wrong MetaMask network\",\n          errorTrue: true\n        });\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"checkDepositPaid\", async () => {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        let res = await factory.methods.checkIfDepositPaid().call({\n          from: accounts[0]\n        }); // this should be uncommented eventually as it will block the verifcation button if no deposit is paid\n\n        this.setState({\n          depositAlreadyPaid: res\n        });\n\n        if (res) {\n          this.setState({\n            deposit_Status: \"Paid\"\n          });\n        } else {\n          this.setState({\n            deposit_Status: \"Not paid\"\n          });\n        }\n\n        return res;\n      } catch (err) {\n        console.log(\"error when initially checking account\");\n        this.setState({\n          errorMessage: \"It looks like there was an error checking if you had paid the deposit\",\n          errorTrue: true\n        });\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"sendDeposit\", async () => {\n      this.setState({\n        loaderDepositActive: true\n      });\n\n      try {\n        this.setState({\n          deposit_Status: \"Sending deposit...\"\n        });\n        const accounts = await web3.eth.getAccounts();\n        await factory.methods.payDeposit().send({\n          from: accounts[0],\n          value: 20 // 20 wei deposit\n\n        });\n        let res = await factory.methods.checkIfDepositPaid().call({\n          from: accounts[0]\n        });\n\n        if (res) {\n          this.setState({\n            depositAlreadyPaid: res,\n            deposit_Status: \"Paid\"\n          });\n        }\n      } catch (err) {\n        console.log(\"error in submit sol proof\");\n        this.setState({\n          errorMessage: err.message,\n          errorTrue: true\n        });\n      }\n\n      this.setState({\n        loaderDepositActive: false\n      });\n    });\n\n    _defineProperty(this, \"createNewStripeSession\", async () => {\n      try {\n        const accounts = await web3.eth.getAccounts();\n        this.setState({\n          verification_status: \"server checking deposit payment\"\n        });\n        const requestOptions = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            title: 'POST of metamask address',\n            address: accounts[0],\n            verificationType: this.state.verificationType\n          })\n        };\n        const response = await fetch('/api/create-verification-session', requestOptions);\n        const data = await response.json();\n        this.setState({\n          clientSecret: data.clientSecret,\n          verification_session_id: data.id\n        }); // fetch('/api/create-verification-session')\n        // .then(res => res.json())\n        // .then(data => this.setState({clientSecret: data.clientSecret, verification_session_id: data.id}))\n\n        this.setState({\n          stripe: await stripePromise\n        });\n      } catch (err) {\n        console.log(\"error when trying to create new verification session\");\n        this.setState({\n          errorMessage: \"It looks like there was an issue creating a new verification session\",\n          errorTrue: true\n        });\n        return false;\n      }\n    });\n\n    _defineProperty(this, \"verifyIdentity\", async event => {\n      event.preventDefault();\n      this.resetError();\n      this.setState({\n        loaderVerificationActive: true\n      }); // creating new stripe session on button click\n\n      await this.createNewStripeSession();\n      let {\n        stripe,\n        clientSecret\n      } = this.state;\n\n      if (!stripe || !clientSecret) {\n        this.setState({\n          loaderVerificationActive: false,\n          errorTrue: true,\n          errorMessage: \"Stripe not connecting\"\n        });\n        return;\n      } // Show the verification modal.\n\n\n      const {\n        error\n      } = await stripe.verifyIdentity(clientSecret);\n\n      if (error) {\n        console.log('[error]', error);\n      } else {\n        console.log('Verification submitted!');\n        this.pollForStatus();\n      }\n    });\n\n    _defineProperty(this, \"pollForStatus\", async () => {\n      if (this.state.verification_status !== \"passed_database_check\" && this.state.verification_status !== \"failed_database_check\") {\n        setTimeout(this.pollForStatus, 5000);\n        this.fetchStatus();\n      }\n\n      if (this.state.verification_status !== \"processing\" && this.state.verification_status !== \"not_submitted\" && this.state.verification_status !== \"verified_waiting_for_database_check\" && this.state.verification_status !== \"server checking deposit payment\") {\n        this.setState({\n          loaderVerificationActive: false\n        });\n\n        if (this.state.verification_status == \"passed_database_check\") {\n          this.setState({\n            loginDetailsRecieved: true,\n            hasLoginDetails: true\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"fetchStatus\", async () => {\n      //handle error if session id isn't set\n      fetch('/api/get-verification-session/' + this.state.verification_session_id).then(res => res.json()).then(data => this.setState({\n        verification_status: data.status,\n        sessionIdRandNum: data.randSeededNum,\n        sessionIdMimcNum: data.mimcVal\n      }));\n    });\n\n    _defineProperty(this, \"hasLoginCredentials\", () => {\n      this.setState({\n        hasLoginDetails: true\n      });\n    });\n\n    _defineProperty(this, \"mimcHashNum\", async () => {\n      const preImage1 = document.getElementById('mimc_num').value;\n      console.log(preImage1);\n      const out = mimc(preImage1);\n      console.log(out.toString());\n      this.setState({\n        mimcHashNumState: out.toString()\n      });\n    });\n\n    _defineProperty(this, \"verifyPreimage\", async () => {\n      const preImage = parseInt(document.getElementById('preImageCredential').value);\n      console.log(preImage);\n      const hash = document.getElementById('mimcHashCredential').value;\n      console.log(hash);\n      const solidityProof = await calculateProof(preImage, hash);\n      this.setState({\n        solidityVerifierProof: solidityProof\n      });\n      console.log(solidityProof);\n    });\n\n    _defineProperty(this, \"submitSolProof\", async () => {\n      // event.preventDefault();\n      this.resetError();\n      this.setState({\n        loaderProofActive: true\n      }); // CREATING ZKP FROM HASH AND PRE-IMAGE \n\n      this.setState({\n        proof_status: \"Creating ZKP\"\n      });\n      const preImage = parseInt(document.getElementById('preImageCredential').value);\n      console.log(preImage);\n      const hash = document.getElementById('mimcHashCredential').value;\n      console.log(hash);\n      const solidityProof = await calculateProof(preImage, hash); // this.setState({solidityVerifierProof: solidityProof});\n\n      console.log(solidityProof); // SUBMIT ZKP TO CONTRACT  \n\n      this.setState({\n        proof_status: \"Starting ETH transaction\"\n      });\n      const fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n      const pi_a = fullProof[0];\n      const pi_b = fullProof[1];\n      const pi_c = fullProof[2];\n      const inputs = fullProof[3]; // send zk proof to verifyHash function\n\n      try {\n        this.setState({\n          proof_status: \"Submitting ZKP...\"\n        });\n        const accounts = await web3.eth.getAccounts();\n        await factory.methods.verifyHash(pi_a, pi_b, pi_c, inputs).send({\n          from: accounts[0]\n        });\n        console.log(\"submitted zkp successfully\"); // Router.reload(window.location.pathname)\n\n        let res = await factory.methods.checkIfAddressVerified().call({\n          from: accounts[0]\n        });\n        this.setState({\n          accountAlreadyVerified: res\n        });\n      } catch (err) {\n        console.log(\"error in submit sol proof\");\n        this.setState({\n          errorMessage: err.message,\n          errorTrue: true\n        });\n      }\n\n      this.setState({\n        loaderProofActive: false\n      });\n    });\n  }\n\n  renderOpenVerificationMessage() {\n    if (this.state.verificationType == \"open\") {\n      return /*#__PURE__*/_jsxDEV(OpenVerificationMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 9\n      }, this);\n    } else {\n      return null;\n    }\n  }\n\n  renderAccountInfo() {\n    if (!this.state.accountDetailsRetrieved) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.connectMetaMaskAccount,\n        className: \"button\",\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(AccountMessage, {\n        network: this.state.network,\n        account: this.state.account,\n        verified: this.state.accountAlreadyVerified,\n        name: this.state.openVerificationName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  renderProofInfo() {\n    // if on open verification mode no proof is needed so don't render\n    if (this.state.verificationType == \"open\") {\n      return null;\n    } // if on anonymous mode look if we have wallet account detail\n\n\n    if (this.state.accountDetailsRetrieved) {\n      // if we have them render button asking if they already have details \n      if (!this.state.hasLoginDetails) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Proof: \", this.state.proof_status, \" \\xA0 \\xA0\", this.state.loaderProofActive ? /*#__PURE__*/_jsxDEV(Loader, {\n              active: true,\n              inline: true,\n              size: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 13\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.hasLoginCredentials,\n            disabled: !this.state.accountDetailsRetrieved,\n            className: \"button\",\n            children: \"If you already have login credentials click here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 9\n        }, this);\n      } // otherwise render button to send proof \n      else {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Proof: \", this.state.proof_status, \" \\xA0 \\xA0\", this.state.loaderProofActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                active: true,\n                inline: true,\n                size: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 15\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.submitSolProof,\n              disabled: !this.state.accountDetailsRetrieved,\n              className: \"button\",\n              children: \"Send proof\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 513,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 11\n          }, this);\n        }\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Proof: \", this.state.proof_status, \" \\xA0 \\xA0\", this.state.loaderProofActive ? /*#__PURE__*/_jsxDEV(Loader, {\n          active: true,\n          inline: true,\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 11\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 25\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: this.changeVerificationType,\n            style: {\n              marginBottom: 25\n            },\n            children: /*#__PURE__*/_jsxDEV(OptionButton, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 15\n          }, this), this.renderOpenVerificationMessage(), /*#__PURE__*/_jsxDEV(Grid, {\n            children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n              width: 6,\n              floated: \"left\",\n              className: \"statusBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Status \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 548,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Account:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 550,\n                columnNumber: 27\n              }, this), this.renderAccountInfo(), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"Deposit: \", this.state.deposit_Status, \" \\xA0 \\xA0\", this.state.loaderDepositActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                  active: true,\n                  inline: true,\n                  size: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 557,\n                  columnNumber: 29\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 554,\n                columnNumber: 27\n              }, this), !this.state.depositAlreadyPaid && this.state.accountDetailsRetrieved ? /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: this.sendDeposit,\n                disabled: !this.state.accountDetailsRetrieved,\n                className: \"button\",\n                children: \"Send deposit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 563,\n                columnNumber: 29\n              }, this) : null, /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"Verification Session: \", this.state.verification_status, \" \\xA0 \\xA0\", this.state.loaderVerificationActive ? /*#__PURE__*/_jsxDEV(Loader, {\n                  active: true,\n                  inline: true,\n                  size: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 573,\n                  columnNumber: 29\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 570,\n                columnNumber: 27\n              }, this), this.state.depositAlreadyPaid ? /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: this.verifyIdentity,\n                disabled: !this.state.accountDetailsRetrieved,\n                disabled: !this.state.depositAlreadyPaid,\n                className: \"button\",\n                children: \"Verify\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 578,\n                columnNumber: 29\n              }, this) : null, this.renderProofInfo(), this.state.errorTrue ? /*#__PURE__*/_jsxDEV(Message, {\n                negative: true,\n                children: [/*#__PURE__*/_jsxDEV(Message.Header, {\n                  children: \"Error\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 620,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: this.state.errorMessage\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 621,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 619,\n                columnNumber: 27\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 17\n            }, this), this.state.verificationType !== \"open\" ? /*#__PURE__*/_jsxDEV(Grid.Column, {\n              width: 9,\n              floated: \"right\",\n              className: \"statusBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Login credentials\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 633,\n                columnNumber: 23\n              }, this), // !this.state.loginDetailsRecieved ?\n              this.state.loginDetailsRecieved ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Pre-image: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 638,\n                    columnNumber: 49\n                  }, this), \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 638,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(PreImageButton, {\n                  children: this.state.sessionIdRandNum\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 639,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Hash: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 641,\n                    columnNumber: 44\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 641,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(HashButton, {\n                  children: this.state.sessionIdMimcNum\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 643,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 637,\n                columnNumber: 25\n              }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"No login details yet...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 645,\n                columnNumber: 34\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 648,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Create and submit proof\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 651,\n                columnNumber: 23\n              }, this), this.state.hasLoginDetails ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: /*#__PURE__*/_jsxDEV(Input, {\n                    id: \"preImageCredential\",\n                    placeholder: \"Pre-image\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 655,\n                    columnNumber: 26\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 655,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: /*#__PURE__*/_jsxDEV(Input, {\n                    id: \"mimcHashCredential\",\n                    placeholder: \"Hash\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 656,\n                    columnNumber: 26\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 656,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 654,\n                columnNumber: 23\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 630,\n              columnNumber: 21\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default CampaignIndex;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/pages/index.js"],"names":["React","Component","Message","Button","Input","Loader","Grid","Router","Layout","PreImageButton","HashButton","AccountMessage","OptionButton","OpenVerificationMessage","factory","Web3","web3","mimc","calculateProof","loadStripe","stripePromise","CampaignIndex","errorMessage","errorTrue","verificationType","accountAlreadyVerified","account","network","accountDetailsRetrieved","openVerificationName","clientSecret","stripe","verification_session_id","sessionIdRandNum","sessionIdMimcNum","depositAlreadyPaid","deposit_Status","loaderDepositActive","verification_status","loaderVerificationActive","proof_status","loaderProofActive","loginDetailsRecieved","hasLoginDetails","mimcHashNumState","solidityVerifierProof","metaMaskPresent","connectMetaMaskAccountInitialCheck","alreadyVerified","checkIfAccountVerified","paidDeposit","checkDepositPaid","setState","state","console","log","window","ethereum","address","selectedAddress","networkVersion","net","networkIntToName","provider","providers","HttpProvider","request","method","networkId","accounts","eth","getAccounts","anonymousRes","methods","checkIfAddressVerified","call","from","name","checkIfAddressOpenVerified","err","res","checkIfDepositPaid","payDeposit","send","value","message","requestOptions","headers","body","JSON","stringify","title","response","fetch","data","json","id","event","preventDefault","resetError","createNewStripeSession","error","verifyIdentity","pollForStatus","setTimeout","fetchStatus","then","status","randSeededNum","mimcVal","preImage1","document","getElementById","out","toString","preImage","parseInt","hash","solidityProof","fullProof","parse","pi_a","pi_b","pi_c","inputs","verifyHash","renderOpenVerificationMessage","renderAccountInfo","connectMetaMaskAccount","renderProofInfo","hasLoginCredentials","submitSolProof","render","marginTop","changeVerificationType","marginBottom","sendDeposit"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Message, Button, Input, Loader, Grid } from \"semantic-ui-react\";\nimport { Router } from '../routes';\n\nimport Layout from \"../components/Layout\";\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nimport AccountMessage from \"../components/Accounts\";\nimport OptionButton from \"../components/OptionButton\";\nimport OpenVerificationMessage from \"../components/OpenVerificationMessage\";\n\nimport factory from \"../ethereum/verification\";\nimport Web3 from \"web3\"; // use this to have connect account button\nlet web3; \n\nimport mimc from '../public/mimc.ts';\nimport { calculateProof } from '../public/prover.js'\n\nimport {loadStripe} from '@stripe/stripe-js';\n\nconst stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n\n\nclass CampaignIndex extends Component {\n \n   state = {\n    errorMessage: '',\n    errorTrue: false,\n    verificationType: \"anonymous\",   \n    // eth\n    accountAlreadyVerified: false,\n    account: \"No account\",\n    network: \"No network\",\n    accountDetailsRetrieved: false,\n    openVerificationName: null,\n    // stripe\n    clientSecret: null,\n    stripe: null,\n    verification_session_id: null,\n    sessionIdRandNum: null,\n    sessionIdMimcNum: null,\n    //deposit\n    depositAlreadyPaid: false,\n    deposit_Status: \"Not paid\",\n    loaderDepositActive: false,\n    // verification\n    verification_status: \"Not started\",\n    loaderVerificationActive: false,\n    // proof\n    proof_status: \"Not sent\",\n    loaderProofActive: false,\n    //login\n    loginDetailsRecieved: false, // this is for if they get details in current session\n    hasLoginDetails: false, // this is for if they already have details\n    //zkp\n    mimcHashNumState:null,\n    solidityVerifierProof:null,\n  };  \n\n  componentDidMount = async () => {\n    // check if metamask installed and account connected\n    const metaMaskPresent = await this.connectMetaMaskAccountInitialCheck();\n    if(!metaMaskPresent) {return;}\n\n    // checking if account is already verified\n    // at the moment I haven't disabled rest of flow if already verified to make testing easier\n    const alreadyVerified = await this.checkIfAccountVerified();\n\n    // check if deposit is paid\n    const paidDeposit = await this.checkDepositPaid();\n    // if(!paidDeposit) {return;} // this should be live for actual flow\n    \n  }\n\n  resetError = () => {\n    this.setState({errorTrue: false, errorMessage: \"\"});\n  }  \n\n  changeVerificationType = () => {\n    if(this.state.verificationType == \"anonymous\") {\n      console.log(\"changing verification type to open\")\n      this.setState({verificationType: \"open\"})\n    } else {\n      console.log(\"changing verification type to anonymous\")\n      this.setState({verificationType: \"anonymous\"})\n    }\n  }\n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------METAMASK STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n  connectMetaMaskAccountInitialCheck = async () => {\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // We are in the browser and metamask is running.\n      \n      web3 = new Web3(window.ethereum);\n\n      var address = await ethereum.selectedAddress;\n      var network = ethereum.networkVersion;\n\n      console.log(\"account\", address)\n      console.log(\"network\", network)\n\n      const net = this.networkIntToName(network)\n\n      this.setState({network: net, account: address})\n\n      if (address != null) {\n        console.log(\"setting retireved\")\n        this.setState({accountDetailsRetrieved: true})\n        return true\n      }\n      return false\n\n    } else {\n      // We are on the server *OR* the user is not running metamask\n      const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\"\n      );\n      return false\n    }\n  }\n  \n  connectMetaMaskAccount = async () => {\n    // let web3;\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // We are in the browser and metamask is running.\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      \n      web3 = new Web3(window.ethereum);\n\n      var address = await ethereum.selectedAddress;\n      var network = ethereum.networkVersion;\n\n      console.log(\"account\", address)\n      console.log(\"network\", network)\n\n      const net = this.networkIntToName(network)\n\n      this.setState({network: net, account: address})\n\n      if (address != null) {\n        this.setState({accountDetailsRetrieved: true})\n        await this.checkIfAccountVerified()\n        await this.checkDepositPaid()\n      }\n\n    } else {\n      // We are on the server *OR* the user is not running metamask\n      const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6\"\n      );\n    }\n  }\n\n  networkIntToName = (networkId) => {\n    switch(networkId) {\n      case \"1\":\n          return \"Main\"\n      case \"3\":\n        return \"Ropsten\"\n      case \"4\":\n        return \"Rinkeby\"\n      case \"42\":\n        return \"Kovan\";\n      case \"5\":\n        return \"Goerli\";\n      default: \n        return \"Custom\";\n    }\n}\n\n\n  checkIfAccountVerified = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n      let anonymousRes = await factory.methods\n        .checkIfAddressVerified()\n        .call({\n            from: accounts[0]\n      });\n\n      let name = await factory.methods\n        .checkIfAddressOpenVerified()\n        .call({\n            from: accounts[0]\n      });\n      console.log(\"NAME: \", name)\n      console.log(\"anon: \", anonymousRes)\n\n      if (!name || anonymousRes) {\n        console.log(\"TRUE\")\n        this.setState({accountAlreadyVerified: true});\n      } else {\n        this.setState({accountAlreadyVerified: false});\n      }\n      return true;\n\n    } catch (err) {\n        console.log(\"MetMask aerror\")\n        this.setState({ \n          errorMessage: \"It looks like you may be on the wrong MetaMask network\", \n          errorTrue: true });\n        return false;\n    }\n  }\n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------DEPOSIT STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  checkDepositPaid = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n      let res = await factory.methods\n        .checkIfDepositPaid()\n        .call({\n            from: accounts[0]\n      });\n      // this should be uncommented eventually as it will block the verifcation button if no deposit is paid\n      this.setState({depositAlreadyPaid: res});\n\n      if(res) {\n        this.setState({deposit_Status: \"Paid\"})\n      } else {\n        this.setState({deposit_Status: \"Not paid\"})\n      }\n      return res;\n\n    } catch (err) {\n        console.log(\"error when initially checking account\")\n        this.setState({ \n          errorMessage: \"It looks like there was an error checking if you had paid the deposit\", \n          errorTrue: true });\n        return false;\n    } \n  }\n\n  sendDeposit = async () => {\n    this.setState({ loaderDepositActive: true});\n  \n    try {\n      this.setState({deposit_Status: \"Sending deposit...\"})\n      const accounts = await web3.eth.getAccounts();\n      await factory.methods\n          .payDeposit()\n          .send({\n              from: accounts[0],\n              value: 20 // 20 wei deposit\n      });\n  \n      let res = await factory.methods\n          .checkIfDepositPaid()\n          .call({\n              from: accounts[0]\n      });\n      \n      if (res) {\n          this.setState({depositAlreadyPaid: res, deposit_Status: \"Paid\"})\n      }\n  \n    } catch (err) {\n        console.log(\"error in submit sol proof\")\n        this.setState({ errorMessage: err.message, errorTrue: true });\n    }\n  this.setState({ loaderDepositActive: false});\n  \n  }\n\n  //-------------------------------------------------------------------------------------------\n  // --------------------------------------STRIPE STUFF--------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  createNewStripeSession = async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n\n      this.setState({ verification_status: \"server checking deposit payment\" })\n\n      const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          title: 'POST of metamask address',\n          address: accounts[0],\n          verificationType: this.state.verificationType })\n      };\n      const response = await fetch('/api/create-verification-session', requestOptions);\n      const data = await response.json();\n      this.setState({clientSecret: data.clientSecret, verification_session_id: data.id})\n\n      // fetch('/api/create-verification-session')\n      // .then(res => res.json())\n      // .then(data => this.setState({clientSecret: data.clientSecret, verification_session_id: data.id}))\n\n      this.setState({ stripe: await stripePromise })\n    } catch (err) {\n      console.log(\"error when trying to create new verification session\")\n      this.setState({ \n        errorMessage: \"It looks like there was an issue creating a new verification session\", \n        errorTrue: true });\n      return false;\n    }\n\n  }\n\n\n  verifyIdentity = async (event) => {\n    event.preventDefault();\n\n    this.resetError()\n    this.setState({ loaderVerificationActive: true});\n\n    // creating new stripe session on button click\n    await this.createNewStripeSession();\n\n    let { stripe, clientSecret } = this.state;\n    \n    if (!stripe || !clientSecret) {\n      this.setState({ loaderVerificationActive: false, errorTrue: true, errorMessage: \"Stripe not connecting\"});\n      return;\n    }\n\n    // Show the verification modal.\n    const { error } = await stripe.verifyIdentity(clientSecret);\n    \n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('Verification submitted!');\n      this.pollForStatus();\n    }\n\n  }\n\n  pollForStatus = async() => {\n\n    if(this.state.verification_status !== \"passed_database_check\" && this.state.verification_status !== \"failed_database_check\") {\n      setTimeout(this.pollForStatus, 5000)\n      this.fetchStatus()\n    }\n    if(this.state.verification_status !== \"processing\" && \n        this.state.verification_status !== \"not_submitted\" && \n        this.state.verification_status !== \"verified_waiting_for_database_check\" &&\n        this.state.verification_status !== \"server checking deposit payment\") \n        {\n          this.setState({ loaderVerificationActive: false});\n          \n          if(this.state.verification_status == \"passed_database_check\") {\n            this.setState({loginDetailsRecieved: true, hasLoginDetails: true});\n        }\n    }\n\n  }\n\nfetchStatus = async () => {\n    //handle error if session id isn't set\n    fetch('/api/get-verification-session/' + this.state.verification_session_id)\n      .then(res => res.json())\n      .then(data => this.setState({\n        verification_status: data.status, \n        sessionIdRandNum: data.randSeededNum,\n        sessionIdMimcNum: data.mimcVal,\n      }))\n  }\n\n\n  //-------------------------------------------------------------------------------------------\n  // ------------------------------------LOGIN DETAILS STUFF------------------------------------\n  //-------------------------------------------------------------------------------------------\n\n  hasLoginCredentials = () => {\n    this.setState({hasLoginDetails: true})\n  }\n\n  mimcHashNum = async () => {\n  const preImage1 = document.getElementById('mimc_num').value\n  console.log(preImage1)\n  const out = mimc(preImage1);\n  console.log(out.toString())\n  this.setState({mimcHashNumState: out.toString()});\n\n  }\n\nverifyPreimage = async() => {\n  const preImage = parseInt(document.getElementById('preImageCredential').value);\n  console.log(preImage)\n  const hash = document.getElementById('mimcHashCredential').value;\n  console.log(hash)\n  const solidityProof = await calculateProof(preImage, hash);\n  this.setState({solidityVerifierProof: solidityProof});\n  console.log(solidityProof)\n}\n\nsubmitSolProof = async () => {\n  // event.preventDefault();\n  this.resetError()\n  this.setState({ loaderProofActive: true});\n\n  // CREATING ZKP FROM HASH AND PRE-IMAGE \n  this.setState({proof_status: \"Creating ZKP\"})\n  const preImage = parseInt(document.getElementById('preImageCredential').value);\n  console.log(preImage)\n  const hash = document.getElementById('mimcHashCredential').value;\n  console.log(hash)\n  const solidityProof = await calculateProof(preImage, hash);\n  // this.setState({solidityVerifierProof: solidityProof});\n  console.log(solidityProof)\n\n  // SUBMIT ZKP TO CONTRACT  \n  this.setState({proof_status: \"Starting ETH transaction\"})\n\n  const fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n\n  const pi_a = fullProof[0]\n  const pi_b = fullProof[1]\n  const pi_c = fullProof[2]\n  const inputs = fullProof[3]\n  \n\n  // send zk proof to verifyHash function\n  try {\n      this.setState({proof_status: \"Submitting ZKP...\"})\n      const accounts = await web3.eth.getAccounts();\n      await factory.methods\n          .verifyHash(pi_a,pi_b,pi_c,inputs)\n          .send({\n              from: accounts[0]\n      });\n      \n      console.log(\"submitted zkp successfully\")\n      // Router.reload(window.location.pathname)\n\n      let res = await factory.methods\n          .checkIfAddressVerified()\n          .call({\n              from: accounts[0]\n      });\n      this.setState({accountAlreadyVerified: res});\n\n    } catch (err) {\n        console.log(\"error in submit sol proof\")\n        this.setState({ errorMessage: err.message, errorTrue: true });\n    }\n\n    this.setState({loaderProofActive: false});\n  }\n  \n  renderOpenVerificationMessage() {\n    if (this.state.verificationType==\"open\") {\n      return (\n        <OpenVerificationMessage></OpenVerificationMessage>\n      )\n    } else {\n      return null\n    }\n  }\n\n  renderAccountInfo() {\n    if (!this.state.accountDetailsRetrieved) {\n      return (\n        <button onClick={this.connectMetaMaskAccount} \n        className=\"button\"                                    \n        >Connect Wallet</button>\n      )\n    } else {\n      return (\n        <AccountMessage \n        network={this.state.network} \n        account={this.state.account}\n        verified={this.state.accountAlreadyVerified}\n        name={this.state.openVerificationName}\n      />\n      )\n    }\n  }\n\n  renderProofInfo() {\n    // if on open verification mode no proof is needed so don't render\n    if (this.state.verificationType==\"open\") {\n      return null;\n    }\n    // if on anonymous mode look if we have wallet account detail\n    if (this.state.accountDetailsRetrieved) {\n       // if we have them render button asking if they already have details \n      if (!this.state.hasLoginDetails) {\n        return (\n        <div>\n          <h3>Proof: {this.state.proof_status} &nbsp; &nbsp;\n          {\n            this.state.loaderProofActive ?\n            <Loader active inline size=\"small\" />: null\n          }\n          </h3>\n          \n          <button onClick={this.hasLoginCredentials} \n          disabled={!this.state.accountDetailsRetrieved}\n          className=\"button\" \n          >If you already have login credentials click here</button>\n        </div>\n        ) \n      } \n      // otherwise render button to send proof \n      else {\n        return (\n          <div>\n            <h3>Proof: {this.state.proof_status} &nbsp; &nbsp;\n            {\n              this.state.loaderProofActive ?\n              <Loader active inline size=\"small\" />: null\n            }\n            </h3>\n            <button onClick={this.submitSolProof} \n            disabled={!this.state.accountDetailsRetrieved}\n            className=\"button\" \n            >Send proof</button>\n        </div>\n        )\n      }\n    }  else {\n      return (\n        <h3>Proof: {this.state.proof_status} &nbsp; &nbsp;\n        {\n          this.state.loaderProofActive ?\n          <Loader active inline size=\"small\" />: null\n        }\n        </h3>\n      )\n    }\n  }\n\n\n  render() {\n    return (\n        <Layout >\n            <div>\n              <div style={{marginTop: 25}}>\n\n              <div onClick={this.changeVerificationType} style={{marginBottom: 25}}>\n              <OptionButton ></OptionButton>\n              </div>\n              {this.renderOpenVerificationMessage()}\n              \n\n              <Grid >\n                <Grid.Column width={6} floated='left' className=\"statusBox\">\n                        {/* --------------------SESSION STATUS--------------------- */}\n                        <h2>Status </h2>\n                        {/* --------------------address status--------------------- */}\n                          <h3>Account:</h3>\n                          {this.renderAccountInfo()}\n\n                         {/* --------------------deposit status--------------------- */}\n                          <h3>Deposit: {this.state.deposit_Status} &nbsp; &nbsp;\n                          {\n                            this.state.loaderDepositActive ?\n                            <Loader active inline size=\"small\" />: null\n                          }\n                          </h3>\n\n                          {\n                            (!this.state.depositAlreadyPaid && this.state.accountDetailsRetrieved) ?\n                            <button onClick={this.sendDeposit} \n                            disabled={!this.state.accountDetailsRetrieved}\n                            className=\"button\" \n                            >Send deposit</button>\n                            : null\n                          }\n                          {/* --------------------verification status--------------------- */}\n                          <h3>Verification Session: {this.state.verification_status} &nbsp; &nbsp;\n                          {\n                            this.state.loaderVerificationActive ?\n                            <Loader active inline size=\"small\" />: null\n                          }\n                          </h3>\n                          {\n                            this.state.depositAlreadyPaid ?\n                            <button onClick={this.verifyIdentity} \n                            disabled={!this.state.accountDetailsRetrieved}\n                            disabled={!this.state.depositAlreadyPaid}\n                            className=\"button\" \n                            >Verify</button>\n                            : null\n                          }\n                          {/* --------------------proof message--------------------- */}\n                          {this.renderProofInfo()}\n\n                          {/* <h3>Proof: {this.state.proof_status} &nbsp; &nbsp;\n                          {\n                            this.state.loaderProofActive ?\n                            <Loader active inline size=\"small\" />: null\n                          }\n                          </h3> */}\n\n                          {/* this is messy but what it does is: If no wallet connected don't show anything */}\n                          {/* if wallet is connected show button asking if user has login details */}\n                          {/* {\n                            this.state.accountDetailsRetrieved ?\n                            <div>\n                            {\n                              !this.state.hasLoginDetails ?\n                              <button onClick={this.hasLoginCredentials} \n                              disabled={!this.state.accountDetailsRetrieved}\n                              className=\"button\" \n                              >If you already have login credentials click here</button>\n                              :\n                              <button onClick={this.submitSolProof} \n                              disabled={!this.state.accountDetailsRetrieved}\n                              className=\"button\" \n                              >Send proof</button>\n                            }\n                            </div>\n                            : null\n                          } */}\n\n                          {/* --------------------error message--------------------- */}\n                          {\n                          this.state.errorTrue ?\n                          <Message negative>\n                            <Message.Header>Error</Message.Header>\n                            <p>{this.state.errorMessage}</p>\n                          </Message> : null\n                          }\n                          \n                    </Grid.Column>\n                    {\n                      (this.state.verificationType !== \"open\") ?\n\n                    \n                    <Grid.Column  width={9} floated='right' className=\"statusBox\" >\n                      {/* --------------------LOGIN CREDENTIALS--------------------- */}\n                      {/* only show if user has logindetails recieved in current session */}\n                      <h2>Login credentials</h2>\n                      {\n                        // !this.state.loginDetailsRecieved ?\n                        this.state.loginDetailsRecieved ?\n                        <div>\n                          <h3>Pre-image: &nbsp; <br></br> </h3> \n                          <PreImageButton>{this.state.sessionIdRandNum}</PreImageButton>\n                      \n                          <h3>Hash: &nbsp; <br></br></h3>\n                          {/* <HashButton>13430753380610635471786589099759983096423845689623637123238304661144465381689</HashButton> */}\n                          <HashButton>{this.state.sessionIdMimcNum}</HashButton>\n\n                        </div> : <h4>No login details yet...</h4>\n                      }\n                                      \n                      <hr/>\n                      {/* ---------------------SUBMIT PROOF---------------------- */}\n                      {/* only show if hasLoginDetails is true  */}\n                      <h2>Create and submit proof</h2>\n                      {\n                      this.state.hasLoginDetails ?\n                      <p>\n                      <p><Input id=\"preImageCredential\" placeholder=\"Pre-image\"></Input></p>\n                      <p><Input id=\"mimcHashCredential\" placeholder=\"Hash\"></Input></p>\n                      </p> : null\n                      }\n                      \n                    </Grid.Column>\n                    : null\n                    }\n                </Grid>\n            </div>\n            </div>\n        </Layout>\n    );\n  }\n}\n\nexport default CampaignIndex;\n"]},"metadata":{},"sourceType":"module"}