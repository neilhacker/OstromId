{"ast":null,"code":"import ffjavascript from \"ffjavascript\";\nexport async function calculateProof(preImage, hash) {\n  const {\n    proof,\n    publicSignals\n  } = await snarkjs.groth16.fullProve({\n    x: preImage,\n    hash: hash.toString()\n  }, \"/circuits/hash/circuit.wasm\", \"/circuits/keys/hash/circuit_final.zkey\");\n  console.log(proof);\n  console.log(publicSignals); // const pub = unstringifyBigInts$2(JSON.parse(fs__default['default'].readFileSync(publicSignals, \"utf8\")));\n\n  const thing = p256(proof.pi_a[0]);\n  console.log(thing);\n  const vKey = await fetch(\"/circuits/keys/hash/verification_key.json\").then(function (res) {\n    return res.json();\n  });\n  const res = await snarkjs.groth16.verify(vKey, publicSignals, proof);\n  return res;\n}\n\nfunction p256(n) {\n  let nstr = n.toString(16);\n\n  while (nstr.length < 64) nstr = \"0\" + nstr;\n\n  nstr = `\"0x${nstr}\"`;\n  return nstr;\n}\n\nasync function groth16ExportSolidityCallData(proof, pub) {\n  let inputs = \"\";\n\n  for (let i = 0; i < pub.length; i++) {\n    if (inputs != \"\") inputs = inputs + \",\";\n    inputs = inputs + p256(pub[i]);\n  }\n\n  let S;\n  S = `[${p256(proof.pi_a[0])}, ${p256(proof.pi_a[1])}],` + `[[${p256(proof.pi_b[0][1])}, ${p256(proof.pi_b[0][0])}],[${p256(proof.pi_b[1][1])}, ${p256(proof.pi_b[1][0])}]],` + `[${p256(proof.pi_c[0])}, ${p256(proof.pi_c[1])}],` + `[${inputs}]`;\n  return S;\n}","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_2/prover.js"],"names":["ffjavascript","calculateProof","preImage","hash","proof","publicSignals","snarkjs","groth16","fullProve","x","toString","console","log","thing","p256","pi_a","vKey","fetch","then","res","json","verify","n","nstr","length","groth16ExportSolidityCallData","pub","inputs","i","S","pi_b","pi_c"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,cAAzB;AAEA,OAAO,eAAeC,cAAf,CAA8BC,QAA9B,EAAwCC,IAAxC,EAA8C;AACjD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MACJ,MAAMC,OAAO,CAACC,OAAR,CAAgBC,SAAhB,CAA0B;AAAEC,IAAAA,CAAC,EAAEP,QAAL;AAAeC,IAAAA,IAAI,EAAEA,IAAI,CAACO,QAAL;AAArB,GAA1B,EAAkE,6BAAlE,EAAiG,wCAAjG,CADR;AAGEC,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYP,aAAZ,EAL+C,CAM/C;;AAEA,QAAMQ,KAAK,GAAGC,IAAI,CAACV,KAAK,CAACW,IAAN,CAAW,CAAX,CAAD,CAAlB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AAEA,QAAMG,IAAI,GAAG,MAAMC,KAAK,CAAC,2CAAD,CAAL,CAAmDC,IAAnD,CAAwD,UAASC,GAAT,EAAc;AACvF,WAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,GAFkB,CAAnB;AAIF,QAAMD,GAAG,GAAG,MAAMb,OAAO,CAACC,OAAR,CAAgBc,MAAhB,CAAuBL,IAAvB,EAA6BX,aAA7B,EAA4CD,KAA5C,CAAlB;AAEA,SAAOe,GAAP;AACD;;AAEH,SAASL,IAAT,CAAcQ,CAAd,EAAiB;AACb,MAAIC,IAAI,GAAGD,CAAC,CAACZ,QAAF,CAAW,EAAX,CAAX;;AACA,SAAOa,IAAI,CAACC,MAAL,GAAc,EAArB,EAAyBD,IAAI,GAAG,MAAIA,IAAX;;AACzBA,EAAAA,IAAI,GAAI,MAAKA,IAAK,GAAlB;AACA,SAAOA,IAAP;AACH;;AAED,eAAeE,6BAAf,CAA6CrB,KAA7C,EAAoDsB,GAApD,EAAyD;AAErD,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACF,GAAG,CAACF,MAApB,EAA4BI,CAAC,EAA7B,EAAiC;AAC7B,QAAID,MAAM,IAAI,EAAd,EAAkBA,MAAM,GAAGA,MAAM,GAAG,GAAlB;AAClBA,IAAAA,MAAM,GAAGA,MAAM,GAAGb,IAAI,CAACY,GAAG,CAACE,CAAD,CAAJ,CAAtB;AACH;;AAED,MAAIC,CAAJ;AACAA,EAAAA,CAAC,GAAE,IAAGf,IAAI,CAACV,KAAK,CAACW,IAAN,CAAW,CAAX,CAAD,CAAgB,KAAID,IAAI,CAACV,KAAK,CAACW,IAAN,CAAW,CAAX,CAAD,CAAgB,IAAhD,GACG,KAAID,IAAI,CAACV,KAAK,CAAC0B,IAAN,CAAW,CAAX,EAAc,CAAd,CAAD,CAAmB,KAAIhB,IAAI,CAACV,KAAK,CAAC0B,IAAN,CAAW,CAAX,EAAc,CAAd,CAAD,CAAmB,MAAKhB,IAAI,CAACV,KAAK,CAAC0B,IAAN,CAAW,CAAX,EAAc,CAAd,CAAD,CAAmB,KAAIhB,IAAI,CAACV,KAAK,CAAC0B,IAAN,CAAW,CAAX,EAAc,CAAd,CAAD,CAAmB,KADhH,GAEG,IAAGhB,IAAI,CAACV,KAAK,CAAC2B,IAAN,CAAW,CAAX,CAAD,CAAgB,KAAIjB,IAAI,CAACV,KAAK,CAAC2B,IAAN,CAAW,CAAX,CAAD,CAAgB,IAFlD,GAGG,IAAGJ,MAAO,GAHf;AAKA,SAAOE,CAAP;AACH","sourcesContent":["import ffjavascript from \"ffjavascript\"\n\nexport async function calculateProof(preImage, hash) {\n    const { proof, publicSignals } =\n      await snarkjs.groth16.fullProve({ x: preImage, hash: hash.toString() }, \"/circuits/hash/circuit.wasm\", \"/circuits/keys/hash/circuit_final.zkey\");\n\n      console.log(proof)\n      console.log(publicSignals)\n      // const pub = unstringifyBigInts$2(JSON.parse(fs__default['default'].readFileSync(publicSignals, \"utf8\")));\n\n      const thing = p256(proof.pi_a[0])\n      console.log(thing)\n\n      const vKey = await fetch(\"/circuits/keys/hash/verification_key.json\").then(function(res) {\n        return res.json();\n      });\n  \n    const res = await snarkjs.groth16.verify(vKey, publicSignals, proof);\n  \n    return res;\n  }\n\nfunction p256(n) {\n    let nstr = n.toString(16);\n    while (nstr.length < 64) nstr = \"0\"+nstr;\n    nstr = `\"0x${nstr}\"`;\n    return nstr;\n}\n\nasync function groth16ExportSolidityCallData(proof, pub) {\n\n    let inputs = \"\";\n    for (let i=0; i<pub.length; i++) {\n        if (inputs != \"\") inputs = inputs + \",\";\n        inputs = inputs + p256(pub[i]);\n    }\n\n    let S;\n    S=`[${p256(proof.pi_a[0])}, ${p256(proof.pi_a[1])}],` +\n        `[[${p256(proof.pi_b[0][1])}, ${p256(proof.pi_b[0][0])}],[${p256(proof.pi_b[1][1])}, ${p256(proof.pi_b[1][0])}]],` +\n        `[${p256(proof.pi_c[0])}, ${p256(proof.pi_c[1])}],` +\n        `[${inputs}]`;\n\n    return S;\n}\n"]},"metadata":{},"sourceType":"module"}