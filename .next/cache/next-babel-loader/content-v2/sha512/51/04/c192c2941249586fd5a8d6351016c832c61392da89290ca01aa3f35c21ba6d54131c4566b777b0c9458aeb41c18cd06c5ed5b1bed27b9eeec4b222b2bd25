{"ast":null,"code":"import { sha256 } from 'js-sha256';\nimport { EthereumStuff } from '../../backend/ethBackend';\n\nconst stripe = require('stripe')('rk_test_51J305OC6YuwVjGqqJ6Sj41vN15r5vfTbCiHd1slfDzXLSgdyjLxofs7oqGCBrWRlVXxpfbpIxHd3hmhmTlbWwGNx00UU16Rwo4');\n\nconst stripeSecret = require('stripe')('sk_test_51J305OC6YuwVjGqqdtMScisG2JWYy339dNtTGf7QE44BdrPbWPqeMKd5WF1nfpnKYhAmbh8GGQbiaolofct52IgZ003WkhWzMr');\n\nconst handler = async (req, res) => {\n  //todo: check stripe signing key\n  if (req.method === \"POST\") {\n    const event = req.body; // need to verifiy that event came from stripe \n    // https://stripe.com/docs/identity/handle-verification-outcomes\n    // Handle the event\n\n    switch (event.type) {\n      case 'identity.verification_session.verified':\n        {\n          // All the verification checks passed\n          const verificationSession = event.data.object;\n          console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m Identity verification session verified\");\n          const verifiedOutputs = await stripe.identity.verificationSessions.retrieve(verificationSession.id, {\n            expand: ['verified_outputs', 'verified_outputs.dob']\n          });\n          console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m MetaData: \", verificationSession.metadata);\n          console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m Hashing user details...\");\n          const hash = makeHashOfDetails(verifiedOutputs);\n          console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m Hash made: \", hash);\n          const res = await EthereumStuff(verificationSession.id, hash);\n          console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m result of database check: \", res);\n\n          if (res == false) {\n            const thing = await stripeSecret.identity.verificationSessions.update(verificationSession.id, {\n              metadata: {\n                passedDatabaseCheck: false\n              }\n            });\n          } else {\n            const thing = await stripeSecret.identity.verificationSessions.update(verificationSession.id, {\n              metadata: {\n                passedDatabaseCheck: true\n              }\n            });\n          }\n\n          break;\n        }\n\n      default:\n        // Unexpected event type\n        console.log(`❌ Unhandled event type ${event.type}.`);\n    } // Return a 200 response to acknowledge receipt of the event\n\n\n    res.send(); // res.status(200).json({ })\n  } else {\n    res.setHeader(\"Allow\", \"POST\");\n    res.status(405).end(\"Method Not Allowed\");\n  }\n};\n\nconst makeHashOfDetails = verifiedOutputs => {\n  const firstName = verifiedOutputs.verified_outputs.first_name.toString().toLowerCase();\n  const lastName = verifiedOutputs.verified_outputs.last_name.toString().toLowerCase();\n  const dayStr = verifiedOutputs.verified_outputs.dob.day.toString();\n  const monthStr = verifiedOutputs.verified_outputs.dob.month.toString();\n  const yearStr = verifiedOutputs.verified_outputs.dob.year.toString();\n  const combination = firstName + lastName + dayStr + monthStr + yearStr;\n  const hashCombination = sha256(combination);\n  return hashCombination;\n};\n\nexport default handler;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_6/pages/api/stripe_hook.js"],"names":["sha256","EthereumStuff","stripe","require","stripeSecret","handler","req","res","method","event","body","type","verificationSession","data","object","console","log","verifiedOutputs","identity","verificationSessions","retrieve","id","expand","metadata","hash","makeHashOfDetails","thing","update","passedDatabaseCheck","send","setHeader","status","end","firstName","verified_outputs","first_name","toString","toLowerCase","lastName","last_name","dayStr","dob","day","monthStr","month","yearStr","year","combination","hashCombination"],"mappings":"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","sourcesContent":["import { sha256 } from 'js-sha256';\nimport { EthereumStuff } from '../../backend/ethBackend';\n\nconst stripe = require('stripe')('rk_test_51J305OC6YuwVjGqqJ6Sj41vN15r5vfTbCiHd1slfDzXLSgdyjLxofs7oqGCBrWRlVXxpfbpIxHd3hmhmTlbWwGNx00UU16Rwo4');\nconst stripeSecret = require('stripe')('sk_test_51J305OC6YuwVjGqqdtMScisG2JWYy339dNtTGf7QE44BdrPbWPqeMKd5WF1nfpnKYhAmbh8GGQbiaolofct52IgZ003WkhWzMr');\n\nconst handler = async (req, res) => {\n    //todo: check stripe signing key\n    if (req.method === \"POST\") {\n        const event = req.body;\n\n        // need to verifiy that event came from stripe \n        // https://stripe.com/docs/identity/handle-verification-outcomes\n      \n        // Handle the event\n        switch (event.type) {\n          case 'identity.verification_session.verified': {\n              // All the verification checks passed\n              const verificationSession = event.data.object;\n              console.log( \"\\u001b[1;32m [Stripe] \\u001b[0m Identity verification session verified\" );\n\n              const verifiedOutputs = await stripe.identity.verificationSessions.retrieve(\n                verificationSession.id,\n                {\n                  expand: [\n                    'verified_outputs',\n                    'verified_outputs.dob',\n                  ],\n                }\n              );\n              console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m MetaData: \", verificationSession.metadata)\n\n              console.log( \"\\u001b[1;32m [Stripe] \\u001b[0m Hashing user details...\" );\n              const hash = makeHashOfDetails(verifiedOutputs);\n              console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m Hash made: \", hash)\n                            \n              const res = await EthereumStuff(verificationSession.id, hash);\n              console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m result of database check: \", res)\n\n              if (res == false) {\n                const thing = await stripeSecret.identity.verificationSessions.update(\n                  verificationSession.id,\n                  {metadata: {passedDatabaseCheck: false}}\n                );\n              } else {\n                const thing = await stripeSecret.identity.verificationSessions.update(\n                  verificationSession.id,\n                  {metadata: {passedDatabaseCheck: true}}\n                );\n              }\n              \n              break;\n            }\n        \n          default:\n            // Unexpected event type\n            console.log(`❌ Unhandled event type ${event.type}.`);\n        }\n        // Return a 200 response to acknowledge receipt of the event\n        res.send();\n        // res.status(200).json({ })\n    } else {\n      res.setHeader(\"Allow\", \"POST\");\n      res.status(405).end(\"Method Not Allowed\");\n    }\n}\n\nconst makeHashOfDetails = (verifiedOutputs) => {\n  const firstName = verifiedOutputs.verified_outputs.first_name.toString().toLowerCase();\n  const lastName = verifiedOutputs.verified_outputs.last_name.toString().toLowerCase();\n  const dayStr = verifiedOutputs.verified_outputs.dob.day.toString();\n  const monthStr = verifiedOutputs.verified_outputs.dob.month.toString();\n  const yearStr = verifiedOutputs.verified_outputs.dob.year.toString();\n\n  const combination = firstName + lastName + dayStr + monthStr + yearStr;\n\n  const hashCombination = sha256(combination);\n  return hashCombination;\n\n} \n\n\n\nexport default handler;"]},"metadata":{},"sourceType":"module"}