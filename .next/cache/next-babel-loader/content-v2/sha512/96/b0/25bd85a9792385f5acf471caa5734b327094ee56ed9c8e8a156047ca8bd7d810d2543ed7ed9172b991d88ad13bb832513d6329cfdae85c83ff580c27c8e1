{"ast":null,"code":"const stripe = require('stripe')('sk_test_51J305OC6YuwVjGqqdtMScisG2JWYy339dNtTGf7QE44BdrPbWPqeMKd5WF1nfpnKYhAmbh8GGQbiaolofct52IgZ003WkhWzMr');\n\nimport mimc from '../../../mimc.ts';\n\nconst seedrandom = require('seedrandom');\n\nlet seededHash, randSeededNum, mimcVal;\nexport default async function handler(req, res) {\n  const {\n    id\n  } = req.query;\n  const verificationSession = await stripe.identity.verificationSessions.retrieve(id);\n  let {\n    status\n  } = verificationSession; // create random num and mimc hash of that num if session is verified\n\n  if (verificationSession.status == \"verified\") {\n    seededHash = seedrandom(id);\n    randSeededNum = seededHash() * 1000000000000000000;\n    console.log(\"randSeededNum in [id].js \", randSeededNum);\n    mimcVal = mimc(randSeededNum);\n    console.log(\"mimc val in [id].js \", mimcVal.toString());\n  }\n\n  res.status(200).json({\n    status,\n    randSeededNum,\n    mimcVal\n  });\n}","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_4/pages/api/get-verification-session/[id].js"],"names":["stripe","require","mimc","seedrandom","seededHash","randSeededNum","mimcVal","handler","req","res","id","query","verificationSession","identity","verificationSessions","retrieve","status","console","log","toString","json"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkB,6GAAlB,CAAf;;AACA,OAAOC,IAAP,MAAiB,kBAAjB;;AACA,MAAMC,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AAEA,IAAIG,UAAJ,EAAeC,aAAf,EAA8BC,OAA9B;AAEA,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC9C,QAAM;AAACC,IAAAA;AAAD,MAAOF,GAAG,CAACG,KAAjB;AACA,QAAMC,mBAAmB,GAAG,MAAMZ,MAAM,CAACa,QAAP,CAAgBC,oBAAhB,CAAqCC,QAArC,CAA8CL,EAA9C,CAAlC;AACA,MAAI;AAACM,IAAAA;AAAD,MAAWJ,mBAAf,CAH8C,CAK9C;;AACA,MAAIA,mBAAmB,CAACI,MAApB,IAA8B,UAAlC,EAA8C;AAC5CZ,IAAAA,UAAU,GAAGD,UAAU,CAACO,EAAD,CAAvB;AACAL,IAAAA,aAAa,GAAGD,UAAU,KAAK,mBAA/B;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCb,aAAzC;AAEAC,IAAAA,OAAO,GAAGJ,IAAI,CAACG,aAAD,CAAd;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCZ,OAAO,CAACa,QAAR,EAApC;AACD;;AAGDV,EAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAAEJ,IAAAA,MAAF;AAAUX,IAAAA,aAAV;AAAyBC,IAAAA;AAAzB,GAArB;AACD","sourcesContent":["const stripe = require('stripe')('sk_test_51J305OC6YuwVjGqqdtMScisG2JWYy339dNtTGf7QE44BdrPbWPqeMKd5WF1nfpnKYhAmbh8GGQbiaolofct52IgZ003WkhWzMr');\nimport mimc from '../../../mimc.ts';\nconst seedrandom = require('seedrandom');\n\nlet seededHash,randSeededNum, mimcVal; \n\nexport default async function handler(req, res) {\n  const {id} = req.query;\n  const verificationSession = await stripe.identity.verificationSessions.retrieve(id);\n  let {status} = verificationSession;\n\n  // create random num and mimc hash of that num if session is verified\n  if (verificationSession.status == \"verified\") {\n    seededHash = seedrandom(id);\n    randSeededNum = seededHash() * 1000000000000000000;\n    console.log(\"randSeededNum in [id].js \", randSeededNum)\n\n    mimcVal = mimc(randSeededNum)\n    console.log(\"mimc val in [id].js \", mimcVal.toString())\n  }\n  \n\n  res.status(200).json({ status, randSeededNum, mimcVal })\n}"]},"metadata":{},"sourceType":"module"}