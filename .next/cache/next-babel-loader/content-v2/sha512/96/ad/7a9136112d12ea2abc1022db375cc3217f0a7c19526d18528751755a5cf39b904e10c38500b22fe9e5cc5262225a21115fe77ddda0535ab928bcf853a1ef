{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/pages/index.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Message, Button, Input, Icon, Loader, Dimmer, Segment } from \"semantic-ui-react\";\nimport factory from \"../ethereum/verification\";\nimport solVerifier from \"../ethereum/verifier\";\nimport Layout from \"../components/Layout\";\nimport { Link } from '../routes';\nimport web3 from '../ethereum/web3'; // import { Router } from '../routes';\n\nimport { loadStripe } from '@stripe/stripe-js';\nimport Router from 'next/router';\nimport { sha256 } from 'js-sha256';\nimport mimc from '../public/mimc.ts';\nimport { calculateProof } from '../public/prover.js';\nimport CopyMessage from '../components/CopyMessage';\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nconst stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\nconst STATUS_PENDING = \"processing\";\nconst STATUS_SUCCESS = \"verified\";\nconst STATUS_ERROR = \"?\";\nconst STATUS_NOT_STARTED = \"not_submitted\";\n\nclass CampaignIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      errorMessage: '',\n      errorTrue: false,\n      loaderActive: false,\n      accountAlreadyVerified: false,\n      // stripe\n      clientSecret: null,\n      stripe: null,\n      verification_status: STATUS_NOT_STARTED,\n      verification_session_id: null,\n      sessionIdRandNum: null,\n      sessionIdMimcNum: null,\n      //login\n      loginDetailsRecieved: false,\n      //zkp\n      mimcHashNumState: null,\n      solidityVerifierProof: null,\n      zkResult: null\n    });\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      fetch('/api/create-verification-session').then(res => res.json()).then(data => this.setState({\n        clientSecret: data.clientSecret,\n        verification_session_id: data.id\n      }));\n      this.setState({\n        stripe: await stripePromise\n      }); // checking if account is already verified\n\n      const accounts = await web3.eth.getAccounts();\n      let res = await factory.methods.checkIfAddressVerified().call({\n        from: accounts[0]\n      });\n      this.setState({\n        accountAlreadyVerified: res\n      });\n    });\n\n    _defineProperty(this, \"verifyIdentity\", async event => {\n      event.preventDefault();\n      this.resetError();\n      this.setState({\n        loaderActive: true\n      });\n      let {\n        stripe,\n        clientSecret\n      } = this.state;\n\n      if (!stripe || !clientSecret) {\n        this.setState({\n          loaderActive: false,\n          errorTrue: true,\n          errorMessage: \"Stripe not connecting\"\n        });\n        return;\n      } // Show the verification modal.\n\n\n      const {\n        error\n      } = await stripe.verifyIdentity(clientSecret);\n\n      if (error) {\n        console.log('[error]', error);\n      } else {\n        console.log('Verification submitted!');\n        this.pollForStatus();\n      }\n    });\n\n    _defineProperty(this, \"pollForStatus\", async () => {\n      if (this.state.verification_status !== STATUS_SUCCESS) {\n        setTimeout(this.pollForStatus, 5000);\n        this.fetchStatus();\n      }\n\n      if (this.state.verification_status !== STATUS_PENDING && this.state.verification_status !== STATUS_NOT_STARTED) {\n        this.setState({\n          loaderActive: false,\n          loginDetailsRecieved: true\n        });\n      }\n    });\n\n    _defineProperty(this, \"fetchStatus\", async () => {\n      //handle error if session id isn't set\n      fetch('/api/get-verification-session/' + this.state.verification_session_id).then(res => res.json()).then(data => this.setState({\n        verification_status: data.status,\n        sessionIdRandNum: data.randSeededNum,\n        sessionIdMimcNum: data.mimcVal\n      }));\n    });\n\n    _defineProperty(this, \"mimcHashNum\", async () => {\n      const preImage1 = document.getElementById('mimc_num').value;\n      console.log(preImage1);\n      const out = mimc(preImage1);\n      console.log(out.toString());\n      this.setState({\n        mimcHashNumState: out.toString()\n      });\n    });\n\n    _defineProperty(this, \"verifyPreimage\", async () => {\n      const preImage = parseInt(document.getElementById('preImageCredential').value);\n      console.log(preImage);\n      const hash = document.getElementById('mimcHashCredential').value;\n      console.log(hash);\n      const solidityProof = await calculateProof(preImage, hash);\n      this.setState({\n        solidityVerifierProof: solidityProof\n      });\n      console.log(solidityProof);\n    });\n\n    _defineProperty(this, \"submitSolProof\", async () => {\n      // event.preventDefault();\n      // CREATING ZKP FROM HASH AND PRE-IMAGE \n      const preImage = parseInt(document.getElementById('preImageCredential').value);\n      console.log(preImage);\n      const hash = document.getElementById('mimcHashCredential').value;\n      console.log(hash);\n      const solidityProof = await calculateProof(preImage, hash); // this.setState({solidityVerifierProof: solidityProof});\n\n      console.log(solidityProof); // SUBMIT ZKP TO CONTRACT  \n\n      this.setState({\n        loaderActive: true,\n        errorMessage: ''\n      });\n      this.setState({\n        verification_status: \"starting eth transaction\"\n      });\n      const fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n      const pi_a = fullProof[0];\n      const pi_b = fullProof[1];\n      const pi_c = fullProof[2];\n      const inputs = fullProof[3]; // send zk proof to verifyHash function\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        await factory.methods.verifyHash(pi_a, pi_b, pi_c, inputs).send({\n          from: accounts[0]\n        });\n        console.log(\"submitted zkp successfully\"); // Router.reload(window.location.pathname)\n\n        let res = await factory.methods.checkIfAddressVerified().call({\n          from: accounts[0]\n        });\n        this.setState({\n          zkResult: res.toString()\n        });\n        console.log(\"checked if msg.sender is verified\");\n      } catch (err) {\n        console.log(\"error in submit sol proof\");\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        loaderActive: false\n      });\n    });\n\n    _defineProperty(this, \"resetError\", () => {\n      this.setState({\n        errorTrue: false,\n        errorMessage: \"\"\n      });\n    });\n  }\n\n  static async getInitialProps() {\n    const count = await factory.methods.getNumOfVerifiedTransactions().call();\n    return {\n      count\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 50,\n            marginLeft: 200\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Session status: \", this.state.verification_status, \" \\xA0 \\xA0\", this.state.loaderActive ? /*#__PURE__*/_jsxDEV(Loader, {\n              active: true,\n              inline: true,\n              size: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 19\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 17\n          }, this), this.state.errorTrue ? /*#__PURE__*/_jsxDEV(Message, {\n            negative: true,\n            children: [/*#__PURE__*/_jsxDEV(Message.Header, {\n              children: \"Error\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: this.state.errorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 17\n          }, this) : null, this.state.accountAlreadyVerified ? /*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              color: \"rgb(83, 193, 77)\"\n            },\n            children: \"Looks like your account is already verified\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 19\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Verify your identity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            primary: true,\n            onClick: this.verifyIdentity,\n            children: \"Verify\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Login credentials\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 17\n          }, this), this.state.loginDetailsRecieved ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Pre-image: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 43\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(PreImageButton, {\n              children: this.state.sessionIdRandNum\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Hash: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 38\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(HashButton, {\n              children: this.state.sessionIdMimcNum\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"No login details yet...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Create and submit proof\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              id: \"preImageCredential\",\n              placeholder: \"Pre-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 20\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              id: \"mimcHashCredential\",\n              placeholder: \"Hash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 20\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            primary: true,\n            onClick: this.submitSolProof,\n            children: \"Send proof\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Result: \", this.state.zkResult]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default CampaignIndex;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/pages/index.js"],"names":["React","Component","Message","Button","Input","Icon","Loader","Dimmer","Segment","factory","solVerifier","Layout","Link","web3","loadStripe","Router","sha256","mimc","calculateProof","CopyMessage","PreImageButton","HashButton","stripePromise","STATUS_PENDING","STATUS_SUCCESS","STATUS_ERROR","STATUS_NOT_STARTED","CampaignIndex","errorMessage","errorTrue","loaderActive","accountAlreadyVerified","clientSecret","stripe","verification_status","verification_session_id","sessionIdRandNum","sessionIdMimcNum","loginDetailsRecieved","mimcHashNumState","solidityVerifierProof","zkResult","fetch","then","res","json","data","setState","id","accounts","eth","getAccounts","methods","checkIfAddressVerified","call","from","event","preventDefault","resetError","state","error","verifyIdentity","console","log","pollForStatus","setTimeout","fetchStatus","status","randSeededNum","mimcVal","preImage1","document","getElementById","value","out","toString","preImage","parseInt","hash","solidityProof","fullProof","JSON","parse","pi_a","pi_b","pi_c","inputs","verifyHash","send","err","message","getInitialProps","count","getNumOfVerifiedTransactions","render","marginTop","marginLeft","color","submitSolProof"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Message, Button, Input, Icon, Loader, Dimmer,Segment } from \"semantic-ui-react\";\nimport factory from \"../ethereum/verification\";\nimport solVerifier from \"../ethereum/verifier\";\n\nimport Layout from \"../components/Layout\";\nimport { Link } from '../routes';\nimport web3 from '../ethereum/web3'\n// import { Router } from '../routes';\nimport {loadStripe} from '@stripe/stripe-js';\nimport Router from 'next/router'\nimport { sha256 } from 'js-sha256';\nimport mimc from '../public/mimc.ts';\n\nimport { calculateProof } from '../public/prover.js'\n\nimport CopyMessage from '../components/CopyMessage'\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\n\n\nconst stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n\nconst STATUS_PENDING = \"processing\"\nconst STATUS_SUCCESS = \"verified\";\nconst STATUS_ERROR = \"?\"\nconst STATUS_NOT_STARTED = \"not_submitted\";\n\nclass CampaignIndex extends Component {\n \n  static async getInitialProps() {\n    const count = await factory.methods.getNumOfVerifiedTransactions().call();\n\n    return { count };\n  }\n\n  state = {\n    errorMessage: '',\n    errorTrue: false,\n    loaderActive: false,\n    accountAlreadyVerified: false,\n    // stripe\n    clientSecret: null,\n    stripe: null,\n    verification_status: STATUS_NOT_STARTED,\n    verification_session_id: null,\n    sessionIdRandNum: null,\n    sessionIdMimcNum: null,\n    //login\n    loginDetailsRecieved: false,\n    //zkp\n    mimcHashNumState:null,\n    solidityVerifierProof:null,\n    zkResult: null,\n  };  \n\n  componentDidMount = async () => {\n    fetch('/api/create-verification-session')\n    .then(res => res.json())\n    .then(data => this.setState({clientSecret: data.clientSecret, verification_session_id: data.id}))\n\n    this.setState({ stripe: await stripePromise })\n\n    // checking if account is already verified\n    const accounts = await web3.eth.getAccounts();\n    let res = await factory.methods\n        .checkIfAddressVerified()\n        .call({\n            from: accounts[0]\n    });\n    this.setState({accountAlreadyVerified: res});\n\n\n  }\n\n  verifyIdentity = async (event) => {\n    event.preventDefault();\n\n    this.resetError()\n    this.setState({ loaderActive: true});\n\n    let { stripe, clientSecret } = this.state;\n    \n    if (!stripe || !clientSecret) {\n      this.setState({ loaderActive: false, errorTrue: true, errorMessage: \"Stripe not connecting\"});\n      return;\n    }\n\n    // Show the verification modal.\n    const { error } = await stripe.verifyIdentity(clientSecret);\n    \n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('Verification submitted!');\n      this.pollForStatus();\n    }\n\n  }\n\n  pollForStatus = async() => {\n    if(this.state.verification_status !== STATUS_SUCCESS) {\n      setTimeout(this.pollForStatus, 5000)\n      this.fetchStatus()\n    }\n    if(this.state.verification_status !== STATUS_PENDING && this.state.verification_status !== STATUS_NOT_STARTED) {\n        this.setState({ loaderActive: false, loginDetailsRecieved: true});\n    }\n\n  }\n\n  fetchStatus = async () => {\n    //handle error if session id isn't set\n    fetch('/api/get-verification-session/' + this.state.verification_session_id)\n      .then(res => res.json())\n      .then(data => this.setState({\n        verification_status: data.status, \n        sessionIdRandNum: data.randSeededNum,\n        sessionIdMimcNum: data.mimcVal,\n      }))\n  }\n\nmimcHashNum = async () => {\n const preImage1 = document.getElementById('mimc_num').value\n console.log(preImage1)\n const out = mimc(preImage1);\n console.log(out.toString())\n this.setState({mimcHashNumState: out.toString()});\n\n}\n\nverifyPreimage = async() => {\n  const preImage = parseInt(document.getElementById('preImageCredential').value);\n  console.log(preImage)\n  const hash = document.getElementById('mimcHashCredential').value;\n  console.log(hash)\n  const solidityProof = await calculateProof(preImage, hash);\n  this.setState({solidityVerifierProof: solidityProof});\n  console.log(solidityProof)\n}\n\nsubmitSolProof = async () => {\n  // event.preventDefault();\n  \n  // CREATING ZKP FROM HASH AND PRE-IMAGE \n  const preImage = parseInt(document.getElementById('preImageCredential').value);\n  console.log(preImage)\n  const hash = document.getElementById('mimcHashCredential').value;\n  console.log(hash)\n  const solidityProof = await calculateProof(preImage, hash);\n  // this.setState({solidityVerifierProof: solidityProof});\n  console.log(solidityProof)\n\n  // SUBMIT ZKP TO CONTRACT  \n  this.setState({ loaderActive: true, errorMessage: '' });\n  this.setState({verification_status: \"starting eth transaction\"})\n\n  const fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n\n  const pi_a = fullProof[0]\n  const pi_b = fullProof[1]\n  const pi_c = fullProof[2]\n  const inputs = fullProof[3]\n  \n\n  // send zk proof to verifyHash function\n  try {\n      const accounts = await web3.eth.getAccounts();\n      await factory.methods\n          .verifyHash(pi_a,pi_b,pi_c,inputs)\n          .send({\n              from: accounts[0]\n      });\n      \n      console.log(\"submitted zkp successfully\")\n      // Router.reload(window.location.pathname)\n\n      let res = await factory.methods\n          .checkIfAddressVerified()\n          .call({\n              from: accounts[0]\n      });\n      this.setState({zkResult: res.toString()});\n      console.log(\"checked if msg.sender is verified\")\n\n\n  } catch (err) {\n      console.log(\"error in submit sol proof\")\n      this.setState({ errorMessage: err.message });\n  }\n\n  this.setState({loaderActive: false});\n}\n\n\nresetError = () => {\n  this.setState({errorTrue: false, errorMessage: \"\"});\n}\n\n  render() {\n    return (\n        <Layout >\n            <div>\n              <div style={{marginTop: 50, marginLeft: 200}}>\n\n                {/* --------------------SESSION STATUS--------------------- */}\n                <h2>Session status: {this.state.verification_status} &nbsp; &nbsp;\n                {\n                  this.state.loaderActive ?\n                  <Loader active inline size=\"small\" />: null\n                }\n                </h2>\n                {\n                this.state.errorTrue ?\n                <Message negative>\n                  <Message.Header>Error</Message.Header>\n                  <p>{this.state.errorMessage}</p>\n                </Message> : null\n                }\n                {\n                  this.state.accountAlreadyVerified ?\n                  <h3 style={{color:\"rgb(83, 193, 77)\"}}>Looks like your account is already verified</h3> : null\n                }\n                \n                <hr/>                \n                {/* --------------------VERIFY IDENTITY--------------------- */}\n                <h2>Verify your identity</h2>\n                <Button primary onClick={this.verifyIdentity}>Verify</Button>\n\n                <hr/>\n                \n                {/* --------------------LOGIN CREDENTIALS--------------------- */}\n                <h2>Login credentials</h2>\n                {\n                this.state.loginDetailsRecieved ?\n                  <div>\n                    <h3>Pre-image: &nbsp; <br></br> </h3> \n                    <PreImageButton>{this.state.sessionIdRandNum}</PreImageButton>\n                \n                    <h3>Hash: &nbsp; <br></br></h3>\n                    <HashButton>{this.state.sessionIdMimcNum}</HashButton>\n\n                  </div> : <h4>No login details yet...</h4>\n                }\n                                \n                <hr/>\n                {/* ---------------------SUBMIT PROOF---------------------- */}\n                <h2>Create and submit proof</h2>\n                <p><Input id=\"preImageCredential\" placeholder=\"Pre-image\"></Input></p>\n                <p><Input id=\"mimcHashCredential\" placeholder=\"Hash\"></Input></p>\n                <Button primary onClick={this.submitSolProof} >Send proof</Button> \n\n                <hr/>\n                {/* -----------------------RESULT------------------------ */}\n                <h2>Result: {this.state.zkResult}</h2>\n\n            \n            </div>\n            </div>\n        </Layout>\n    );\n  }\n}\n\nexport default CampaignIndex;\n"]},"metadata":{},"sourceType":"module"}