{"ast":null,"code":"const {\n  MongoClient\n} = require('mongodb');\n\nconst consoleString = \"\\u001b[1;32m [Database] \\u001b[0m \";\nexport default async function searchDatabase(hashVal) {\n  const uri = \"mongodb+srv://nhacker:nhacker12.@cluster0.eubpg.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n  const client = new MongoClient(uri);\n\n  try {\n    await client.connect();\n    await verifyUser(client, {\n      name: hashVal\n    });\n  } catch (e) {\n    console.error(e);\n  } finally {\n    await client.close();\n  }\n} // searchDatabase().catch(console.error);\n\nasync function verifyUser(client, potentialUser) {\n  const alreadyExists = await findOneListingByName(client, potentialUser.name);\n\n  if (alreadyExists) {\n    console.log(`${consoleString} user already exists`);\n  } else {\n    await createListing(client, potentialUser);\n    console.log(`${consoleString} added new user`);\n  }\n}\n\nasync function findOneListingByName(client, nameOfUser) {\n  const result = await client.db(\"id_verification\").collection(\"verified_users\").findOne({\n    name: nameOfUser\n  });\n\n  if (result) {\n    console.log(`${consoleString} Found a listing in the collection with name ${nameOfUser}`);\n    console.log(`${consoleString} ${result}`);\n    return true;\n  } else {\n    console.log(`${consoleString} No listings with name ${nameOfUser}`);\n    return false;\n  }\n}\n\nasync function createListing(client, new_user) {\n  const result = await client.db(\"id_verification\").collection(\"verified_users\").insertOne(new_user);\n  console.log(`${consoleString} new listing created with id: ${result.insertedId}`);\n}","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/mongo.js"],"names":["MongoClient","require","consoleString","searchDatabase","hashVal","uri","client","connect","verifyUser","name","e","console","error","close","potentialUser","alreadyExists","findOneListingByName","log","createListing","nameOfUser","result","db","collection","findOne","new_user","insertOne","insertedId"],"mappings":"AAAA,MAAM;AAACA,EAAAA;AAAD,IAAiBC,OAAO,CAAC,SAAD,CAA9B;;AACA,MAAMC,aAAa,GAAG,oCAAtB;AAEA,eAAe,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAElD,QAAMC,GAAG,GAAG,yGAAZ;AAEA,QAAMC,MAAM,GAAG,IAAIN,WAAJ,CAAgBK,GAAhB,CAAf;;AAEA,MAAI;AACA,UAAMC,MAAM,CAACC,OAAP,EAAN;AAEA,UAAMC,UAAU,CAACF,MAAD,EAAQ;AACpBG,MAAAA,IAAI,EAAEL;AADc,KAAR,CAAhB;AAIH,GAPD,CAOE,OAAOM,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACH,GATD,SASU;AACN,UAAMJ,MAAM,CAACO,KAAP,EAAN;AACH;AAEJ,C,CAED;;AAGA,eAAeL,UAAf,CAA0BF,MAA1B,EAAkCQ,aAAlC,EAAiD;AAC7C,QAAMC,aAAa,GAAG,MAAMC,oBAAoB,CAACV,MAAD,EAASQ,aAAa,CAACL,IAAvB,CAAhD;;AACA,MAAIM,aAAJ,EAAmB;AACfJ,IAAAA,OAAO,CAACM,GAAR,CAAa,GAAEf,aAAc,sBAA7B;AACH,GAFD,MAEO;AACH,UAAMgB,aAAa,CAACZ,MAAD,EAASQ,aAAT,CAAnB;AACAH,IAAAA,OAAO,CAACM,GAAR,CAAa,GAAEf,aAAc,iBAA7B;AACH;AAEJ;;AAED,eAAec,oBAAf,CAAoCV,MAApC,EAA4Ca,UAA5C,EAAwD;AACpD,QAAMC,MAAM,GAAG,MAAMd,MAAM,CAACe,EAAP,CAAU,iBAAV,EAA6BC,UAA7B,CAAwC,gBAAxC,EAA0DC,OAA1D,CAAkE;AAACd,IAAAA,IAAI,EAAEU;AAAP,GAAlE,CAArB;;AAEA,MAAGC,MAAH,EAAW;AACPT,IAAAA,OAAO,CAACM,GAAR,CAAa,GAAEf,aAAc,gDAA+CiB,UAAW,EAAvF;AACAR,IAAAA,OAAO,CAACM,GAAR,CAAa,GAAEf,aAAc,IAAGkB,MAAO,EAAvC;AACA,WAAO,IAAP;AACH,GAJD,MAIO;AACHT,IAAAA,OAAO,CAACM,GAAR,CAAa,GAAEf,aAAc,0BAAyBiB,UAAW,EAAjE;AACA,WAAO,KAAP;AACH;AACJ;;AAED,eAAeD,aAAf,CAA6BZ,MAA7B,EAAqCkB,QAArC,EAA+C;AAC5C,QAAMJ,MAAM,GAAG,MAAMd,MAAM,CAACe,EAAP,CAAU,iBAAV,EAA6BC,UAA7B,CAAwC,gBAAxC,EAA0DG,SAA1D,CAAoED,QAApE,CAArB;AAEAb,EAAAA,OAAO,CAACM,GAAR,CAAa,GAAEf,aAAc,iCAAgCkB,MAAM,CAACM,UAAW,EAA/E;AACF","sourcesContent":["const {MongoClient } = require('mongodb');\nconst consoleString = \"\\u001b[1;32m [Database] \\u001b[0m \";\n\nexport default async function searchDatabase(hashVal) {\n\n    const uri = \"mongodb+srv://nhacker:nhacker12.@cluster0.eubpg.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\"\n\n    const client = new MongoClient(uri);\n\n    try {\n        await client.connect();\n\n        await verifyUser(client,{\n            name: hashVal,\n        })\n\n    } catch (e) {\n        console.error(e);\n    } finally {\n        await client.close()\n    }\n\n}\n\n// searchDatabase().catch(console.error);\n\n\nasync function verifyUser(client, potentialUser) {\n    const alreadyExists = await findOneListingByName(client, potentialUser.name );\n    if (alreadyExists) {\n        console.log(`${consoleString} user already exists`)\n    } else {\n        await createListing(client, potentialUser)\n        console.log(`${consoleString} added new user`)\n    }\n\n}\n\nasync function findOneListingByName(client, nameOfUser) {\n    const result = await client.db(\"id_verification\").collection(\"verified_users\").findOne({name: nameOfUser});\n\n    if(result) {\n        console.log(`${consoleString} Found a listing in the collection with name ${nameOfUser}`)\n        console.log(`${consoleString} ${result}`)\n        return true;\n    } else {\n        console.log(`${consoleString} No listings with name ${nameOfUser}`)\n        return false;\n    }\n}\n\nasync function createListing(client, new_user) {\n   const result = await client.db(\"id_verification\").collection(\"verified_users\").insertOne(new_user);\n\n   console.log(`${consoleString} new listing created with id: ${result.insertedId}`)\n}\n\n"]},"metadata":{},"sourceType":"module"}