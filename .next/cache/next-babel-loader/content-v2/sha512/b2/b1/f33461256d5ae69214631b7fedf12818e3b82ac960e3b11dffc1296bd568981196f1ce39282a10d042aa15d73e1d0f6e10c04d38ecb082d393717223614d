{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_3/pages/index.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Card, Button } from \"semantic-ui-react\";\nimport factory from \"../ethereum/verification\";\nimport solVerifier from \"../ethereum/verifier\";\nimport Layout from \"../components/Layout\";\nimport { Link } from '../routes';\nimport web3 from '../ethereum/web3'; // import { Router } from '../routes';\n\nimport { loadStripe } from '@stripe/stripe-js';\nimport Router from 'next/router';\nimport { sha256 } from 'js-sha256';\nimport mimc from '../mimc.ts';\nimport { calculateProof } from '../prover.js'; // const stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n// const STATUS_PENDING = \"processing\"\n// const STATUS_SUCCESS = \"verified\";\n// const STATUS_ERROR = \"?\"\n// const STATUS_NOT_STARTED = \"not_submitted\";\n\nclass CampaignIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      errorMessage: '',\n      ethLoading: false,\n      verificationLoading: false,\n      clientSecret: null,\n      stripe: null,\n      // verification_status: STATUS_NOT_STARTED,\n      verification_session_id: null,\n      sessionIdRandNum: null,\n      sessionIdMimcNum: null,\n      mimcHashNumState: null,\n      solidityVerifierProof: null,\n      zkResult: null\n    });\n\n    _defineProperty(this, \"sendEthTransaction\", async () => {\n      // event.preventDefault();\n      this.setState({\n        ethLoading: true,\n        errorMessage: ''\n      });\n      this.setState({\n        verification_status: \"starting eth transaction\"\n      });\n      const text = document.getElementById(\"id_hash_credentials\").value;\n\n      try {\n        // const accounts = await web3.eth.getAccounts();\n        // console.log(\"main account\", accounts[0])\n        await factory.methods.verifyHash(text).send({\n          from: \"0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A\"\n        }); // Router.pushRoute('/');\n\n        this.setState({\n          verification_status: \"successful transaction\"\n        });\n        Router.reload(window.location.pathname);\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        ethLoading: false\n      });\n    });\n\n    _defineProperty(this, \"mimcHashNum\", async () => {\n      const preImage1 = document.getElementById('mimc_num').value;\n      console.log(preImage1);\n      const out = mimc(preImage1);\n      console.log(out.toString());\n      this.setState({\n        mimcHashNumState: out.toString()\n      });\n    });\n\n    _defineProperty(this, \"verifyPreimage\", async () => {\n      const hash = this.state.mimcHashNumState;\n      const preImage = document.getElementById('pre_image_num').value;\n      const solidityProof = await calculateProof(preImage, hash);\n      console.log('calculateProof:', solidityProof);\n      this.setState({\n        solidityVerifierProof: solidityProof.toString()\n      });\n    });\n  }\n\n  static async getInitialProps() {\n    const count = await factory.methods.getNumOfVerifiedTransactions().call();\n    return {\n      count\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Layout, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: 200,\n              marginLeft: 200\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Compute Mimc hash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"mimc_num\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              primary: true,\n              onClick: this.mimcHashNum,\n              children: \"Hash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Hashed num:\", this.state.mimcHashNumState]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Prove you know pre image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Hash: \", this.state.mimcHashNumState]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"pre-image: \", /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"pre_image_num\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 31\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                primary: true,\n                onClick: this.verifyPreimage,\n                children: \"Hash\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"result\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 17\n            }, this), this.state.solidityVerifierProof, /*#__PURE__*/_jsxDEV(Button, {\n              primary: true,\n              onClick: this.submitSolProof,\n              children: \"submit proof\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default CampaignIndex;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_3/pages/index.js"],"names":["React","Component","Card","Button","factory","solVerifier","Layout","Link","web3","loadStripe","Router","sha256","mimc","calculateProof","CampaignIndex","errorMessage","ethLoading","verificationLoading","clientSecret","stripe","verification_session_id","sessionIdRandNum","sessionIdMimcNum","mimcHashNumState","solidityVerifierProof","zkResult","setState","verification_status","text","document","getElementById","value","methods","verifyHash","send","from","reload","window","location","pathname","err","message","preImage1","console","log","out","toString","hash","state","preImage","solidityProof","getInitialProps","count","getNumOfVerifiedTransactions","call","render","marginTop","marginLeft","mimcHashNum","verifyPreimage","submitSolProof"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Card, Button } from \"semantic-ui-react\";\nimport factory from \"../ethereum/verification\";\nimport solVerifier from \"../ethereum/verifier\";\n\nimport Layout from \"../components/Layout\";\nimport { Link } from '../routes';\nimport web3 from '../ethereum/web3'\n// import { Router } from '../routes';\nimport {loadStripe} from '@stripe/stripe-js';\nimport Router from 'next/router'\nimport { sha256 } from 'js-sha256';\nimport mimc from '../mimc.ts';\n\nimport { calculateProof } from '../prover.js'\n\n// const stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n\n// const STATUS_PENDING = \"processing\"\n// const STATUS_SUCCESS = \"verified\";\n// const STATUS_ERROR = \"?\"\n// const STATUS_NOT_STARTED = \"not_submitted\";\n\nclass CampaignIndex extends Component {\n \n  static async getInitialProps() {\n    const count = await factory.methods.getNumOfVerifiedTransactions().call();\n\n    return { count };\n  }\n\n  state = {\n    errorMessage: '',\n    ethLoading: false,\n    verificationLoading: false,\n    clientSecret: null,\n    stripe: null,\n    // verification_status: STATUS_NOT_STARTED,\n    verification_session_id: null,\n    sessionIdRandNum: null,\n    sessionIdMimcNum: null,\n    mimcHashNumState:null,\n    solidityVerifierProof:null,\n    zkResult: null,\n  };  \n\n  // componentDidMount = async () => {\n  //   fetch('/api/create-verification-session')\n  //   .then(res => res.json())\n  //   .then(data => this.setState({clientSecret: data.clientSecret, verification_session_id: data.id}))\n\n  //   this.setState({ stripe: await stripePromise })\n  // }\n\n  // verifyIdentity = async (event) => {\n  //   event.preventDefault();\n  //   this.setState({ verificationLoading: true});\n\n  //   let { stripe, clientSecret } = this.state;\n    \n  //   if (!stripe || !clientSecret) {\n  //     return;\n  //   }\n\n  //   // Show the verification modal.\n  //   const { error } = await stripe.verifyIdentity(clientSecret);\n\n  //   if (error) {\n  //     console.log('[error]', error);\n  //   } else {\n  //     console.log('Verification submitted!');\n  //     this.pollForStatus();\n  //   }\n\n  // }\n\n  // pollForStatus = async() => {\n  //   if(this.state.verification_status !== STATUS_SUCCESS) {\n  //     setTimeout(this.pollForStatus, 5000)\n  //     this.fetchStatus()\n  //   }\n  //   if(this.state.verification_status !== STATUS_PENDING && this.state.verification_status !== STATUS_NOT_STARTED) {\n  //       this.setState({ verificationLoading: false});\n  //       // this.sendEthTransaction() // this calls the eth transaction on the front end\n  //   }\n\n  // }\n\n  // fetchStatus = async () => {\n  //   //handle error if session id isn't set\n  //   fetch('/api/get-verification-session/' + this.state.verification_session_id)\n  //     .then(res => res.json())\n  //     .then(data => this.setState({\n  //       verification_status: data.status, \n  //       sessionIdRandNum: data.randSeededNum,\n  //       sessionIdMimcNum: data.mimcVal,\n  //     }))\n  // }\n\n  sendEthTransaction = async () => {\n    // event.preventDefault();\n    \n    this.setState({ ethLoading: true, errorMessage: '' });\n    this.setState({verification_status: \"starting eth transaction\"})\n\n    const text = document.getElementById(\"id_hash_credentials\").value;\n\n    try {\n        // const accounts = await web3.eth.getAccounts();\n        // console.log(\"main account\", accounts[0])\n        await factory.methods\n            .verifyHash(text)\n            .send({\n                from: \"0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A\"\n        });\n        \n        // Router.pushRoute('/');\n        this.setState({verification_status: \"successful transaction\"})\n        Router.reload(window.location.pathname)\n\n\n    } catch (err) {\n        this.setState({ errorMessage: err.message });\n    }\n\n    this.setState({ethLoading: false});\n}\n\nmimcHashNum = async () => {\n const preImage1 = document.getElementById('mimc_num').value\n console.log(preImage1)\n const out = mimc(preImage1);\n console.log(out.toString())\n this.setState({mimcHashNumState: out.toString()});\n\n}\n\nverifyPreimage = async() => {\n  const hash = this.state.mimcHashNumState;\n  const preImage = document.getElementById('pre_image_num').value\n  const solidityProof = await calculateProof(preImage, hash);\n  console.log('calculateProof:', solidityProof)\n  this.setState({solidityVerifierProof: solidityProof.toString()});\n}\n\n\n  render() {\n    return (\n      <>\n        <Layout>\n            <div>\n              <div style={{marginTop: 200, marginLeft: 200}}>\n                {/* <h2>Verify your identity</h2>\n                <Button primary onClick={this.verifyIdentity} loading={this.state.verificationLoading}>Verify</Button>\n                <br></br>\n                <br></br>\n                <p>You have signed {this.props.count} transactions</p>\n                <p>Session status: {this.state.verification_status}</p>\n                \n                <h2>Submit ID credentials</h2>\n                <p>your login credentials:\n                {this.state.sessionIdRandNum}, {this.state.sessionIdMimcNum}</p> */}\n\n                {/* <input id=\"id_hash_credentials\"></input>\n                <Button primary onClick={this.sendEthTransaction} loading={this.state.ethLoading}>Send</Button>  */}\n\n                <h2>Compute Mimc hash</h2>\n                <input id=\"mimc_num\"></input>\n                <Button primary onClick={this.mimcHashNum}>Hash</Button>\n                <p>Hashed num:\n                {this.state.mimcHashNumState}</p>\n\n                <h2>Prove you know pre image</h2>\n                <p>Hash: {this.state.mimcHashNumState}</p> \n                <p>pre-image: <input id=\"pre_image_num\"></input>\n                <Button primary onClick={this.verifyPreimage}>Hash</Button>\n                </p>\n\n                <h2>result</h2>\n                {this.state.solidityVerifierProof}\n\n                <Button primary onClick={this.submitSolProof}>submit proof</Button>\n\n\n            \n            </div>\n            </div>\n        </Layout>\n      </>\n    );\n  }\n}\n\nexport default CampaignIndex;\n"]},"metadata":{},"sourceType":"module"}