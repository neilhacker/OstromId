{"ast":null,"code":"const stripe = require('stripe')('rk_test_51J305OC6YuwVjGqqJ6Sj41vN15r5vfTbCiHd1slfDzXLSgdyjLxofs7oqGCBrWRlVXxpfbpIxHd3hmhmTlbWwGNx00UU16Rwo4');\n\nconst handler = async (req, res) => {\n  //todo: check stripe signing key\n  if (req.method === \"POST\") {\n    const event = req.body; // need to verifiy that event came from stripe \n    // https://stripe.com/docs/identity/handle-verification-outcomes\n    // Handle the event\n\n    switch (event.type) {\n      case 'identity.verification_session.verified':\n        {\n          // All the verification checks passed\n          const verificationSession = event.data.object;\n          console.log(\"\\u001b[1;32m [ID verified] \\u001b[0m\"); // await console.log(`identity.verification_session.verified`, verificationSession);\n\n          const verifiedOutputs = await stripe.identity.verificationSessions.retrieve(verificationSession.id, {\n            expand: ['verified_outputs', 'verified_outputs.dob' // 'last_verification_report.document.number',\n            ]\n          });\n          await console.log(`verifiedOutputs `, verifiedOutputs.verified_outputs.first_name.toString().toLowerCase(), verifiedOutputs.verified_outputs.last_name.toString().toLowerCase(), verifiedOutputs.verified_outputs.dob.day.toString(), verifiedOutputs.verified_outputs.dob.month.toString(), verifiedOutputs.verified_outputs.dob.year.toString()); // EthereumStuff(verificationSession);\n\n          console.log(\"\\u001b[1;32m [ID verified] \\u001b[0m\");\n          break;\n        }\n\n      default:\n        // Unexpected event type\n        console.log(`❌ Unhandled event type ${event.type}.`);\n    } // Return a 200 response to acknowledge receipt of the event\n\n\n    res.send(); // res.status(200).json({ })\n  } else {\n    res.setHeader(\"Allow\", \"POST\");\n    res.status(405).end(\"Method Not Allowed\");\n  }\n};\n\nconst Web3 = require('web3');\n\nconst Provider = require('truffle-hdwallet-provider');\n\nconst MyContract = require('../../ethereum/build/IdVerification.json');\n\nconst address = '0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A';\nconst privateKey = '7a5e5b16d286a451082ee017f08410fae2c0062e4c7faa45f5beafc64df90664'; // this is my private key\n\nconst infuraUrl = 'https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6';\nimport mimc from '../../mimc.ts';\n\nconst seedrandom = require('seedrandom');\n\nimport searchDatabase from '../../mongo.js';\n\nconst EthereumStuff = async verificationSession => {\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m\"); // set up contract and signing key\n\n  const web3 = new Web3(infuraUrl);\n  const myContract = new web3.eth.Contract(JSON.parse(MyContract.interface), '0x65a1772fF0c8eC4780c0d591a3774259e7d40bC1');\n  web3.eth.accounts.wallet.add(privateKey); // set up info for transaction\n  // take session id and seed random num generator with it so [id].js will be able to get same num\n  // get random num\n  // get Mimc hash of this num (this is the value we will claim we know the pre image of)\n  // convert Mimc hash to hex and store this val in contract\n  // this hex value will be the last input of zkp\n\n  var seededHash = seedrandom(verificationSession.id);\n  const randSeededNum = seededHash() * 1000000000000000000;\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m randSeededNum\", randSeededNum);\n  const mimcVal = mimc(randSeededNum);\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m mimc val\", mimcVal.toString());\n  var hexVal = mimcVal.toString(16);\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m hexVal \", hexVal.toString());\n  hexVal = `0x${hexVal}`; // turn it into right format for contract\n\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m hexVal \", hexVal); // search Database\n\n  await searchDatabase(hexVal).catch(console.error); // set up transaction\n\n  const tx = myContract.methods.addNewHash(hexVal);\n  const gas = await tx.estimateGas({\n    from: address\n  });\n  const gasPrice = await web3.eth.getGasPrice();\n  const data = tx.encodeABI();\n  const nonce = await web3.eth.getTransactionCount(address);\n  const txData = {\n    from: address,\n    to: myContract.options.address,\n    data: data,\n    gas: gas,\n    gasPrice: gasPrice,\n    nonce: nonce,\n    chain: 'rinkeby',\n    hardfork: 'istanbul'\n  }; // send transaction\n\n  const receipt = await web3.eth.sendTransaction(txData); // console.log transaction hash to show it has gone through\n\n  console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Transaction hash: ${receipt.transactionHash}`);\n};\n\nexport default handler;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/pages/api/stripe_hook.js"],"names":["stripe","require","handler","req","res","method","event","body","type","verificationSession","data","object","console","log","verifiedOutputs","identity","verificationSessions","retrieve","id","expand","verified_outputs","first_name","toString","toLowerCase","last_name","dob","day","month","year","send","setHeader","status","end","Web3","Provider","MyContract","address","privateKey","infuraUrl","mimc","seedrandom","searchDatabase","EthereumStuff","web3","myContract","eth","Contract","JSON","parse","interface","accounts","wallet","add","seededHash","randSeededNum","mimcVal","hexVal","catch","error","tx","methods","addNewHash","gas","estimateGas","from","gasPrice","getGasPrice","encodeABI","nonce","getTransactionCount","txData","to","options","chain","hardfork","receipt","sendTransaction","transactionHash"],"mappings":"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","sourcesContent":["const stripe = require('stripe')('rk_test_51J305OC6YuwVjGqqJ6Sj41vN15r5vfTbCiHd1slfDzXLSgdyjLxofs7oqGCBrWRlVXxpfbpIxHd3hmhmTlbWwGNx00UU16Rwo4');\n\nconst handler = async (req, res) => {\n    //todo: check stripe signing key\n    if (req.method === \"POST\") {\n        const event = req.body;\n\n        // need to verifiy that event came from stripe \n        // https://stripe.com/docs/identity/handle-verification-outcomes\n      \n        // Handle the event\n        switch (event.type) {\n          case 'identity.verification_session.verified': {\n              // All the verification checks passed\n              const verificationSession = event.data.object;\n              console.log( \"\\u001b[1;32m [ID verified] \\u001b[0m\" );\n\n              // await console.log(`identity.verification_session.verified`, verificationSession);\n\n              const verifiedOutputs = await stripe.identity.verificationSessions.retrieve(\n                verificationSession.id,\n                {\n                  expand: [\n                    'verified_outputs',\n                    'verified_outputs.dob',\n                    // 'last_verification_report.document.number',\n                  ],\n                }\n              );\n              \n\n              await console.log(`verifiedOutputs `,\n              verifiedOutputs.verified_outputs.first_name.toString().toLowerCase(),\n              verifiedOutputs.verified_outputs.last_name.toString().toLowerCase(),\n              verifiedOutputs.verified_outputs.dob.day.toString(),\n              verifiedOutputs.verified_outputs.dob.month.toString(),\n              verifiedOutputs.verified_outputs.dob.year.toString(),\n              );\n                            \n              // EthereumStuff(verificationSession);\n              console.log( \"\\u001b[1;32m [ID verified] \\u001b[0m\" );\n              break;\n            }\n        \n          default:\n            // Unexpected event type\n            console.log(`❌ Unhandled event type ${event.type}.`);\n        }\n        // Return a 200 response to acknowledge receipt of the event\n        res.send();\n        // res.status(200).json({ })\n    } else {\n      res.setHeader(\"Allow\", \"POST\");\n      res.status(405).end(\"Method Not Allowed\");\n    }\n}\n\nconst Web3 = require('web3');\nconst Provider = require('truffle-hdwallet-provider');\nconst MyContract = require('../../ethereum/build/IdVerification.json');\nconst address = '0xCE7DF6060580e5333c0Ab27e9B67b5634A449d6A';\nconst privateKey = '7a5e5b16d286a451082ee017f08410fae2c0062e4c7faa45f5beafc64df90664'; // this is my private key\nconst infuraUrl = 'https://rinkeby.infura.io/v3/675a260276d44f54a06355ce65310ba6'; \nimport mimc from '../../mimc.ts';\nconst seedrandom = require('seedrandom');\nimport searchDatabase from '../../mongo.js'\n\n\n\nconst EthereumStuff = async (verificationSession) => {\n  console.log( \"\\u001b[1;32m [Ethereum] \\u001b[0m\" );\n\n\n  // set up contract and signing key\n  const web3 = new Web3(infuraUrl);\n  const myContract = new web3.eth.Contract(\n    JSON.parse(MyContract.interface),\n    '0x65a1772fF0c8eC4780c0d591a3774259e7d40bC1'\n  );\n  web3.eth.accounts.wallet.add(privateKey);\n\n  // set up info for transaction\n  // take session id and seed random num generator with it so [id].js will be able to get same num\n  // get random num\n  // get Mimc hash of this num (this is the value we will claim we know the pre image of)\n  // convert Mimc hash to hex and store this val in contract\n  // this hex value will be the last input of zkp\n\n  var seededHash = seedrandom(verificationSession.id);\n  const randSeededNum = seededHash() * 1000000000000000000;\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m randSeededNum\", randSeededNum)\n\n  const mimcVal = mimc(randSeededNum)\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m mimc val\", mimcVal.toString())\n\n  var hexVal = mimcVal.toString(16);\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m hexVal \", hexVal.toString())\n  hexVal = `0x${hexVal}` // turn it into right format for contract\n  console.log(\"\\u001b[1;32m [Ethereum] \\u001b[0m hexVal \", hexVal)\n\n  // search Database\n  await searchDatabase(hexVal).catch(console.error);\n\n  // set up transaction\n  const tx = myContract.methods.addNewHash(hexVal);\n  const gas = await tx.estimateGas({from: address});\n  const gasPrice = await web3.eth.getGasPrice();\n  const data = tx.encodeABI();\n  const nonce = await web3.eth.getTransactionCount(address);\n  const txData = {\n    from: address,\n    to: myContract.options.address,\n    data: data,\n    gas: gas,\n    gasPrice: gasPrice,\n    nonce: nonce, \n    chain: 'rinkeby', \n    hardfork: 'istanbul'\n  };\n  \n  // send transaction\n  const receipt = await web3.eth.sendTransaction(txData);\n\n  // console.log transaction hash to show it has gone through\n  console.log(`\\u001b[1;32m [Ethereum] \\u001b[0m Transaction hash: ${receipt.transactionHash}`);\n}\n\n\nexport default handler;"]},"metadata":{},"sourceType":"module"}