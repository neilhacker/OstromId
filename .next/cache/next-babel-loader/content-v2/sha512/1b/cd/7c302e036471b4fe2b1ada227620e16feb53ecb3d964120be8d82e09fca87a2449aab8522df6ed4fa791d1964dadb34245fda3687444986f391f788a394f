{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/pages/index.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// require('dotenv').config();\nimport React, { Component } from \"react\";\nimport { Message, Button, Input, Loader } from \"semantic-ui-react\";\nimport factory from \"../ethereum/verification\";\nimport Layout from \"../components/Layout\";\nimport web3 from '../ethereum/web3'; // import { Router } from '../routes';\n\nimport { loadStripe } from '@stripe/stripe-js';\nimport mimc from '../public/mimc.ts';\nimport { calculateProof } from '../public/prover.js';\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\nconst stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\nconst STATUS_PENDING = \"processing\";\nconst STATUS_SUCCESS = \"verified\";\nconst STATUS_ERROR = \"?\";\nconst STATUS_NOT_STARTED = \"not_submitted\";\n\nclass CampaignIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      errorMessage: '',\n      errorTrue: false,\n      loaderActive: false,\n      accountAlreadyVerified: false,\n      // stripe\n      clientSecret: null,\n      stripe: null,\n      verification_status: STATUS_NOT_STARTED,\n      verification_session_id: null,\n      sessionIdRandNum: null,\n      sessionIdMimcNum: null,\n      //login\n      loginDetailsRecieved: false,\n      //zkp\n      mimcHashNumState: null,\n      solidityVerifierProof: null,\n      zkResult: null\n    });\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      fetch('/api/create-verification-session').then(res => res.json()).then(data => this.setState({\n        clientSecret: data.clientSecret,\n        verification_session_id: data.id\n      }));\n      this.setState({\n        stripe: await stripePromise\n      }); // checking if account is already verified\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        let res = await factory.methods.checkIfAddressVerified().call({\n          from: accounts[0]\n        });\n        this.setState({\n          accountAlreadyVerified: res\n        });\n      } catch (err) {\n        console.log(\"error when initially checking account\");\n        this.setState({\n          errorMessage: \"It looks like you may be on the wrong network or don't have Metamask installed\",\n          errorTrue: true\n        });\n      }\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        const requestOptions = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            title: 'POST of metamask address',\n            address: accounts[0]\n          })\n        };\n        const response = await fetch('/api/verify-deposit-payment', requestOptions);\n        const data = await response.json();\n      } catch (err) {\n        console.log(\"error when initially checking account\");\n        this.setState({\n          errorMessage: \"It looks like you may be on the wrong network or don't have Metamask installed\",\n          errorTrue: true\n        });\n      } // test api post request -- will use to tell if deposit has been paid\n\n    });\n\n    _defineProperty(this, \"verifyIdentity\", async event => {\n      event.preventDefault();\n      this.resetError();\n      this.setState({\n        loaderActive: true\n      });\n      let {\n        stripe,\n        clientSecret\n      } = this.state;\n\n      if (!stripe || !clientSecret) {\n        this.setState({\n          loaderActive: false,\n          errorTrue: true,\n          errorMessage: \"Stripe not connecting\"\n        });\n        return;\n      } // Show the verification modal.\n\n\n      const {\n        error\n      } = await stripe.verifyIdentity(clientSecret);\n\n      if (error) {\n        console.log('[error]', error);\n      } else {\n        console.log('Verification submitted!');\n        this.pollForStatus();\n      }\n    });\n\n    _defineProperty(this, \"pollForStatus\", async () => {\n      if (this.state.verification_status !== \"passed_database_check\" && this.state.verification_status !== \"failed_database_check\") {\n        setTimeout(this.pollForStatus, 5000);\n        this.fetchStatus();\n      }\n\n      if (this.state.verification_status !== STATUS_PENDING && this.state.verification_status !== STATUS_NOT_STARTED && this.state.verification_status !== \"verified_waiting_for_database_check\") {\n        this.setState({\n          loaderActive: false\n        }); //\n\n        if (this.state.verification_status == \"passed_database_check\") {\n          this.setState({\n            loginDetailsRecieved: true\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"fetchStatus\", async () => {\n      //handle error if session id isn't set\n      fetch('/api/get-verification-session/' + this.state.verification_session_id).then(res => res.json()).then(data => this.setState({\n        verification_status: data.status,\n        sessionIdRandNum: data.randSeededNum,\n        sessionIdMimcNum: data.mimcVal\n      }));\n    });\n\n    _defineProperty(this, \"mimcHashNum\", async () => {\n      const preImage1 = document.getElementById('mimc_num').value;\n      console.log(preImage1);\n      const out = mimc(preImage1);\n      console.log(out.toString());\n      this.setState({\n        mimcHashNumState: out.toString()\n      });\n    });\n\n    _defineProperty(this, \"verifyPreimage\", async () => {\n      const preImage = parseInt(document.getElementById('preImageCredential').value);\n      console.log(preImage);\n      const hash = document.getElementById('mimcHashCredential').value;\n      console.log(hash);\n      const solidityProof = await calculateProof(preImage, hash);\n      this.setState({\n        solidityVerifierProof: solidityProof\n      });\n      console.log(solidityProof);\n    });\n\n    _defineProperty(this, \"submitSolProof\", async () => {\n      // event.preventDefault();\n      this.resetError();\n      this.setState({\n        loaderActive: true\n      }); // CREATING ZKP FROM HASH AND PRE-IMAGE \n\n      this.setState({\n        verification_status: \"Creating ZKP\"\n      });\n      const preImage = parseInt(document.getElementById('preImageCredential').value);\n      console.log(preImage);\n      const hash = document.getElementById('mimcHashCredential').value;\n      console.log(hash);\n      const solidityProof = await calculateProof(preImage, hash); // this.setState({solidityVerifierProof: solidityProof});\n\n      console.log(solidityProof); // SUBMIT ZKP TO CONTRACT  \n\n      this.setState({\n        verification_status: \"Starting ETH transaction\"\n      });\n      const fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n      const pi_a = fullProof[0];\n      const pi_b = fullProof[1];\n      const pi_c = fullProof[2];\n      const inputs = fullProof[3]; // send zk proof to verifyHash function\n\n      try {\n        this.setState({\n          verification_status: \"Submitting ZKP...\"\n        });\n        const accounts = await web3.eth.getAccounts();\n        await factory.methods.verifyHash(pi_a, pi_b, pi_c, inputs).send({\n          from: accounts[0]\n        });\n        console.log(\"submitted zkp successfully\"); // Router.reload(window.location.pathname)\n\n        let res = await factory.methods.checkIfAddressVerified().call({\n          from: accounts[0]\n        });\n        this.setState({\n          zkResult: res.toString()\n        });\n        setTimeout(2000); // set state of session status depending on res\n\n        if (res) {\n          this.setState({\n            verification_status: \"Address is verified\"\n          });\n        } else {\n          this.setState({\n            verification_status: \"Address verification failed\"\n          });\n        }\n      } catch (err) {\n        console.log(\"error in submit sol proof\");\n        this.setState({\n          errorMessage: err.message,\n          errorTrue: true\n        });\n      }\n\n      this.setState({\n        loaderActive: false\n      });\n    });\n\n    _defineProperty(this, \"resetError\", () => {\n      this.setState({\n        errorTrue: false,\n        errorMessage: \"\"\n      });\n    });\n\n    _defineProperty(this, \"sendDeposit\", async () => {\n      this.setState({\n        loaderActive: true\n      });\n\n      try {\n        this.setState({\n          verification_status: \"Sending deposit...\"\n        });\n        const accounts = await web3.eth.getAccounts();\n        await factory.methods.payDeposit().send({\n          from: accounts[0],\n          value: 20 // 20 wei deposit\n\n        });\n        let res = await factory.methods.checkIfDepositPayed().call({\n          from: accounts[0]\n        });\n\n        if (res) {\n          this.setState({\n            verification_status: \"Deposity payed...\"\n          });\n        }\n      } catch (err) {\n        console.log(\"error in submit sol proof\");\n        this.setState({\n          errorMessage: err.message,\n          errorTrue: true\n        });\n      }\n\n      this.setState({\n        loaderActive: true\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 50,\n            marginLeft: 200\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Session status: \", this.state.verification_status, \" \\xA0 \\xA0\", this.state.loaderActive ? /*#__PURE__*/_jsxDEV(Loader, {\n              active: true,\n              inline: true,\n              size: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 19\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 17\n          }, this), this.state.errorTrue ? /*#__PURE__*/_jsxDEV(Message, {\n            negative: true,\n            children: [/*#__PURE__*/_jsxDEV(Message.Header, {\n              children: \"Error\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: this.state.errorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 17\n          }, this) : null, this.state.accountAlreadyVerified ? /*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              color: \"rgb(83, 193, 77)\"\n            },\n            children: \"***Looks like your account is already verified***\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 19\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: this.sendDeposit,\n            children: \"Send deposit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Verify your identity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            primary: true,\n            onClick: this.verifyIdentity,\n            children: \"Verify\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Login credentials\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 17\n          }, this), this.state.loginDetailsRecieved ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Pre-image: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 43\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(PreImageButton, {\n              children: this.state.sessionIdRandNum\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Hash: \\xA0 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 38\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(HashButton, {\n              children: this.state.sessionIdMimcNum\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"No login details yet...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Create and submit proof\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              id: \"preImageCredential\",\n              placeholder: \"Pre-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 20\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              id: \"mimcHashCredential\",\n              placeholder: \"Hash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 20\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            primary: true,\n            onClick: this.submitSolProof,\n            children: \"Send proof\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default CampaignIndex;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/working_on/ostrom_id_copy_5/pages/index.js"],"names":["React","Component","Message","Button","Input","Loader","factory","Layout","web3","loadStripe","mimc","calculateProof","PreImageButton","HashButton","stripePromise","STATUS_PENDING","STATUS_SUCCESS","STATUS_ERROR","STATUS_NOT_STARTED","CampaignIndex","errorMessage","errorTrue","loaderActive","accountAlreadyVerified","clientSecret","stripe","verification_status","verification_session_id","sessionIdRandNum","sessionIdMimcNum","loginDetailsRecieved","mimcHashNumState","solidityVerifierProof","zkResult","fetch","then","res","json","data","setState","id","accounts","eth","getAccounts","methods","checkIfAddressVerified","call","from","err","console","log","requestOptions","method","headers","body","JSON","stringify","title","address","response","event","preventDefault","resetError","state","error","verifyIdentity","pollForStatus","setTimeout","fetchStatus","status","randSeededNum","mimcVal","preImage1","document","getElementById","value","out","toString","preImage","parseInt","hash","solidityProof","fullProof","parse","pi_a","pi_b","pi_c","inputs","verifyHash","send","message","payDeposit","checkIfDepositPayed","render","marginTop","marginLeft","color","sendDeposit","submitSolProof"],"mappings":"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","sourcesContent":["// require('dotenv').config();\n\nimport React, { Component } from \"react\";\nimport { Message, Button, Input, Loader } from \"semantic-ui-react\";\nimport factory from \"../ethereum/verification\";\n\nimport Layout from \"../components/Layout\";\nimport web3 from '../ethereum/web3'\n// import { Router } from '../routes';\nimport {loadStripe} from '@stripe/stripe-js';\nimport mimc from '../public/mimc.ts';\n\nimport { calculateProof } from '../public/prover.js'\n\nimport PreImageButton from \"../components/PreImageButton\";\nimport HashButton from \"../components/HashButton\";\n\nconst stripePromise = loadStripe(\"pk_test_51J305OC6YuwVjGqqwAGyjYYoOJUC8zZ7rmVJGeav69MVg4FkqWgx92HMg8hAyU6XmnxxiIbn7ynCKjeYIsC4rasv00aYNmSMfW\");\n\nconst STATUS_PENDING = \"processing\"\nconst STATUS_SUCCESS = \"verified\";\nconst STATUS_ERROR = \"?\"\nconst STATUS_NOT_STARTED = \"not_submitted\";\n\nclass CampaignIndex extends Component {\n \n   state = {\n    errorMessage: '',\n    errorTrue: false,\n    loaderActive: false,\n    accountAlreadyVerified: false,\n    // stripe\n    clientSecret: null,\n    stripe: null,\n    verification_status: STATUS_NOT_STARTED,\n    verification_session_id: null,\n    sessionIdRandNum: null,\n    sessionIdMimcNum: null,\n    //login\n    loginDetailsRecieved: false,\n    //zkp\n    mimcHashNumState:null,\n    solidityVerifierProof:null,\n    zkResult: null,\n  };  \n\n  componentDidMount = async () => {\n    fetch('/api/create-verification-session')\n    .then(res => res.json())\n    .then(data => this.setState({clientSecret: data.clientSecret, verification_session_id: data.id}))\n\n    this.setState({ stripe: await stripePromise })\n\n    // checking if account is already verified\n    try {\n      const accounts = await web3.eth.getAccounts();\n      let res = await factory.methods\n        .checkIfAddressVerified()\n        .call({\n            from: accounts[0]\n    });\n    this.setState({accountAlreadyVerified: res});\n\n  } catch (err) {\n      console.log(\"error when initially checking account\")\n      this.setState({ \n        errorMessage: \"It looks like you may be on the wrong network or don't have Metamask installed\", \n        errorTrue: true });\n  }\n\n  try {\n    const accounts = await web3.eth.getAccounts();\n\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ title: 'POST of metamask address',address: accounts[0] })\n    };\n    const response = await fetch('/api/verify-deposit-payment', requestOptions);\n    const data = await response.json();\n\n} catch (err) {\n    console.log(\"error when initially checking account\")\n    this.setState({ \n      errorMessage: \"It looks like you may be on the wrong network or don't have Metamask installed\", \n      errorTrue: true });\n}\n    // test api post request -- will use to tell if deposit has been paid\n    \n\n\n  }\n\n  verifyIdentity = async (event) => {\n    event.preventDefault();\n\n    this.resetError()\n    this.setState({ loaderActive: true});\n\n    let { stripe, clientSecret } = this.state;\n    \n    if (!stripe || !clientSecret) {\n      this.setState({ loaderActive: false, errorTrue: true, errorMessage: \"Stripe not connecting\"});\n      return;\n    }\n\n    // Show the verification modal.\n    const { error } = await stripe.verifyIdentity(clientSecret);\n    \n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('Verification submitted!');\n      this.pollForStatus();\n    }\n\n  }\n\n  pollForStatus = async() => {\n\n    if(this.state.verification_status !== \"passed_database_check\" && this.state.verification_status !== \"failed_database_check\") {\n      setTimeout(this.pollForStatus, 5000)\n      this.fetchStatus()\n    }\n    if(this.state.verification_status !== STATUS_PENDING && \n        this.state.verification_status !== STATUS_NOT_STARTED && \n        this.state.verification_status !== \"verified_waiting_for_database_check\") \n        {\n          this.setState({ loaderActive: false});\n          //\n          if(this.state.verification_status == \"passed_database_check\") {\n            this.setState({loginDetailsRecieved: true});\n        }\n    }\n\n  }\n\n  fetchStatus = async () => {\n    //handle error if session id isn't set\n    fetch('/api/get-verification-session/' + this.state.verification_session_id)\n      .then(res => res.json())\n      .then(data => this.setState({\n        verification_status: data.status, \n        sessionIdRandNum: data.randSeededNum,\n        sessionIdMimcNum: data.mimcVal,\n      }))\n  }\n\nmimcHashNum = async () => {\n const preImage1 = document.getElementById('mimc_num').value\n console.log(preImage1)\n const out = mimc(preImage1);\n console.log(out.toString())\n this.setState({mimcHashNumState: out.toString()});\n\n}\n\nverifyPreimage = async() => {\n  const preImage = parseInt(document.getElementById('preImageCredential').value);\n  console.log(preImage)\n  const hash = document.getElementById('mimcHashCredential').value;\n  console.log(hash)\n  const solidityProof = await calculateProof(preImage, hash);\n  this.setState({solidityVerifierProof: solidityProof});\n  console.log(solidityProof)\n}\n\nsubmitSolProof = async () => {\n  // event.preventDefault();\n  this.resetError()\n  this.setState({ loaderActive: true});\n\n  // CREATING ZKP FROM HASH AND PRE-IMAGE \n  this.setState({verification_status: \"Creating ZKP\"})\n  const preImage = parseInt(document.getElementById('preImageCredential').value);\n  console.log(preImage)\n  const hash = document.getElementById('mimcHashCredential').value;\n  console.log(hash)\n  const solidityProof = await calculateProof(preImage, hash);\n  // this.setState({solidityVerifierProof: solidityProof});\n  console.log(solidityProof)\n\n  // SUBMIT ZKP TO CONTRACT  \n  this.setState({verification_status: \"Starting ETH transaction\"})\n\n  const fullProof = JSON.parse(\"[\" + solidityProof + \"]\");\n\n  const pi_a = fullProof[0]\n  const pi_b = fullProof[1]\n  const pi_c = fullProof[2]\n  const inputs = fullProof[3]\n  \n\n  // send zk proof to verifyHash function\n  try {\n      this.setState({verification_status: \"Submitting ZKP...\"})\n      const accounts = await web3.eth.getAccounts();\n      await factory.methods\n          .verifyHash(pi_a,pi_b,pi_c,inputs)\n          .send({\n              from: accounts[0]\n      });\n      \n      console.log(\"submitted zkp successfully\")\n      // Router.reload(window.location.pathname)\n\n      let res = await factory.methods\n          .checkIfAddressVerified()\n          .call({\n              from: accounts[0]\n      });\n      this.setState({zkResult: res.toString()});\n\n      setTimeout(2000);\n\n      // set state of session status depending on res\n      if(res) {\n        this.setState({verification_status: \"Address is verified\"})\n      } else {\n        this.setState({verification_status: \"Address verification failed\"})\n      }\n\n\n  } catch (err) {\n      console.log(\"error in submit sol proof\")\n      this.setState({ errorMessage: err.message, errorTrue: true });\n  }\n\n  this.setState({loaderActive: false});\n}\n\n\nresetError = () => {\n  this.setState({errorTrue: false, errorMessage: \"\"});\n}\n\nsendDeposit = async () => {\n  this.setState({ loaderActive: true});\n\n  try {\n    this.setState({verification_status: \"Sending deposit...\"})\n    const accounts = await web3.eth.getAccounts();\n    await factory.methods\n        .payDeposit()\n        .send({\n            from: accounts[0],\n            value: 20 // 20 wei deposit\n    });\n\n    let res = await factory.methods\n        .checkIfDepositPayed()\n        .call({\n            from: accounts[0]\n    });\n    \n    if (res) {\n        this.setState({verification_status: \"Deposity payed...\"})\n    }\n  } catch (err) {\n      console.log(\"error in submit sol proof\")\n      this.setState({ errorMessage: err.message, errorTrue: true });\n  }\nthis.setState({ loaderActive: true});\n\n}\n\n  render() {\n    return (\n        <Layout >\n            <div>\n              <div style={{marginTop: 50, marginLeft: 200}}>\n\n                {/* --------------------SESSION STATUS--------------------- */}\n                <h2>Session status: {this.state.verification_status} &nbsp; &nbsp;\n                {\n                  this.state.loaderActive ?\n                  <Loader active inline size=\"small\" />: null\n                }\n                </h2>\n                {\n                this.state.errorTrue ?\n                <Message negative>\n                  <Message.Header>Error</Message.Header>\n                  <p>{this.state.errorMessage}</p>\n                </Message> : null\n                }\n                {\n                  this.state.accountAlreadyVerified ?\n                  <h3 style={{color:\"rgb(83, 193, 77)\"}}>***Looks like your account is already verified***</h3> : null\n                }\n                \n                <hr/>   \n                <Button onClick={this.sendDeposit}>Send deposit</Button> \n                <hr/>            \n                {/* --------------------VERIFY IDENTITY--------------------- */}\n                <h2>Verify your identity</h2>\n                <Button primary onClick={this.verifyIdentity}>Verify</Button>\n\n                <hr/>\n                \n                {/* --------------------LOGIN CREDENTIALS--------------------- */}\n                <h2>Login credentials</h2>\n                {\n                this.state.loginDetailsRecieved ?\n                  <div>\n                    <h3>Pre-image: &nbsp; <br></br> </h3> \n                    <PreImageButton>{this.state.sessionIdRandNum}</PreImageButton>\n                \n                    <h3>Hash: &nbsp; <br></br></h3>\n                    <HashButton>{this.state.sessionIdMimcNum}</HashButton>\n\n                  </div> : <h4>No login details yet...</h4>\n                }\n                                \n                <hr/>\n                {/* ---------------------SUBMIT PROOF---------------------- */}\n                <h2>Create and submit proof</h2>\n                <p><Input id=\"preImageCredential\" placeholder=\"Pre-image\"></Input></p>\n                <p><Input id=\"mimcHashCredential\" placeholder=\"Hash\"></Input></p>\n                <Button primary onClick={this.submitSolProof} >Send proof</Button> \n\n            </div>\n            </div>\n        </Layout>\n    );\n  }\n}\n\nexport default CampaignIndex;\n"]},"metadata":{},"sourceType":"module"}