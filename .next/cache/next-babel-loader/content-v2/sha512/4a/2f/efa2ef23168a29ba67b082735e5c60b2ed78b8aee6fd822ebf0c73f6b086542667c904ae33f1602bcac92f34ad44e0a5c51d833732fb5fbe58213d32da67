{"ast":null,"code":"const {\n  MongoClient\n} = require('mongodb');\n\nconst consoleString = \"\\u001b[1;32m [Database] \\u001b[0m \";\nexport default async function searchDatabase(hashVal) {\n  const uri = \"mongodb+srv://nhacker:nhacker12.@cluster0.eubpg.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\";\n  const client = new MongoClient(uri);\n\n  try {\n    await client.connect();\n    const res = await verifyUser(client, {\n      name: hashVal\n    });\n    return res;\n  } catch (e) {\n    console.error(e);\n  } finally {\n    await client.close();\n  }\n}\n\nasync function verifyUser(client, potentialUser) {\n  const alreadyExists = await findOneListingByName(client, potentialUser.name);\n\n  if (alreadyExists) {\n    console.log(`${consoleString} User already exists`);\n    return false;\n  } else {\n    console.log(`${consoleString} User not in system, adding them now...`);\n    await createListing(client, potentialUser);\n    console.log(`${consoleString} Added user`);\n    return true;\n  }\n}\n\nasync function findOneListingByName(client, nameOfUser) {\n  const result = await client.db(\"id_verification\").collection(\"verified_users\").findOne({\n    name: nameOfUser\n  });\n  console.log(`${consoleString} Checking if user is already in system...`);\n\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nasync function createListing(client, new_user) {\n  const result = await client.db(\"id_verification\").collection(\"verified_users\").insertOne(new_user);\n}","map":{"version":3,"sources":["/Users/neilhacker/Desktop/project/working_on/ostrom_id_copy_7/backend/mongo.js"],"names":["MongoClient","require","consoleString","searchDatabase","hashVal","uri","client","connect","res","verifyUser","name","e","console","error","close","potentialUser","alreadyExists","findOneListingByName","log","createListing","nameOfUser","result","db","collection","findOne","new_user","insertOne"],"mappings":"AAAA,MAAM;AAACA,EAAAA;AAAD,IAAiBC,OAAO,CAAC,SAAD,CAA9B;;AACA,MAAMC,aAAa,GAAG,oCAAtB;AAEA,eAAe,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAElD,QAAMC,GAAG,GAAG,yGAAZ;AAEA,QAAMC,MAAM,GAAG,IAAIN,WAAJ,CAAgBK,GAAhB,CAAf;;AAEA,MAAI;AACA,UAAMC,MAAM,CAACC,OAAP,EAAN;AAEA,UAAMC,GAAG,GAAG,MAAMC,UAAU,CAACH,MAAD,EAAQ;AAChCI,MAAAA,IAAI,EAAEN;AAD0B,KAAR,CAA5B;AAIA,WAAOI,GAAP;AAEH,GATD,CASE,OAAOG,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACH,GAXD,SAWU;AACN,UAAML,MAAM,CAACQ,KAAP,EAAN;AACH;AAEJ;;AAID,eAAeL,UAAf,CAA0BH,MAA1B,EAAkCS,aAAlC,EAAiD;AAC7C,QAAMC,aAAa,GAAG,MAAMC,oBAAoB,CAACX,MAAD,EAASS,aAAa,CAACL,IAAvB,CAAhD;;AACA,MAAIM,aAAJ,EAAmB;AACfJ,IAAAA,OAAO,CAACM,GAAR,CAAa,GAAEhB,aAAc,sBAA7B;AACA,WAAO,KAAP;AACH,GAHD,MAGO;AACHU,IAAAA,OAAO,CAACM,GAAR,CAAa,GAAEhB,aAAc,yCAA7B;AACA,UAAMiB,aAAa,CAACb,MAAD,EAASS,aAAT,CAAnB;AACAH,IAAAA,OAAO,CAACM,GAAR,CAAa,GAAEhB,aAAc,aAA7B;AACA,WAAO,IAAP;AACH;AAEJ;;AAED,eAAee,oBAAf,CAAoCX,MAApC,EAA4Cc,UAA5C,EAAwD;AACpD,QAAMC,MAAM,GAAG,MAAMf,MAAM,CAACgB,EAAP,CAAU,iBAAV,EAA6BC,UAA7B,CAAwC,gBAAxC,EAA0DC,OAA1D,CAAkE;AAACd,IAAAA,IAAI,EAAEU;AAAP,GAAlE,CAArB;AACAR,EAAAA,OAAO,CAACM,GAAR,CAAa,GAAEhB,aAAc,2CAA7B;;AACA,MAAGmB,MAAH,EAAW;AACP,WAAO,IAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAP;AACH;AACJ;;AAED,eAAeF,aAAf,CAA6Bb,MAA7B,EAAqCmB,QAArC,EAA+C;AAC5C,QAAMJ,MAAM,GAAG,MAAMf,MAAM,CAACgB,EAAP,CAAU,iBAAV,EAA6BC,UAA7B,CAAwC,gBAAxC,EAA0DG,SAA1D,CAAoED,QAApE,CAArB;AACF","sourcesContent":["const {MongoClient } = require('mongodb');\nconst consoleString = \"\\u001b[1;32m [Database] \\u001b[0m \";\n\nexport default async function searchDatabase(hashVal) {\n\n    const uri = \"mongodb+srv://nhacker:nhacker12.@cluster0.eubpg.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\"\n\n    const client = new MongoClient(uri);\n\n    try {\n        await client.connect();\n\n        const res = await verifyUser(client,{\n            name: hashVal,\n        })\n\n        return res\n\n    } catch (e) {\n        console.error(e);\n    } finally {\n        await client.close()\n    }\n\n}\n\n\n\nasync function verifyUser(client, potentialUser) {\n    const alreadyExists = await findOneListingByName(client, potentialUser.name );\n    if (alreadyExists) {\n        console.log(`${consoleString} User already exists`)\n        return false\n    } else {\n        console.log(`${consoleString} User not in system, adding them now...`)\n        await createListing(client, potentialUser)\n        console.log(`${consoleString} Added user`)\n        return true\n    }\n\n}\n\nasync function findOneListingByName(client, nameOfUser) {\n    const result = await client.db(\"id_verification\").collection(\"verified_users\").findOne({name: nameOfUser});\n    console.log(`${consoleString} Checking if user is already in system...`)\n    if(result) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nasync function createListing(client, new_user) {\n   const result = await client.db(\"id_verification\").collection(\"verified_users\").insertOne(new_user);\n}\n\n"]},"metadata":{},"sourceType":"module"}