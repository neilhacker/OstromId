{"ast":null,"code":"import { sha256 } from 'js-sha256';\nimport { EthereumStuff } from '../../backend/ethBackend';\nimport { openVerificationEthFunction } from '../../backend/ethOpenVerification';\nimport searchDatabase from '../../backend/mongo.js';\n\nconst stripe = require('stripe')('rk_test_51J305OC6YuwVjGqqJ6Sj41vN15r5vfTbCiHd1slfDzXLSgdyjLxofs7oqGCBrWRlVXxpfbpIxHd3hmhmTlbWwGNx00UU16Rwo4');\n\nconst stripeSecret = require('stripe')('sk_test_51J305OC6YuwVjGqqdtMScisG2JWYy339dNtTGf7QE44BdrPbWPqeMKd5WF1nfpnKYhAmbh8GGQbiaolofct52IgZ003WkhWzMr');\n\nconst handler = async (req, res) => {\n  //todo: check stripe signing key\n  if (req.method === \"POST\") {\n    const event = req.body; // need to verifiy that event came from stripe \n    // https://stripe.com/docs/identity/handle-verification-outcomes\n    // Handle the event\n\n    switch (event.type) {\n      case 'identity.verification_session.verified':\n        {\n          // All the verification checks passed\n          const verificationSession = event.data.object;\n          await handleSuccessfulVerification(verificationSession);\n          break;\n        }\n\n      default:\n        // Unexpected event type\n        console.log(`❌ Unhandled event type ${event.type}.`);\n    } // Return a 200 response to acknowledge receipt of the event\n\n\n    res.send(); // res.status(200).json({ })\n  } else {\n    res.setHeader(\"Allow\", \"POST\");\n    res.status(405).end(\"Method Not Allowed\");\n  }\n};\n\nconst handleSuccessfulVerification = async verificationSession => {\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m Identity verification session verified\");\n  const verificationType = verificationSession.metadata.verificationType;\n  const adr = verificationSession.metadata.address;\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m MetaData-verificationType: \", verificationType);\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m MetaData-address: \", adr); // get verified outputs to check database\n\n  const verifiedOutputs = await stripe.identity.verificationSessions.retrieve(verificationSession.id, {\n    expand: ['verified_outputs', 'verified_outputs.dob']\n  });\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m Hashing user details...\");\n  const hash = makeHashOfDetails(verifiedOutputs);\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m Hash made: \", hash); // ----------------------------------------------------------------------------            \n  // ------------------------------search database-------------------------------\n  // ----------------------------------------------------------------------------            \n\n  const res = await searchDatabase(hash).catch(console.error);\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m result of database check: \", res); // if user exists already don't send transaction\n\n  if (res == false) {\n    await stripeSecret.identity.verificationSessions.update(verificationSession.id, {\n      metadata: {\n        passedDatabaseCheck: false\n      }\n    });\n    return false;\n  } // ----------------------------------------------------------------------------            \n  // ------------------------------anonymous flow-------------------------------\n  // ----------------------------------------------------------------------------            \n\n\n  if (verificationType == \"anonymous\") {\n    console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m In ANONYMOUS flow: \");\n    const anonymousRes = await EthereumStuff(verificationSession.id);\n    await stripeSecret.identity.verificationSessions.update(verificationSession.id, {\n      metadata: {\n        passedDatabaseCheck: true\n      }\n    });\n  } // ----------------------------------------------------------------------------            \n  // ---------------------------------open flow----------------------------------\n  // ----------------------------------------------------------------------------      \n\n\n  if (verificationType == \"open\") {\n    console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m In OPEN flow: \");\n    const firstName = verifiedOutputs.verified_outputs.first_name.toString().toLowerCase();\n    const lastName = verifiedOutputs.verified_outputs.last_name.toString().toLowerCase();\n    const name = firstName + \" \" + lastName;\n    const openRes = await openVerificationEthFunction(adr, name);\n    await stripeSecret.identity.verificationSessions.update(verificationSession.id, {\n      metadata: {\n        passedDatabaseCheck: true\n      }\n    });\n  }\n};\n\nconst makeHashOfDetails = verifiedOutputs => {\n  const firstName = verifiedOutputs.verified_outputs.first_name.toString().toLowerCase();\n  const lastName = verifiedOutputs.verified_outputs.last_name.toString().toLowerCase();\n  const dayStr = verifiedOutputs.verified_outputs.dob.day.toString();\n  const monthStr = verifiedOutputs.verified_outputs.dob.month.toString();\n  const yearStr = verifiedOutputs.verified_outputs.dob.year.toString();\n  const combination = firstName + lastName + dayStr + monthStr + yearStr;\n  const hashCombination = sha256(combination);\n  return hashCombination;\n};\n\nexport default handler;","map":{"version":3,"sources":["/Users/neilhacker/Desktop/project/working_on/ostrom_id_copy_7/pages/api/stripe_hook.js"],"names":["sha256","EthereumStuff","openVerificationEthFunction","searchDatabase","stripe","require","stripeSecret","handler","req","res","method","event","body","type","verificationSession","data","object","handleSuccessfulVerification","console","log","send","setHeader","status","end","verificationType","metadata","adr","address","verifiedOutputs","identity","verificationSessions","retrieve","id","expand","hash","makeHashOfDetails","catch","error","update","passedDatabaseCheck","anonymousRes","firstName","verified_outputs","first_name","toString","toLowerCase","lastName","last_name","name","openRes","dayStr","dob","day","monthStr","month","yearStr","year","combination","hashCombination"],"mappings":"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","sourcesContent":["import { sha256 } from 'js-sha256';\nimport { EthereumStuff } from '../../backend/ethBackend';\nimport { openVerificationEthFunction } from '../../backend/ethOpenVerification';\nimport searchDatabase from '../../backend/mongo.js'\n\nconst stripe = require('stripe')('rk_test_51J305OC6YuwVjGqqJ6Sj41vN15r5vfTbCiHd1slfDzXLSgdyjLxofs7oqGCBrWRlVXxpfbpIxHd3hmhmTlbWwGNx00UU16Rwo4');\nconst stripeSecret = require('stripe')('sk_test_51J305OC6YuwVjGqqdtMScisG2JWYy339dNtTGf7QE44BdrPbWPqeMKd5WF1nfpnKYhAmbh8GGQbiaolofct52IgZ003WkhWzMr');\n\nconst handler = async (req, res) => {\n    //todo: check stripe signing key\n    if (req.method === \"POST\") {\n        const event = req.body;\n\n        // need to verifiy that event came from stripe \n        // https://stripe.com/docs/identity/handle-verification-outcomes\n      \n        // Handle the event\n        switch (event.type) {\n          case 'identity.verification_session.verified': {\n              // All the verification checks passed\n              const verificationSession = event.data.object;\n              await handleSuccessfulVerification(verificationSession);\n              \n              \n              break;\n            }\n        \n          default:\n            // Unexpected event type\n            console.log(`❌ Unhandled event type ${event.type}.`);\n        }\n        // Return a 200 response to acknowledge receipt of the event\n        res.send();\n        // res.status(200).json({ })\n    } else {\n      res.setHeader(\"Allow\", \"POST\");\n      res.status(405).end(\"Method Not Allowed\");\n    }\n}\n\nconst handleSuccessfulVerification = async (verificationSession) => {\n  console.log( \"\\u001b[1;32m [Stripe] \\u001b[0m Identity verification session verified\" );\n\n  const verificationType = verificationSession.metadata.verificationType;\n  const adr = verificationSession.metadata.address;\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m MetaData-verificationType: \", verificationType)\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m MetaData-address: \", adr)\n\n  // get verified outputs to check database\n  const verifiedOutputs = await stripe.identity.verificationSessions.retrieve(\n    verificationSession.id,\n    {\n      expand: [\n        'verified_outputs',\n        'verified_outputs.dob',\n      ],\n    }\n  );\n\n  console.log( \"\\u001b[1;32m [Stripe] \\u001b[0m Hashing user details...\" );\n  const hash = makeHashOfDetails(verifiedOutputs);\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m Hash made: \", hash)\n\n  // ----------------------------------------------------------------------------            \n  // ------------------------------search database-------------------------------\n  // ----------------------------------------------------------------------------            \n\n  const res = await searchDatabase(hash).catch(console.error);\n  console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m result of database check: \", res)\n  // if user exists already don't send transaction\n  if (res == false) {\n    await stripeSecret.identity.verificationSessions.update(\n      verificationSession.id,\n      {metadata: {passedDatabaseCheck: false}}\n    );\n    return false;\n  }\n  // ----------------------------------------------------------------------------            \n  // ------------------------------anonymous flow-------------------------------\n  // ----------------------------------------------------------------------------            \n  if (verificationType == \"anonymous\") {\n    console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m In ANONYMOUS flow: \")\n    const anonymousRes = await EthereumStuff(verificationSession.id);\n    \n    await stripeSecret.identity.verificationSessions.update(\n      verificationSession.id,\n      {metadata: {passedDatabaseCheck: true}}\n    );\n  }\n  // ----------------------------------------------------------------------------            \n  // ---------------------------------open flow----------------------------------\n  // ----------------------------------------------------------------------------      \n  if (verificationType == \"open\") {\n    console.log(\"\\u001b[1;32m [Stripe] \\u001b[0m In OPEN flow: \")\n    \n    const firstName = verifiedOutputs.verified_outputs.first_name.toString().toLowerCase();\n    const lastName = verifiedOutputs.verified_outputs.last_name.toString().toLowerCase();\n    const name = firstName+\" \"+lastName;\n\n    const openRes = await openVerificationEthFunction(adr, name);\n\n    await stripeSecret.identity.verificationSessions.update(\n      verificationSession.id,\n      {metadata: {passedDatabaseCheck: true}}\n    );\n  }      \n\n}\n\nconst makeHashOfDetails = (verifiedOutputs) => {\n  const firstName = verifiedOutputs.verified_outputs.first_name.toString().toLowerCase();\n  const lastName = verifiedOutputs.verified_outputs.last_name.toString().toLowerCase();\n  const dayStr = verifiedOutputs.verified_outputs.dob.day.toString();\n  const monthStr = verifiedOutputs.verified_outputs.dob.month.toString();\n  const yearStr = verifiedOutputs.verified_outputs.dob.year.toString();\n\n  const combination = firstName + lastName + dayStr + monthStr + yearStr;\n\n  const hashCombination = sha256(combination);\n  return hashCombination;\n\n} \n\nexport default handler;"]},"metadata":{},"sourceType":"module"}